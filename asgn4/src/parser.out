Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    WILLSET
    CONVENIENCE
    FILEPRIVATE
    DEFER
    FALLTHROUGH
    SUBSCRIPT
    NIL
    PRECEDENCE
    INDIRECT
    FINAL
    NONE
    GET
    TRUE
    REQUIRED
    DYNAMIC
    GUARD
    UNOWNED
    LAZY
    LINE_COMMENT
    TRY
    OPTIONAL
    NONMUTATING
    _
    ASSOCIATEDTYPE
    ANY
    RSHIFT
    ASSOCIATIVITY
    OPEN
    SET
    CATCH
    LEFT
    WEAK
    FALSE
    INTERNAL
    TYPE
    PUBLIC
    MUTATING
    DO
    DIDSET
    EXTENSION
    ATRATE
    LSHIFT
    PRIVATE
    OVERRIDE
    CLASS
    ENUM
    IS
    AS
    IN
    RIGHT
    DEINIT
    SUPER
    THROW

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     statements -> statement statements
Rule 3     statements -> <empty>
Rule 4     statement -> expression
Rule 5     statement -> declaration
Rule 6     statement -> loop_statement
Rule 7     statement -> branch_statement
Rule 8     statement -> control_transfer_statement
Rule 9     statement -> print_statement
Rule 10    print_statement -> PRINT LPAREN print_arg_list RPAREN
Rule 11    print_arg_list -> print_arg COMMA print_arg_list
Rule 12    print_arg_list -> print_arg
Rule 13    print_arg -> identifier
Rule 14    print_arg -> literal
Rule 15    print_arg -> expression
Rule 16    loop_statement -> for_statement
Rule 17    loop_statement -> while_statement
Rule 18    loop_statement -> repeat_while_statement
Rule 19    for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block
Rule 20    for_init -> variable_declaration
Rule 21    for_init -> expression_list
Rule 22    while_statement -> WHILE condition_list code_block
Rule 23    condition_list -> condition commacond
Rule 24    commacond -> COMMA condition commacond
Rule 25    commacond -> <empty>
Rule 26    condition -> expression
Rule 27    condition -> case_condition
Rule 28    condition -> optional_binding_condition
Rule 29    case_condition -> CASE pattern initializer
Rule 30    optional_binding_condition -> LET pattern initializer
Rule 31    optional_binding_condition -> VAR pattern initializer
Rule 32    repeat_while_statement -> REPEAT code_block WHILE expression
Rule 33    branch_statement -> if_statement
Rule 34    branch_statement -> switch_statement
Rule 35    if_statement -> IF condition_list code_block else_clause
Rule 36    if_statement -> IF condition_list code_block
Rule 37    else_clause -> ELSE code_block
Rule 38    else_clause -> ELSE if_statement
Rule 39    switch_statement -> SWITCH expression LCURLY switch_cases RCURLY
Rule 40    switch_statement -> SWITCH expression LCURLY RCURLY
Rule 41    switch_cases -> switch_case switch_cases
Rule 42    switch_cases -> switch_case
Rule 43    switch_case -> case_label statements
Rule 44    switch_case -> default_label statements
Rule 45    case_label -> CASE case_item_list COLON
Rule 46    case_item_list -> pattern where_clause
Rule 47    case_item_list -> pattern
Rule 48    case_item_list -> pattern where_clause COMMA case_item_list
Rule 49    case_item_list -> pattern COMMA case_item_list
Rule 50    default_label -> DEFAULT COLON
Rule 51    where_clause -> WHERE where_expression
Rule 52    where_expression -> expression
Rule 53    control_transfer_statement -> break_statement
Rule 54    control_transfer_statement -> continue_statement
Rule 55    control_transfer_statement -> return_statement
Rule 56    break_statement -> BREAK
Rule 57    continue_statement -> CONTINUE
Rule 58    return_statement -> RETURN expression
Rule 59    return_statement -> RETURN
Rule 60    declaration -> import_declaration
Rule 61    declaration -> constant_declaration
Rule 62    declaration -> variable_declaration
Rule 63    declaration -> function_declaration
Rule 64    declaration -> struct_declaration
Rule 65    declaration -> operator_declaration
Rule 66    top_level_declaration -> statements
Rule 67    top_level_declaration -> <empty>
Rule 68    code_block -> LCURLY statements RCURLY
Rule 69    code_block -> LCURLY RCURLY
Rule 70    import_declaration -> IMPORT import_kind import_path
Rule 71    import_declaration -> IMPORT import_path
Rule 72    import_kind -> TYPEALIAS
Rule 73    import_kind -> STRUCT
Rule 74    import_kind -> VAR
Rule 75    import_kind -> FUNC
Rule 76    import_path -> import_path_identifier dot_import_path_identifier
Rule 77    dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier
Rule 78    dot_import_path_identifier -> <empty>
Rule 79    import_path_identifier -> declaration_identifier
Rule 80    import_path_identifier -> operator
Rule 81    constant_declaration -> LET pattern_initializer_list
Rule 82    pattern_initializer_list -> pattern_initializer p_com_pat_init_star
Rule 83    p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star
Rule 84    p_com_pat_init_star -> <empty>
Rule 85    pattern_initializer -> pattern initializer
Rule 86    pattern_initializer -> pattern
Rule 87    initializer -> EQUAL expression
Rule 88    variable_declaration -> variable_declaration_head variable_name type_annotation code_block
Rule 89    variable_declaration -> variable_declaration_head variable_name type_annotation initializer
Rule 90    variable_declaration -> variable_declaration_head pattern_initializer_list
Rule 91    variable_declaration_head -> VAR
Rule 92    variable_name -> declaration_identifier
Rule 93    function_declaration -> function_head function_name function_signature function_body
Rule 94    function_declaration -> function_head function_name function_signature
Rule 95    function_head -> FUNC
Rule 96    function_name -> declaration_identifier
Rule 97    function_name -> operator
Rule 98    function_signature -> parameter_clause THROWS function_result
Rule 99    function_signature -> parameter_clause
Rule 100   function_signature -> parameter_clause THROWS
Rule 101   function_signature -> parameter_clause function_result
Rule 102   function_signature -> parameter_clause RETHROWS function_result
Rule 103   function_signature -> parameter_clause RETHROWS
Rule 104   function_result -> ARROW type
Rule 105   function_body -> code_block
Rule 106   parameter_clause -> LPAREN RPAREN
Rule 107   parameter_clause -> LPAREN parameter_list RPAREN
Rule 108   parameter_list -> parameter commapar
Rule 109   commapar -> COMMA parameter commapar
Rule 110   commapar -> <empty>
Rule 111   parameter -> external_parameter_name local_parameter_name type_annotation default_argument_clause
Rule 112   parameter -> local_parameter_name type_annotation
Rule 113   parameter -> local_parameter_name type_annotation default_argument_clause
Rule 114   parameter -> external_parameter_name local_parameter_name type_annotation
Rule 115   parameter -> external_parameter_name local_parameter_name type_annotation RANGEOP
Rule 116   parameter -> local_parameter_name type_annotation RANGEOP
Rule 117   external_parameter_name -> label_identifier
Rule 118   local_parameter_name -> label_identifier
Rule 119   default_argument_clause -> EQUAL expression
Rule 120   struct_declaration -> STRUCT struct_name struct_body
Rule 121   struct_name -> declaration_identifier
Rule 122   struct_body -> LCURLY struct_member_star RCURLY
Rule 123   struct_member_star -> struct_member struct_member_star
Rule 124   struct_member_star -> <empty>
Rule 125   struct_member -> declaration
Rule 126   operator_declaration -> prefix_operator_declaration
Rule 127   operator_declaration -> postfix_operator_declaration
Rule 128   operator_declaration -> infix_operator_declaration
Rule 129   prefix_operator_declaration -> PREFIX OPERATOR operator
Rule 130   postfix_operator_declaration -> POSTFIX OPERATOR operator
Rule 131   infix_operator_declaration -> INFIX OPERATOR operator
Rule 132   declaration_modifier -> POSTFIX
Rule 133   declaration_modifier -> PREFIX
Rule 134   declaration_modifier -> STATIC
Rule 135   pattern -> identifier_pattern type_annotation
Rule 136   pattern -> identifier_pattern
Rule 137   pattern -> value_binding_pattern
Rule 138   pattern -> expression_pattern
Rule 139   identifier_pattern -> declaration_identifier
Rule 140   value_binding_pattern -> VAR pattern
Rule 141   value_binding_pattern -> LET pattern
Rule 142   expression_pattern -> expression
Rule 143   expression -> prefix_expression binary_expressions
Rule 144   expression -> prefix_expression
Rule 145   expression_list -> expression commaexp
Rule 146   commaexp -> COMMA expression commaexp
Rule 147   commaexp -> <empty>
Rule 148   prefix_expression -> prefix_operator postfix_expression
Rule 149   prefix_expression -> postfix_expression
Rule 150   prefix_expression -> in_out_expression
Rule 151   in_out_expression -> AND declaration_identifier
Rule 152   binary_expression -> binary_operator prefix_expression
Rule 153   binary_expression -> EQUAL prefix_expression
Rule 154   binary_expression -> conditional_operator prefix_expression
Rule 155   binary_expressions -> binary_expression_plus
Rule 156   binary_expression_plus -> binary_expression binary_expression_plus
Rule 157   binary_expression_plus -> binary_expression
Rule 158   primary_expression -> declaration_identifier
Rule 159   primary_expression -> literal_expression
Rule 160   primary_expression -> parenthesized_expression
Rule 161   literal_expression -> literal
Rule 162   literal_expression -> array_literal
Rule 163   array_literal -> LBRACK array_literal_items RBRACK
Rule 164   array_literal -> LBRACK RBRACK
Rule 165   array_literal_items -> array_literal_item COMMA
Rule 166   array_literal_items -> array_literal_item
Rule 167   array_literal_items -> array_literal_item COMMA array_literal_items
Rule 168   array_literal_item -> expression
Rule 169   parenthesized_expression -> LPAREN expression RPAREN
Rule 170   postfix_expression -> primary_expression
Rule 171   postfix_expression -> postfix_expression function_call_argument_clause
Rule 172   postfix_expression -> postfix_expression DOT INIT
Rule 173   postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN
Rule 174   postfix_expression -> postfix_expression DOT INT_CONST
Rule 175   postfix_expression -> postfix_expression DOT declaration_identifier
Rule 176   postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
Rule 177   postfix_expression -> postfix_expression LPAREN argument_names RPAREN
Rule 178   postfix_expression -> postfix_expression DOT SELF
Rule 179   postfix_expression -> postfix_expression LBRACK expression_list RBRACK
Rule 180   function_call_argument_clause -> LPAREN RPAREN
Rule 181   function_call_argument_clause -> LPAREN function_call_argument_list RPAREN
Rule 182   function_call_argument_list -> function_call_argument COMMAfunction_call_argument_star
Rule 183   COMMAfunction_call_argument_star -> COMMA function_call_argument COMMAfunction_call_argument_star
Rule 184   COMMAfunction_call_argument_star -> <empty>
Rule 185   function_call_argument -> expression
Rule 186   function_call_argument -> label_identifier COLON expression
Rule 187   function_call_argument -> operator
Rule 188   function_call_argument -> label_identifier COLON operator
Rule 189   argument_names -> argument_name argument_name_star
Rule 190   argument_name_star -> argument_name argument_name_star
Rule 191   argument_name_star -> <empty>
Rule 192   argument_name -> label_identifier COLON
Rule 193   type -> array_type
Rule 194   type -> function_type
Rule 195   type -> type_identifier
Rule 196   type_annotation -> COLON INOUT type
Rule 197   type_annotation -> COLON type
Rule 198   type_identifier -> type_name DOT type_identifier
Rule 199   type_identifier -> type_name
Rule 200   type_name -> declaration_identifier
Rule 201   type_name -> type_keyword
Rule 202   type_keyword -> INT
Rule 203   type_keyword -> FLOAT
Rule 204   type_keyword -> DOUBLE
Rule 205   type_keyword -> STRING
Rule 206   function_type -> function_type_argument_clause THROWS ARROW type
Rule 207   function_type -> function_type_argument_clause ARROW type
Rule 208   function_type -> function_type_argument_clause RETHROWS ARROW type
Rule 209   function_type_argument_clause -> LPAREN RPAREN
Rule 210   function_type_argument_clause -> LPAREN function_type_argument_list RANGEOP RPAREN
Rule 211   function_type_argument_clause -> LPAREN function_type_argument_list RPAREN
Rule 212   function_type_argument_list -> function_type_argument
Rule 213   function_type_argument_list -> function_type_argument COMMA function_type_argument_list
Rule 214   function_type_argument -> INOUT type
Rule 215   function_type_argument -> type
Rule 216   function_type_argument -> argument_label type_annotation
Rule 217   argument_label -> label_identifier
Rule 218   array_type -> LBRACK type RBRACK
Rule 219   identifier -> IDENTIFIER
Rule 220   declaration_identifier -> IDENTIFIER
Rule 221   label_identifier -> IDENTIFIER
Rule 222   prefix_operator -> operator
Rule 223   binary_operator -> operator
Rule 224   postfix_operator -> operator
Rule 225   operator -> DIV
Rule 226   operator -> EQUAL
Rule 227   operator -> SUB
Rule 228   operator -> ADD
Rule 229   operator -> EXCLAMATION
Rule 230   operator -> MUL
Rule 231   operator -> MOD
Rule 232   operator -> AND
Rule 233   operator -> OR
Rule 234   operator -> LT
Rule 235   operator -> GT
Rule 236   operator -> CARET
Rule 237   operator -> TILDE
Rule 238   operator -> CONDOP
Rule 239   operator -> conditional_operator
Rule 240   operator -> ANDAND
Rule 241   operator -> OROR
Rule 242   operator -> NOT
Rule 243   operator -> DOT
Rule 244   conditional_operator -> EQUALEQUAL
Rule 245   conditional_operator -> NOTEQUAL
Rule 246   conditional_operator -> LTE
Rule 247   conditional_operator -> GTE
Rule 248   conditional_operator -> LT
Rule 249   conditional_operator -> GT
Rule 250   literal -> STRING_LITERAL
Rule 251   literal -> CHAR_CONST
Rule 252   literal -> FLOAT_CONST
Rule 253   literal -> INT_CONST
Rule 254   literal -> NIL_LITERAL

Terminals, with rules where they appear

ADD                  : 228
AND                  : 151 232
ANDAND               : 240
ANY                  : 
ARROW                : 104 206 207 208
AS                   : 
ASSOCIATEDTYPE       : 
ASSOCIATIVITY        : 
ATRATE               : 
BREAK                : 56
CARET                : 236
CASE                 : 29 45
CATCH                : 
CHAR_CONST           : 251
CLASS                : 
COLON                : 45 50 186 188 192 196 197
COMMA                : 11 24 48 49 83 109 146 165 167 183 213
CONDOP               : 238
CONTINUE             : 57
CONVENIENCE          : 
DEFAULT              : 50
DEFER                : 
DEINIT               : 
DIDSET               : 
DIV                  : 225
DO                   : 
DOT                  : 77 172 173 174 175 176 178 198 243
DOUBLE               : 204
DYNAMIC              : 
ELSE                 : 37 38
ENUM                 : 
EQUAL                : 87 119 153 226
EQUALEQUAL           : 244
EXCLAMATION          : 229
EXTENSION            : 
FALLTHROUGH          : 
FALSE                : 
FILEPRIVATE          : 
FINAL                : 
FLOAT                : 203
FLOAT_CONST          : 252
FOR                  : 19
FUNC                 : 75 95
GET                  : 
GT                   : 235 249
GTE                  : 247
GUARD                : 
IDENTIFIER           : 219 220 221
IF                   : 35 36
IMPORT               : 70 71
IN                   : 
INDIRECT             : 
INFIX                : 131
INIT                 : 172 173
INOUT                : 196 214
INT                  : 202
INTERNAL             : 
INT_CONST            : 174 253
IS                   : 
LAZY                 : 
LBRACK               : 163 164 179 218
LCURLY               : 39 40 68 69 122
LEFT                 : 
LET                  : 30 81 141
LINE_COMMENT         : 
LPAREN               : 10 19 106 107 169 173 176 177 180 181 209 210 211
LSHIFT               : 
LT                   : 234 248
LTE                  : 246
MOD                  : 231
MUL                  : 230
MUTATING             : 
NIL                  : 
NIL_LITERAL          : 254
NONE                 : 
NONMUTATING          : 
NOT                  : 242
NOTEQUAL             : 245
OPEN                 : 
OPERATOR             : 129 130 131
OPTIONAL             : 
OR                   : 233
OROR                 : 241
OVERRIDE             : 
POSTFIX              : 130 132
PRECEDENCE           : 
PREFIX               : 129 133
PRINT                : 10
PRIVATE              : 
PUBLIC               : 
RANGEOP              : 115 116 210
RBRACK               : 163 164 179 218
RCURLY               : 39 40 68 69 122
REPEAT               : 32
REQUIRED             : 
RETHROWS             : 102 103 208
RETURN               : 58 59
RIGHT                : 
RPAREN               : 10 19 106 107 169 173 176 177 180 181 209 210 211
RSHIFT               : 
SELF                 : 178
SEMICOLON            : 19 19
SET                  : 
STATIC               : 134
STRING               : 205
STRING_LITERAL       : 250
STRUCT               : 73 120
SUB                  : 227
SUBSCRIPT            : 
SUPER                : 
SWITCH               : 39 40
THROW                : 
THROWS               : 98 100 206
TILDE                : 237
TRUE                 : 
TRY                  : 
TYPE                 : 
TYPEALIAS            : 72
UNOWNED              : 
VAR                  : 31 74 91 140
WEAK                 : 
WHERE                : 51
WHILE                : 22 32
WILLSET              : 
_                    : 
error                : 

Nonterminals, with rules where they appear

COMMAfunction_call_argument_star : 182 183
argument_label       : 216
argument_name        : 189 190
argument_name_star   : 189 190
argument_names       : 173 176 177
array_literal        : 162
array_literal_item   : 165 166 167
array_literal_items  : 163 167
array_type           : 193
binary_expression    : 156 157
binary_expression_plus : 155 156
binary_expressions   : 143
binary_operator      : 152
branch_statement     : 7
break_statement      : 53
case_condition       : 27
case_item_list       : 45 48 49
case_label           : 43
code_block           : 19 22 32 35 36 37 88 105
commacond            : 23 24
commaexp             : 145 146
commapar             : 108 109
condition            : 23 24
condition_list       : 22 35 36
conditional_operator : 154 239
constant_declaration : 61
continue_statement   : 54
control_transfer_statement : 8
declaration          : 5 125
declaration_identifier : 79 92 96 121 139 151 158 175 176 200
declaration_modifier : 
default_argument_clause : 111 113
default_label        : 44
dot_import_path_identifier : 76 77
else_clause          : 35
expression           : 4 15 19 19 26 32 39 40 52 58 87 119 142 145 146 168 169 185 186
expression_list      : 21 179
expression_pattern   : 138
external_parameter_name : 111 114 115
for_init             : 19
for_statement        : 16
function_body        : 93
function_call_argument : 182 183
function_call_argument_clause : 171
function_call_argument_list : 181
function_declaration : 63
function_head        : 93 94
function_name        : 93 94
function_result      : 98 101 102
function_signature   : 93 94
function_type        : 194
function_type_argument : 212 213
function_type_argument_clause : 206 207 208
function_type_argument_list : 210 211 213
identifier           : 13
identifier_pattern   : 135 136
if_statement         : 33 38
import_declaration   : 60
import_kind          : 70
import_path          : 70 71
import_path_identifier : 76 77
in_out_expression    : 150
infix_operator_declaration : 128
initializer          : 29 30 31 85 89
label_identifier     : 117 118 186 188 192 217
literal              : 14 161
literal_expression   : 159
local_parameter_name : 111 112 113 114 115 116
loop_statement       : 6
operator             : 80 97 129 130 131 187 188 222 223 224
operator_declaration : 65
optional_binding_condition : 28
p_com_pat_init_star  : 82 83
parameter            : 108 109
parameter_clause     : 98 99 100 101 102 103
parameter_list       : 107
parenthesized_expression : 160
pattern              : 29 30 31 46 47 48 49 85 86 140 141
pattern_initializer  : 82 83
pattern_initializer_list : 81 90
postfix_expression   : 148 149 171 172 173 174 175 176 177 178 179
postfix_operator     : 
postfix_operator_declaration : 127
prefix_expression    : 143 144 152 153 154
prefix_operator      : 148
prefix_operator_declaration : 126
primary_expression   : 170
print_arg            : 11 12
print_arg_list       : 10 11
print_statement      : 9
repeat_while_statement : 18
return_statement     : 55
start                : 0
statement            : 2
statements           : 1 2 43 44 66 68
struct_body          : 120
struct_declaration   : 64
struct_member        : 123
struct_member_star   : 122 123
struct_name          : 120
switch_case          : 41 42
switch_cases         : 39 41
switch_statement     : 34
top_level_declaration : 
type                 : 104 196 197 206 207 208 214 215 218
type_annotation      : 88 89 111 112 113 114 115 116 135 216
type_identifier      : 195 198
type_keyword         : 201
type_name            : 198 199
value_binding_pattern : 137
variable_declaration : 20 62
variable_declaration_head : 88 89 90
variable_name        : 88 89
where_clause         : 46 48
where_expression     : 51
while_statement      : 17

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) statements -> . statement statements
    (3) statements -> .
    (4) statement -> . expression
    (5) statement -> . declaration
    (6) statement -> . loop_statement
    (7) statement -> . branch_statement
    (8) statement -> . control_transfer_statement
    (9) statement -> . print_statement
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (60) declaration -> . import_declaration
    (61) declaration -> . constant_declaration
    (62) declaration -> . variable_declaration
    (63) declaration -> . function_declaration
    (64) declaration -> . struct_declaration
    (65) declaration -> . operator_declaration
    (16) loop_statement -> . for_statement
    (17) loop_statement -> . while_statement
    (18) loop_statement -> . repeat_while_statement
    (33) branch_statement -> . if_statement
    (34) branch_statement -> . switch_statement
    (53) control_transfer_statement -> . break_statement
    (54) control_transfer_statement -> . continue_statement
    (55) control_transfer_statement -> . return_statement
    (10) print_statement -> . PRINT LPAREN print_arg_list RPAREN
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (70) import_declaration -> . IMPORT import_kind import_path
    (71) import_declaration -> . IMPORT import_path
    (81) constant_declaration -> . LET pattern_initializer_list
    (88) variable_declaration -> . variable_declaration_head variable_name type_annotation code_block
    (89) variable_declaration -> . variable_declaration_head variable_name type_annotation initializer
    (90) variable_declaration -> . variable_declaration_head pattern_initializer_list
    (93) function_declaration -> . function_head function_name function_signature function_body
    (94) function_declaration -> . function_head function_name function_signature
    (120) struct_declaration -> . STRUCT struct_name struct_body
    (126) operator_declaration -> . prefix_operator_declaration
    (127) operator_declaration -> . postfix_operator_declaration
    (128) operator_declaration -> . infix_operator_declaration
    (19) for_statement -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block
    (22) while_statement -> . WHILE condition_list code_block
    (32) repeat_while_statement -> . REPEAT code_block WHILE expression
    (35) if_statement -> . IF condition_list code_block else_clause
    (36) if_statement -> . IF condition_list code_block
    (39) switch_statement -> . SWITCH expression LCURLY switch_cases RCURLY
    (40) switch_statement -> . SWITCH expression LCURLY RCURLY
    (56) break_statement -> . BREAK
    (57) continue_statement -> . CONTINUE
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (91) variable_declaration_head -> . VAR
    (95) function_head -> . FUNC
    (129) prefix_operator_declaration -> . PREFIX OPERATOR operator
    (130) postfix_operator_declaration -> . POSTFIX OPERATOR operator
    (131) infix_operator_declaration -> . INFIX OPERATOR operator
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    $end            reduce using rule 3 (statements -> .)
    PRINT           shift and go to state 20
    IMPORT          shift and go to state 8
    LET             shift and go to state 68
    STRUCT          shift and go to state 86
    FOR             shift and go to state 25
    WHILE           shift and go to state 41
    REPEAT          shift and go to state 24
    IF              shift and go to state 85
    SWITCH          shift and go to state 50
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 32
    RETURN          shift and go to state 16
    AND             shift and go to state 27
    VAR             shift and go to state 12
    FUNC            shift and go to state 26
    PREFIX          shift and go to state 71
    POSTFIX         shift and go to state 4
    INFIX           shift and go to state 34
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    statements                     shift and go to state 39
    loop_statement                 shift and go to state 3
    break_statement                shift and go to state 17
    operator                       shift and go to state 18
    variable_declaration_head      shift and go to state 19
    prefix_operator                shift and go to state 6
    print_statement                shift and go to state 42
    branch_statement               shift and go to state 44
    variable_declaration           shift and go to state 45
    switch_statement               shift and go to state 21
    prefix_operator_declaration    shift and go to state 55
    function_head                  shift and go to state 75
    postfix_expression             shift and go to state 76
    return_statement               shift and go to state 77
    start                          shift and go to state 49
    while_statement                shift and go to state 48
    continue_statement             shift and go to state 22
    statement                      shift and go to state 51
    declaration_identifier         shift and go to state 23
    constant_declaration           shift and go to state 80
    if_statement                   shift and go to state 81
    for_statement                  shift and go to state 9
    postfix_operator_declaration   shift and go to state 54
    struct_declaration             shift and go to state 11
    literal                        shift and go to state 82
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    declaration                    shift and go to state 59
    import_declaration             shift and go to state 5
    literal_expression             shift and go to state 28
    operator_declaration           shift and go to state 60
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    function_declaration           shift and go to state 29
    conditional_operator           shift and go to state 79
    in_out_expression              shift and go to state 30
    infix_operator_declaration     shift and go to state 13
    control_transfer_statement     shift and go to state 87
    repeat_while_statement         shift and go to state 69
    expression                     shift and go to state 35

state 1

    (245) conditional_operator -> NOTEQUAL .

    IDENTIFIER      reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    STRING_LITERAL  reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    CHAR_CONST      reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    FLOAT_CONST     reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    INT_CONST       reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    NIL_LITERAL     reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    LBRACK          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    COMMA           reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    RPAREN          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    AND             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    DIV             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    EQUAL           reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    SUB             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    ADD             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    EXCLAMATION     reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    MUL             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    MOD             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    OR              reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    LT              reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    GT              reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    CARET           reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    TILDE           reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    CONDOP          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    ANDAND          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    OROR            reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    NOT             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    DOT             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    EQUALEQUAL      reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    NOTEQUAL        reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    LTE             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    GTE             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    PRINT           reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    IMPORT          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    LET             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    STRUCT          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    FOR             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    WHILE           reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    REPEAT          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    IF              reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    SWITCH          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    BREAK           reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    CONTINUE        reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    RETURN          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    VAR             reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    FUNC            reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    PREFIX          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    POSTFIX         reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    INFIX           reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    $end            reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    RCURLY          reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    CASE            reduce using rule 245 (conditional_operator -> NOTEQUAL .)
    DEFAULT         reduce using rule 245 (conditional_operator -> NOTEQUAL .)


state 2

    (246) conditional_operator -> LTE .

    IDENTIFIER      reduce using rule 246 (conditional_operator -> LTE .)
    LPAREN          reduce using rule 246 (conditional_operator -> LTE .)
    STRING_LITERAL  reduce using rule 246 (conditional_operator -> LTE .)
    CHAR_CONST      reduce using rule 246 (conditional_operator -> LTE .)
    FLOAT_CONST     reduce using rule 246 (conditional_operator -> LTE .)
    INT_CONST       reduce using rule 246 (conditional_operator -> LTE .)
    NIL_LITERAL     reduce using rule 246 (conditional_operator -> LTE .)
    LBRACK          reduce using rule 246 (conditional_operator -> LTE .)
    COMMA           reduce using rule 246 (conditional_operator -> LTE .)
    RPAREN          reduce using rule 246 (conditional_operator -> LTE .)
    AND             reduce using rule 246 (conditional_operator -> LTE .)
    DIV             reduce using rule 246 (conditional_operator -> LTE .)
    EQUAL           reduce using rule 246 (conditional_operator -> LTE .)
    SUB             reduce using rule 246 (conditional_operator -> LTE .)
    ADD             reduce using rule 246 (conditional_operator -> LTE .)
    EXCLAMATION     reduce using rule 246 (conditional_operator -> LTE .)
    MUL             reduce using rule 246 (conditional_operator -> LTE .)
    MOD             reduce using rule 246 (conditional_operator -> LTE .)
    OR              reduce using rule 246 (conditional_operator -> LTE .)
    LT              reduce using rule 246 (conditional_operator -> LTE .)
    GT              reduce using rule 246 (conditional_operator -> LTE .)
    CARET           reduce using rule 246 (conditional_operator -> LTE .)
    TILDE           reduce using rule 246 (conditional_operator -> LTE .)
    CONDOP          reduce using rule 246 (conditional_operator -> LTE .)
    ANDAND          reduce using rule 246 (conditional_operator -> LTE .)
    OROR            reduce using rule 246 (conditional_operator -> LTE .)
    NOT             reduce using rule 246 (conditional_operator -> LTE .)
    DOT             reduce using rule 246 (conditional_operator -> LTE .)
    EQUALEQUAL      reduce using rule 246 (conditional_operator -> LTE .)
    NOTEQUAL        reduce using rule 246 (conditional_operator -> LTE .)
    LTE             reduce using rule 246 (conditional_operator -> LTE .)
    GTE             reduce using rule 246 (conditional_operator -> LTE .)
    PRINT           reduce using rule 246 (conditional_operator -> LTE .)
    IMPORT          reduce using rule 246 (conditional_operator -> LTE .)
    LET             reduce using rule 246 (conditional_operator -> LTE .)
    STRUCT          reduce using rule 246 (conditional_operator -> LTE .)
    FOR             reduce using rule 246 (conditional_operator -> LTE .)
    WHILE           reduce using rule 246 (conditional_operator -> LTE .)
    REPEAT          reduce using rule 246 (conditional_operator -> LTE .)
    IF              reduce using rule 246 (conditional_operator -> LTE .)
    SWITCH          reduce using rule 246 (conditional_operator -> LTE .)
    BREAK           reduce using rule 246 (conditional_operator -> LTE .)
    CONTINUE        reduce using rule 246 (conditional_operator -> LTE .)
    RETURN          reduce using rule 246 (conditional_operator -> LTE .)
    VAR             reduce using rule 246 (conditional_operator -> LTE .)
    FUNC            reduce using rule 246 (conditional_operator -> LTE .)
    PREFIX          reduce using rule 246 (conditional_operator -> LTE .)
    POSTFIX         reduce using rule 246 (conditional_operator -> LTE .)
    INFIX           reduce using rule 246 (conditional_operator -> LTE .)
    $end            reduce using rule 246 (conditional_operator -> LTE .)
    RCURLY          reduce using rule 246 (conditional_operator -> LTE .)
    CASE            reduce using rule 246 (conditional_operator -> LTE .)
    DEFAULT         reduce using rule 246 (conditional_operator -> LTE .)


state 3

    (6) statement -> loop_statement .

    PRINT           reduce using rule 6 (statement -> loop_statement .)
    IMPORT          reduce using rule 6 (statement -> loop_statement .)
    LET             reduce using rule 6 (statement -> loop_statement .)
    STRUCT          reduce using rule 6 (statement -> loop_statement .)
    FOR             reduce using rule 6 (statement -> loop_statement .)
    WHILE           reduce using rule 6 (statement -> loop_statement .)
    REPEAT          reduce using rule 6 (statement -> loop_statement .)
    IF              reduce using rule 6 (statement -> loop_statement .)
    SWITCH          reduce using rule 6 (statement -> loop_statement .)
    BREAK           reduce using rule 6 (statement -> loop_statement .)
    CONTINUE        reduce using rule 6 (statement -> loop_statement .)
    RETURN          reduce using rule 6 (statement -> loop_statement .)
    AND             reduce using rule 6 (statement -> loop_statement .)
    VAR             reduce using rule 6 (statement -> loop_statement .)
    FUNC            reduce using rule 6 (statement -> loop_statement .)
    PREFIX          reduce using rule 6 (statement -> loop_statement .)
    POSTFIX         reduce using rule 6 (statement -> loop_statement .)
    INFIX           reduce using rule 6 (statement -> loop_statement .)
    DIV             reduce using rule 6 (statement -> loop_statement .)
    EQUAL           reduce using rule 6 (statement -> loop_statement .)
    SUB             reduce using rule 6 (statement -> loop_statement .)
    ADD             reduce using rule 6 (statement -> loop_statement .)
    EXCLAMATION     reduce using rule 6 (statement -> loop_statement .)
    MUL             reduce using rule 6 (statement -> loop_statement .)
    MOD             reduce using rule 6 (statement -> loop_statement .)
    OR              reduce using rule 6 (statement -> loop_statement .)
    LT              reduce using rule 6 (statement -> loop_statement .)
    GT              reduce using rule 6 (statement -> loop_statement .)
    CARET           reduce using rule 6 (statement -> loop_statement .)
    TILDE           reduce using rule 6 (statement -> loop_statement .)
    CONDOP          reduce using rule 6 (statement -> loop_statement .)
    ANDAND          reduce using rule 6 (statement -> loop_statement .)
    OROR            reduce using rule 6 (statement -> loop_statement .)
    NOT             reduce using rule 6 (statement -> loop_statement .)
    DOT             reduce using rule 6 (statement -> loop_statement .)
    EQUALEQUAL      reduce using rule 6 (statement -> loop_statement .)
    NOTEQUAL        reduce using rule 6 (statement -> loop_statement .)
    LTE             reduce using rule 6 (statement -> loop_statement .)
    GTE             reduce using rule 6 (statement -> loop_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> loop_statement .)
    LPAREN          reduce using rule 6 (statement -> loop_statement .)
    STRING_LITERAL  reduce using rule 6 (statement -> loop_statement .)
    CHAR_CONST      reduce using rule 6 (statement -> loop_statement .)
    FLOAT_CONST     reduce using rule 6 (statement -> loop_statement .)
    INT_CONST       reduce using rule 6 (statement -> loop_statement .)
    NIL_LITERAL     reduce using rule 6 (statement -> loop_statement .)
    LBRACK          reduce using rule 6 (statement -> loop_statement .)
    $end            reduce using rule 6 (statement -> loop_statement .)
    RCURLY          reduce using rule 6 (statement -> loop_statement .)
    CASE            reduce using rule 6 (statement -> loop_statement .)
    DEFAULT         reduce using rule 6 (statement -> loop_statement .)


state 4

    (130) postfix_operator_declaration -> POSTFIX . OPERATOR operator

    OPERATOR        shift and go to state 88


state 5

    (60) declaration -> import_declaration .

    PRINT           reduce using rule 60 (declaration -> import_declaration .)
    IMPORT          reduce using rule 60 (declaration -> import_declaration .)
    LET             reduce using rule 60 (declaration -> import_declaration .)
    STRUCT          reduce using rule 60 (declaration -> import_declaration .)
    FOR             reduce using rule 60 (declaration -> import_declaration .)
    WHILE           reduce using rule 60 (declaration -> import_declaration .)
    REPEAT          reduce using rule 60 (declaration -> import_declaration .)
    IF              reduce using rule 60 (declaration -> import_declaration .)
    SWITCH          reduce using rule 60 (declaration -> import_declaration .)
    BREAK           reduce using rule 60 (declaration -> import_declaration .)
    CONTINUE        reduce using rule 60 (declaration -> import_declaration .)
    RETURN          reduce using rule 60 (declaration -> import_declaration .)
    AND             reduce using rule 60 (declaration -> import_declaration .)
    VAR             reduce using rule 60 (declaration -> import_declaration .)
    FUNC            reduce using rule 60 (declaration -> import_declaration .)
    PREFIX          reduce using rule 60 (declaration -> import_declaration .)
    POSTFIX         reduce using rule 60 (declaration -> import_declaration .)
    INFIX           reduce using rule 60 (declaration -> import_declaration .)
    DIV             reduce using rule 60 (declaration -> import_declaration .)
    EQUAL           reduce using rule 60 (declaration -> import_declaration .)
    SUB             reduce using rule 60 (declaration -> import_declaration .)
    ADD             reduce using rule 60 (declaration -> import_declaration .)
    EXCLAMATION     reduce using rule 60 (declaration -> import_declaration .)
    MUL             reduce using rule 60 (declaration -> import_declaration .)
    MOD             reduce using rule 60 (declaration -> import_declaration .)
    OR              reduce using rule 60 (declaration -> import_declaration .)
    LT              reduce using rule 60 (declaration -> import_declaration .)
    GT              reduce using rule 60 (declaration -> import_declaration .)
    CARET           reduce using rule 60 (declaration -> import_declaration .)
    TILDE           reduce using rule 60 (declaration -> import_declaration .)
    CONDOP          reduce using rule 60 (declaration -> import_declaration .)
    ANDAND          reduce using rule 60 (declaration -> import_declaration .)
    OROR            reduce using rule 60 (declaration -> import_declaration .)
    NOT             reduce using rule 60 (declaration -> import_declaration .)
    DOT             reduce using rule 60 (declaration -> import_declaration .)
    EQUALEQUAL      reduce using rule 60 (declaration -> import_declaration .)
    NOTEQUAL        reduce using rule 60 (declaration -> import_declaration .)
    LTE             reduce using rule 60 (declaration -> import_declaration .)
    GTE             reduce using rule 60 (declaration -> import_declaration .)
    IDENTIFIER      reduce using rule 60 (declaration -> import_declaration .)
    LPAREN          reduce using rule 60 (declaration -> import_declaration .)
    STRING_LITERAL  reduce using rule 60 (declaration -> import_declaration .)
    CHAR_CONST      reduce using rule 60 (declaration -> import_declaration .)
    FLOAT_CONST     reduce using rule 60 (declaration -> import_declaration .)
    INT_CONST       reduce using rule 60 (declaration -> import_declaration .)
    NIL_LITERAL     reduce using rule 60 (declaration -> import_declaration .)
    LBRACK          reduce using rule 60 (declaration -> import_declaration .)
    $end            reduce using rule 60 (declaration -> import_declaration .)
    RCURLY          reduce using rule 60 (declaration -> import_declaration .)
    CASE            reduce using rule 60 (declaration -> import_declaration .)
    DEFAULT         reduce using rule 60 (declaration -> import_declaration .)


state 6

    (148) prefix_expression -> prefix_operator . postfix_expression
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    postfix_expression             shift and go to state 89
    array_literal                  shift and go to state 83
    literal                        shift and go to state 82
    primary_expression             shift and go to state 58
    declaration_identifier         shift and go to state 23
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53

state 7

    (252) literal -> FLOAT_CONST .

    DOT             reduce using rule 252 (literal -> FLOAT_CONST .)
    LPAREN          reduce using rule 252 (literal -> FLOAT_CONST .)
    LBRACK          reduce using rule 252 (literal -> FLOAT_CONST .)
    EQUAL           reduce using rule 252 (literal -> FLOAT_CONST .)
    EQUALEQUAL      reduce using rule 252 (literal -> FLOAT_CONST .)
    NOTEQUAL        reduce using rule 252 (literal -> FLOAT_CONST .)
    LTE             reduce using rule 252 (literal -> FLOAT_CONST .)
    GTE             reduce using rule 252 (literal -> FLOAT_CONST .)
    LT              reduce using rule 252 (literal -> FLOAT_CONST .)
    GT              reduce using rule 252 (literal -> FLOAT_CONST .)
    DIV             reduce using rule 252 (literal -> FLOAT_CONST .)
    SUB             reduce using rule 252 (literal -> FLOAT_CONST .)
    ADD             reduce using rule 252 (literal -> FLOAT_CONST .)
    EXCLAMATION     reduce using rule 252 (literal -> FLOAT_CONST .)
    MUL             reduce using rule 252 (literal -> FLOAT_CONST .)
    MOD             reduce using rule 252 (literal -> FLOAT_CONST .)
    AND             reduce using rule 252 (literal -> FLOAT_CONST .)
    OR              reduce using rule 252 (literal -> FLOAT_CONST .)
    CARET           reduce using rule 252 (literal -> FLOAT_CONST .)
    TILDE           reduce using rule 252 (literal -> FLOAT_CONST .)
    CONDOP          reduce using rule 252 (literal -> FLOAT_CONST .)
    ANDAND          reduce using rule 252 (literal -> FLOAT_CONST .)
    OROR            reduce using rule 252 (literal -> FLOAT_CONST .)
    NOT             reduce using rule 252 (literal -> FLOAT_CONST .)
    PRINT           reduce using rule 252 (literal -> FLOAT_CONST .)
    IMPORT          reduce using rule 252 (literal -> FLOAT_CONST .)
    LET             reduce using rule 252 (literal -> FLOAT_CONST .)
    STRUCT          reduce using rule 252 (literal -> FLOAT_CONST .)
    FOR             reduce using rule 252 (literal -> FLOAT_CONST .)
    WHILE           reduce using rule 252 (literal -> FLOAT_CONST .)
    REPEAT          reduce using rule 252 (literal -> FLOAT_CONST .)
    IF              reduce using rule 252 (literal -> FLOAT_CONST .)
    SWITCH          reduce using rule 252 (literal -> FLOAT_CONST .)
    BREAK           reduce using rule 252 (literal -> FLOAT_CONST .)
    CONTINUE        reduce using rule 252 (literal -> FLOAT_CONST .)
    RETURN          reduce using rule 252 (literal -> FLOAT_CONST .)
    VAR             reduce using rule 252 (literal -> FLOAT_CONST .)
    FUNC            reduce using rule 252 (literal -> FLOAT_CONST .)
    PREFIX          reduce using rule 252 (literal -> FLOAT_CONST .)
    POSTFIX         reduce using rule 252 (literal -> FLOAT_CONST .)
    INFIX           reduce using rule 252 (literal -> FLOAT_CONST .)
    IDENTIFIER      reduce using rule 252 (literal -> FLOAT_CONST .)
    STRING_LITERAL  reduce using rule 252 (literal -> FLOAT_CONST .)
    CHAR_CONST      reduce using rule 252 (literal -> FLOAT_CONST .)
    FLOAT_CONST     reduce using rule 252 (literal -> FLOAT_CONST .)
    INT_CONST       reduce using rule 252 (literal -> FLOAT_CONST .)
    NIL_LITERAL     reduce using rule 252 (literal -> FLOAT_CONST .)
    $end            reduce using rule 252 (literal -> FLOAT_CONST .)
    COMMA           reduce using rule 252 (literal -> FLOAT_CONST .)
    SEMICOLON       reduce using rule 252 (literal -> FLOAT_CONST .)
    RBRACK          reduce using rule 252 (literal -> FLOAT_CONST .)
    RCURLY          reduce using rule 252 (literal -> FLOAT_CONST .)
    RPAREN          reduce using rule 252 (literal -> FLOAT_CONST .)
    CASE            reduce using rule 252 (literal -> FLOAT_CONST .)
    DEFAULT         reduce using rule 252 (literal -> FLOAT_CONST .)
    LCURLY          reduce using rule 252 (literal -> FLOAT_CONST .)
    WHERE           reduce using rule 252 (literal -> FLOAT_CONST .)
    COLON           reduce using rule 252 (literal -> FLOAT_CONST .)


state 8

    (70) import_declaration -> IMPORT . import_kind import_path
    (71) import_declaration -> IMPORT . import_path
    (72) import_kind -> . TYPEALIAS
    (73) import_kind -> . STRUCT
    (74) import_kind -> . VAR
    (75) import_kind -> . FUNC
    (76) import_path -> . import_path_identifier dot_import_path_identifier
    (79) import_path_identifier -> . declaration_identifier
    (80) import_path_identifier -> . operator
    (220) declaration_identifier -> . IDENTIFIER
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT

    TYPEALIAS       shift and go to state 90
    STRUCT          shift and go to state 99
    VAR             shift and go to state 97
    FUNC            shift and go to state 96
    IDENTIFIER      shift and go to state 63
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74

    import_kind                    shift and go to state 92
    operator                       shift and go to state 91
    import_path_identifier         shift and go to state 93
    conditional_operator           shift and go to state 79
    import_path                    shift and go to state 94
    declaration_identifier         shift and go to state 95

state 9

    (16) loop_statement -> for_statement .

    PRINT           reduce using rule 16 (loop_statement -> for_statement .)
    IMPORT          reduce using rule 16 (loop_statement -> for_statement .)
    LET             reduce using rule 16 (loop_statement -> for_statement .)
    STRUCT          reduce using rule 16 (loop_statement -> for_statement .)
    FOR             reduce using rule 16 (loop_statement -> for_statement .)
    WHILE           reduce using rule 16 (loop_statement -> for_statement .)
    REPEAT          reduce using rule 16 (loop_statement -> for_statement .)
    IF              reduce using rule 16 (loop_statement -> for_statement .)
    SWITCH          reduce using rule 16 (loop_statement -> for_statement .)
    BREAK           reduce using rule 16 (loop_statement -> for_statement .)
    CONTINUE        reduce using rule 16 (loop_statement -> for_statement .)
    RETURN          reduce using rule 16 (loop_statement -> for_statement .)
    AND             reduce using rule 16 (loop_statement -> for_statement .)
    VAR             reduce using rule 16 (loop_statement -> for_statement .)
    FUNC            reduce using rule 16 (loop_statement -> for_statement .)
    PREFIX          reduce using rule 16 (loop_statement -> for_statement .)
    POSTFIX         reduce using rule 16 (loop_statement -> for_statement .)
    INFIX           reduce using rule 16 (loop_statement -> for_statement .)
    DIV             reduce using rule 16 (loop_statement -> for_statement .)
    EQUAL           reduce using rule 16 (loop_statement -> for_statement .)
    SUB             reduce using rule 16 (loop_statement -> for_statement .)
    ADD             reduce using rule 16 (loop_statement -> for_statement .)
    EXCLAMATION     reduce using rule 16 (loop_statement -> for_statement .)
    MUL             reduce using rule 16 (loop_statement -> for_statement .)
    MOD             reduce using rule 16 (loop_statement -> for_statement .)
    OR              reduce using rule 16 (loop_statement -> for_statement .)
    LT              reduce using rule 16 (loop_statement -> for_statement .)
    GT              reduce using rule 16 (loop_statement -> for_statement .)
    CARET           reduce using rule 16 (loop_statement -> for_statement .)
    TILDE           reduce using rule 16 (loop_statement -> for_statement .)
    CONDOP          reduce using rule 16 (loop_statement -> for_statement .)
    ANDAND          reduce using rule 16 (loop_statement -> for_statement .)
    OROR            reduce using rule 16 (loop_statement -> for_statement .)
    NOT             reduce using rule 16 (loop_statement -> for_statement .)
    DOT             reduce using rule 16 (loop_statement -> for_statement .)
    EQUALEQUAL      reduce using rule 16 (loop_statement -> for_statement .)
    NOTEQUAL        reduce using rule 16 (loop_statement -> for_statement .)
    LTE             reduce using rule 16 (loop_statement -> for_statement .)
    GTE             reduce using rule 16 (loop_statement -> for_statement .)
    IDENTIFIER      reduce using rule 16 (loop_statement -> for_statement .)
    LPAREN          reduce using rule 16 (loop_statement -> for_statement .)
    STRING_LITERAL  reduce using rule 16 (loop_statement -> for_statement .)
    CHAR_CONST      reduce using rule 16 (loop_statement -> for_statement .)
    FLOAT_CONST     reduce using rule 16 (loop_statement -> for_statement .)
    INT_CONST       reduce using rule 16 (loop_statement -> for_statement .)
    NIL_LITERAL     reduce using rule 16 (loop_statement -> for_statement .)
    LBRACK          reduce using rule 16 (loop_statement -> for_statement .)
    $end            reduce using rule 16 (loop_statement -> for_statement .)
    RCURLY          reduce using rule 16 (loop_statement -> for_statement .)
    CASE            reduce using rule 16 (loop_statement -> for_statement .)
    DEFAULT         reduce using rule 16 (loop_statement -> for_statement .)


state 10

    (235) operator -> GT .
    (249) conditional_operator -> GT .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for NIL_LITERAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LBRACK resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for COMMA resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for DOT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for PRINT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for IMPORT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LET resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for STRUCT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for FOR resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for WHILE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for IF resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for BREAK resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for RETURN resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for AND resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for VAR resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for FUNC resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for PREFIX resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for POSTFIX resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for INFIX resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for DIV resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for EQUAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for SUB resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for ADD resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for MUL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for MOD resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for OR resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for GT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for CARET resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for TILDE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for CONDOP resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for ANDAND resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for OROR resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for NOT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LTE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for GTE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for $end resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for RCURLY resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for CASE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 235 (operator -> GT .)
    DOT             reduce using rule 235 (operator -> GT .)
    PRINT           reduce using rule 235 (operator -> GT .)
    IMPORT          reduce using rule 235 (operator -> GT .)
    LET             reduce using rule 235 (operator -> GT .)
    STRUCT          reduce using rule 235 (operator -> GT .)
    FOR             reduce using rule 235 (operator -> GT .)
    WHILE           reduce using rule 235 (operator -> GT .)
    REPEAT          reduce using rule 235 (operator -> GT .)
    IF              reduce using rule 235 (operator -> GT .)
    SWITCH          reduce using rule 235 (operator -> GT .)
    BREAK           reduce using rule 235 (operator -> GT .)
    CONTINUE        reduce using rule 235 (operator -> GT .)
    RETURN          reduce using rule 235 (operator -> GT .)
    AND             reduce using rule 235 (operator -> GT .)
    VAR             reduce using rule 235 (operator -> GT .)
    FUNC            reduce using rule 235 (operator -> GT .)
    PREFIX          reduce using rule 235 (operator -> GT .)
    POSTFIX         reduce using rule 235 (operator -> GT .)
    INFIX           reduce using rule 235 (operator -> GT .)
    DIV             reduce using rule 235 (operator -> GT .)
    EQUAL           reduce using rule 235 (operator -> GT .)
    SUB             reduce using rule 235 (operator -> GT .)
    ADD             reduce using rule 235 (operator -> GT .)
    EXCLAMATION     reduce using rule 235 (operator -> GT .)
    MUL             reduce using rule 235 (operator -> GT .)
    MOD             reduce using rule 235 (operator -> GT .)
    OR              reduce using rule 235 (operator -> GT .)
    LT              reduce using rule 235 (operator -> GT .)
    GT              reduce using rule 235 (operator -> GT .)
    CARET           reduce using rule 235 (operator -> GT .)
    TILDE           reduce using rule 235 (operator -> GT .)
    CONDOP          reduce using rule 235 (operator -> GT .)
    ANDAND          reduce using rule 235 (operator -> GT .)
    OROR            reduce using rule 235 (operator -> GT .)
    NOT             reduce using rule 235 (operator -> GT .)
    EQUALEQUAL      reduce using rule 235 (operator -> GT .)
    NOTEQUAL        reduce using rule 235 (operator -> GT .)
    LTE             reduce using rule 235 (operator -> GT .)
    GTE             reduce using rule 235 (operator -> GT .)
    IDENTIFIER      reduce using rule 235 (operator -> GT .)
    LPAREN          reduce using rule 235 (operator -> GT .)
    STRING_LITERAL  reduce using rule 235 (operator -> GT .)
    CHAR_CONST      reduce using rule 235 (operator -> GT .)
    FLOAT_CONST     reduce using rule 235 (operator -> GT .)
    INT_CONST       reduce using rule 235 (operator -> GT .)
    NIL_LITERAL     reduce using rule 235 (operator -> GT .)
    LBRACK          reduce using rule 235 (operator -> GT .)
    $end            reduce using rule 235 (operator -> GT .)
    RCURLY          reduce using rule 235 (operator -> GT .)
    CASE            reduce using rule 235 (operator -> GT .)
    DEFAULT         reduce using rule 235 (operator -> GT .)
    COMMA           reduce using rule 235 (operator -> GT .)
    RPAREN          reduce using rule 235 (operator -> GT .)

  ! IDENTIFIER      [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LPAREN          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! STRING_LITERAL  [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! CHAR_CONST      [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! FLOAT_CONST     [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! INT_CONST       [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! NIL_LITERAL     [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LBRACK          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! COMMA           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! RPAREN          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! DOT             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! PRINT           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! IMPORT          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LET             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! STRUCT          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! FOR             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! WHILE           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! REPEAT          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! IF              [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! SWITCH          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! BREAK           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! CONTINUE        [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! RETURN          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! AND             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! VAR             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! FUNC            [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! PREFIX          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! POSTFIX         [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! INFIX           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! DIV             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! EQUAL           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! SUB             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! ADD             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! EXCLAMATION     [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! MUL             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! MOD             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! OR              [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LT              [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! GT              [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! CARET           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! TILDE           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! CONDOP          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! ANDAND          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! OROR            [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! NOT             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! EQUALEQUAL      [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! NOTEQUAL        [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LTE             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! GTE             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! $end            [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! RCURLY          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! CASE            [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! DEFAULT         [ reduce using rule 249 (conditional_operator -> GT .) ]


state 11

    (64) declaration -> struct_declaration .

    PRINT           reduce using rule 64 (declaration -> struct_declaration .)
    IMPORT          reduce using rule 64 (declaration -> struct_declaration .)
    LET             reduce using rule 64 (declaration -> struct_declaration .)
    STRUCT          reduce using rule 64 (declaration -> struct_declaration .)
    FOR             reduce using rule 64 (declaration -> struct_declaration .)
    WHILE           reduce using rule 64 (declaration -> struct_declaration .)
    REPEAT          reduce using rule 64 (declaration -> struct_declaration .)
    IF              reduce using rule 64 (declaration -> struct_declaration .)
    SWITCH          reduce using rule 64 (declaration -> struct_declaration .)
    BREAK           reduce using rule 64 (declaration -> struct_declaration .)
    CONTINUE        reduce using rule 64 (declaration -> struct_declaration .)
    RETURN          reduce using rule 64 (declaration -> struct_declaration .)
    AND             reduce using rule 64 (declaration -> struct_declaration .)
    VAR             reduce using rule 64 (declaration -> struct_declaration .)
    FUNC            reduce using rule 64 (declaration -> struct_declaration .)
    PREFIX          reduce using rule 64 (declaration -> struct_declaration .)
    POSTFIX         reduce using rule 64 (declaration -> struct_declaration .)
    INFIX           reduce using rule 64 (declaration -> struct_declaration .)
    DIV             reduce using rule 64 (declaration -> struct_declaration .)
    EQUAL           reduce using rule 64 (declaration -> struct_declaration .)
    SUB             reduce using rule 64 (declaration -> struct_declaration .)
    ADD             reduce using rule 64 (declaration -> struct_declaration .)
    EXCLAMATION     reduce using rule 64 (declaration -> struct_declaration .)
    MUL             reduce using rule 64 (declaration -> struct_declaration .)
    MOD             reduce using rule 64 (declaration -> struct_declaration .)
    OR              reduce using rule 64 (declaration -> struct_declaration .)
    LT              reduce using rule 64 (declaration -> struct_declaration .)
    GT              reduce using rule 64 (declaration -> struct_declaration .)
    CARET           reduce using rule 64 (declaration -> struct_declaration .)
    TILDE           reduce using rule 64 (declaration -> struct_declaration .)
    CONDOP          reduce using rule 64 (declaration -> struct_declaration .)
    ANDAND          reduce using rule 64 (declaration -> struct_declaration .)
    OROR            reduce using rule 64 (declaration -> struct_declaration .)
    NOT             reduce using rule 64 (declaration -> struct_declaration .)
    DOT             reduce using rule 64 (declaration -> struct_declaration .)
    EQUALEQUAL      reduce using rule 64 (declaration -> struct_declaration .)
    NOTEQUAL        reduce using rule 64 (declaration -> struct_declaration .)
    LTE             reduce using rule 64 (declaration -> struct_declaration .)
    GTE             reduce using rule 64 (declaration -> struct_declaration .)
    IDENTIFIER      reduce using rule 64 (declaration -> struct_declaration .)
    LPAREN          reduce using rule 64 (declaration -> struct_declaration .)
    STRING_LITERAL  reduce using rule 64 (declaration -> struct_declaration .)
    CHAR_CONST      reduce using rule 64 (declaration -> struct_declaration .)
    FLOAT_CONST     reduce using rule 64 (declaration -> struct_declaration .)
    INT_CONST       reduce using rule 64 (declaration -> struct_declaration .)
    NIL_LITERAL     reduce using rule 64 (declaration -> struct_declaration .)
    LBRACK          reduce using rule 64 (declaration -> struct_declaration .)
    $end            reduce using rule 64 (declaration -> struct_declaration .)
    RCURLY          reduce using rule 64 (declaration -> struct_declaration .)
    CASE            reduce using rule 64 (declaration -> struct_declaration .)
    DEFAULT         reduce using rule 64 (declaration -> struct_declaration .)


state 12

    (91) variable_declaration_head -> VAR .

    IDENTIFIER      reduce using rule 91 (variable_declaration_head -> VAR .)
    VAR             reduce using rule 91 (variable_declaration_head -> VAR .)
    LET             reduce using rule 91 (variable_declaration_head -> VAR .)
    AND             reduce using rule 91 (variable_declaration_head -> VAR .)
    DIV             reduce using rule 91 (variable_declaration_head -> VAR .)
    EQUAL           reduce using rule 91 (variable_declaration_head -> VAR .)
    SUB             reduce using rule 91 (variable_declaration_head -> VAR .)
    ADD             reduce using rule 91 (variable_declaration_head -> VAR .)
    EXCLAMATION     reduce using rule 91 (variable_declaration_head -> VAR .)
    MUL             reduce using rule 91 (variable_declaration_head -> VAR .)
    MOD             reduce using rule 91 (variable_declaration_head -> VAR .)
    OR              reduce using rule 91 (variable_declaration_head -> VAR .)
    LT              reduce using rule 91 (variable_declaration_head -> VAR .)
    GT              reduce using rule 91 (variable_declaration_head -> VAR .)
    CARET           reduce using rule 91 (variable_declaration_head -> VAR .)
    TILDE           reduce using rule 91 (variable_declaration_head -> VAR .)
    CONDOP          reduce using rule 91 (variable_declaration_head -> VAR .)
    ANDAND          reduce using rule 91 (variable_declaration_head -> VAR .)
    OROR            reduce using rule 91 (variable_declaration_head -> VAR .)
    NOT             reduce using rule 91 (variable_declaration_head -> VAR .)
    DOT             reduce using rule 91 (variable_declaration_head -> VAR .)
    EQUALEQUAL      reduce using rule 91 (variable_declaration_head -> VAR .)
    NOTEQUAL        reduce using rule 91 (variable_declaration_head -> VAR .)
    LTE             reduce using rule 91 (variable_declaration_head -> VAR .)
    GTE             reduce using rule 91 (variable_declaration_head -> VAR .)
    LPAREN          reduce using rule 91 (variable_declaration_head -> VAR .)
    STRING_LITERAL  reduce using rule 91 (variable_declaration_head -> VAR .)
    CHAR_CONST      reduce using rule 91 (variable_declaration_head -> VAR .)
    FLOAT_CONST     reduce using rule 91 (variable_declaration_head -> VAR .)
    INT_CONST       reduce using rule 91 (variable_declaration_head -> VAR .)
    NIL_LITERAL     reduce using rule 91 (variable_declaration_head -> VAR .)
    LBRACK          reduce using rule 91 (variable_declaration_head -> VAR .)


state 13

    (128) operator_declaration -> infix_operator_declaration .

    IMPORT          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    LET             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    STRUCT          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    VAR             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    FUNC            reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    PREFIX          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    POSTFIX         reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    INFIX           reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    RCURLY          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    PRINT           reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    FOR             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    WHILE           reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    REPEAT          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    IF              reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    SWITCH          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    BREAK           reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    CONTINUE        reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    RETURN          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    AND             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    DIV             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    EQUAL           reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    SUB             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    ADD             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    EXCLAMATION     reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    MUL             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    MOD             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    OR              reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    LT              reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    GT              reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    CARET           reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    TILDE           reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    CONDOP          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    ANDAND          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    OROR            reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    NOT             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    DOT             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    EQUALEQUAL      reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    NOTEQUAL        reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    LTE             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    GTE             reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    IDENTIFIER      reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    LPAREN          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    STRING_LITERAL  reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    CHAR_CONST      reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    FLOAT_CONST     reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    INT_CONST       reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    NIL_LITERAL     reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    LBRACK          reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    CASE            reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    DEFAULT         reduce using rule 128 (operator_declaration -> infix_operator_declaration .)
    $end            reduce using rule 128 (operator_declaration -> infix_operator_declaration .)


state 14

    (233) operator -> OR .

    AND             reduce using rule 233 (operator -> OR .)
    DIV             reduce using rule 233 (operator -> OR .)
    EQUAL           reduce using rule 233 (operator -> OR .)
    SUB             reduce using rule 233 (operator -> OR .)
    ADD             reduce using rule 233 (operator -> OR .)
    EXCLAMATION     reduce using rule 233 (operator -> OR .)
    MUL             reduce using rule 233 (operator -> OR .)
    MOD             reduce using rule 233 (operator -> OR .)
    OR              reduce using rule 233 (operator -> OR .)
    LT              reduce using rule 233 (operator -> OR .)
    GT              reduce using rule 233 (operator -> OR .)
    CARET           reduce using rule 233 (operator -> OR .)
    TILDE           reduce using rule 233 (operator -> OR .)
    CONDOP          reduce using rule 233 (operator -> OR .)
    ANDAND          reduce using rule 233 (operator -> OR .)
    OROR            reduce using rule 233 (operator -> OR .)
    NOT             reduce using rule 233 (operator -> OR .)
    DOT             reduce using rule 233 (operator -> OR .)
    EQUALEQUAL      reduce using rule 233 (operator -> OR .)
    NOTEQUAL        reduce using rule 233 (operator -> OR .)
    LTE             reduce using rule 233 (operator -> OR .)
    GTE             reduce using rule 233 (operator -> OR .)
    IDENTIFIER      reduce using rule 233 (operator -> OR .)
    LPAREN          reduce using rule 233 (operator -> OR .)
    STRING_LITERAL  reduce using rule 233 (operator -> OR .)
    CHAR_CONST      reduce using rule 233 (operator -> OR .)
    FLOAT_CONST     reduce using rule 233 (operator -> OR .)
    INT_CONST       reduce using rule 233 (operator -> OR .)
    NIL_LITERAL     reduce using rule 233 (operator -> OR .)
    LBRACK          reduce using rule 233 (operator -> OR .)
    PRINT           reduce using rule 233 (operator -> OR .)
    IMPORT          reduce using rule 233 (operator -> OR .)
    LET             reduce using rule 233 (operator -> OR .)
    STRUCT          reduce using rule 233 (operator -> OR .)
    FOR             reduce using rule 233 (operator -> OR .)
    WHILE           reduce using rule 233 (operator -> OR .)
    REPEAT          reduce using rule 233 (operator -> OR .)
    IF              reduce using rule 233 (operator -> OR .)
    SWITCH          reduce using rule 233 (operator -> OR .)
    BREAK           reduce using rule 233 (operator -> OR .)
    CONTINUE        reduce using rule 233 (operator -> OR .)
    RETURN          reduce using rule 233 (operator -> OR .)
    VAR             reduce using rule 233 (operator -> OR .)
    FUNC            reduce using rule 233 (operator -> OR .)
    PREFIX          reduce using rule 233 (operator -> OR .)
    POSTFIX         reduce using rule 233 (operator -> OR .)
    INFIX           reduce using rule 233 (operator -> OR .)
    $end            reduce using rule 233 (operator -> OR .)
    RCURLY          reduce using rule 233 (operator -> OR .)
    CASE            reduce using rule 233 (operator -> OR .)
    DEFAULT         reduce using rule 233 (operator -> OR .)
    COMMA           reduce using rule 233 (operator -> OR .)
    RPAREN          reduce using rule 233 (operator -> OR .)


state 15

    (236) operator -> CARET .

    AND             reduce using rule 236 (operator -> CARET .)
    DIV             reduce using rule 236 (operator -> CARET .)
    EQUAL           reduce using rule 236 (operator -> CARET .)
    SUB             reduce using rule 236 (operator -> CARET .)
    ADD             reduce using rule 236 (operator -> CARET .)
    EXCLAMATION     reduce using rule 236 (operator -> CARET .)
    MUL             reduce using rule 236 (operator -> CARET .)
    MOD             reduce using rule 236 (operator -> CARET .)
    OR              reduce using rule 236 (operator -> CARET .)
    LT              reduce using rule 236 (operator -> CARET .)
    GT              reduce using rule 236 (operator -> CARET .)
    CARET           reduce using rule 236 (operator -> CARET .)
    TILDE           reduce using rule 236 (operator -> CARET .)
    CONDOP          reduce using rule 236 (operator -> CARET .)
    ANDAND          reduce using rule 236 (operator -> CARET .)
    OROR            reduce using rule 236 (operator -> CARET .)
    NOT             reduce using rule 236 (operator -> CARET .)
    DOT             reduce using rule 236 (operator -> CARET .)
    EQUALEQUAL      reduce using rule 236 (operator -> CARET .)
    NOTEQUAL        reduce using rule 236 (operator -> CARET .)
    LTE             reduce using rule 236 (operator -> CARET .)
    GTE             reduce using rule 236 (operator -> CARET .)
    IDENTIFIER      reduce using rule 236 (operator -> CARET .)
    LPAREN          reduce using rule 236 (operator -> CARET .)
    STRING_LITERAL  reduce using rule 236 (operator -> CARET .)
    CHAR_CONST      reduce using rule 236 (operator -> CARET .)
    FLOAT_CONST     reduce using rule 236 (operator -> CARET .)
    INT_CONST       reduce using rule 236 (operator -> CARET .)
    NIL_LITERAL     reduce using rule 236 (operator -> CARET .)
    LBRACK          reduce using rule 236 (operator -> CARET .)
    PRINT           reduce using rule 236 (operator -> CARET .)
    IMPORT          reduce using rule 236 (operator -> CARET .)
    LET             reduce using rule 236 (operator -> CARET .)
    STRUCT          reduce using rule 236 (operator -> CARET .)
    FOR             reduce using rule 236 (operator -> CARET .)
    WHILE           reduce using rule 236 (operator -> CARET .)
    REPEAT          reduce using rule 236 (operator -> CARET .)
    IF              reduce using rule 236 (operator -> CARET .)
    SWITCH          reduce using rule 236 (operator -> CARET .)
    BREAK           reduce using rule 236 (operator -> CARET .)
    CONTINUE        reduce using rule 236 (operator -> CARET .)
    RETURN          reduce using rule 236 (operator -> CARET .)
    VAR             reduce using rule 236 (operator -> CARET .)
    FUNC            reduce using rule 236 (operator -> CARET .)
    PREFIX          reduce using rule 236 (operator -> CARET .)
    POSTFIX         reduce using rule 236 (operator -> CARET .)
    INFIX           reduce using rule 236 (operator -> CARET .)
    $end            reduce using rule 236 (operator -> CARET .)
    RCURLY          reduce using rule 236 (operator -> CARET .)
    CASE            reduce using rule 236 (operator -> CARET .)
    DEFAULT         reduce using rule 236 (operator -> CARET .)
    COMMA           reduce using rule 236 (operator -> CARET .)
    RPAREN          reduce using rule 236 (operator -> CARET .)


state 16

    (58) return_statement -> RETURN . expression
    (59) return_statement -> RETURN .
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
  ! shift/reduce conflict for CONDOP resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for NIL_LITERAL resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    PRINT           reduce using rule 59 (return_statement -> RETURN .)
    IMPORT          reduce using rule 59 (return_statement -> RETURN .)
    LET             reduce using rule 59 (return_statement -> RETURN .)
    STRUCT          reduce using rule 59 (return_statement -> RETURN .)
    FOR             reduce using rule 59 (return_statement -> RETURN .)
    WHILE           reduce using rule 59 (return_statement -> RETURN .)
    REPEAT          reduce using rule 59 (return_statement -> RETURN .)
    IF              reduce using rule 59 (return_statement -> RETURN .)
    SWITCH          reduce using rule 59 (return_statement -> RETURN .)
    BREAK           reduce using rule 59 (return_statement -> RETURN .)
    CONTINUE        reduce using rule 59 (return_statement -> RETURN .)
    RETURN          reduce using rule 59 (return_statement -> RETURN .)
    VAR             reduce using rule 59 (return_statement -> RETURN .)
    FUNC            reduce using rule 59 (return_statement -> RETURN .)
    PREFIX          reduce using rule 59 (return_statement -> RETURN .)
    POSTFIX         reduce using rule 59 (return_statement -> RETURN .)
    INFIX           reduce using rule 59 (return_statement -> RETURN .)
    CASE            reduce using rule 59 (return_statement -> RETURN .)
    DEFAULT         reduce using rule 59 (return_statement -> RETURN .)
    RCURLY          reduce using rule 59 (return_statement -> RETURN .)
    $end            reduce using rule 59 (return_statement -> RETURN .)
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

  ! AND             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! DIV             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! EQUAL           [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! SUB             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! ADD             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! EXCLAMATION     [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! MUL             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! MOD             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! OR              [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! LT              [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! GT              [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! CARET           [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! TILDE           [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! CONDOP          [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! ANDAND          [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! OROR            [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! NOT             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! DOT             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! EQUALEQUAL      [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! NOTEQUAL        [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! LTE             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! GTE             [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! IDENTIFIER      [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! LPAREN          [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! STRING_LITERAL  [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! CHAR_CONST      [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! FLOAT_CONST     [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! INT_CONST       [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! NIL_LITERAL     [ reduce using rule 59 (return_statement -> RETURN .) ]
  ! LBRACK          [ reduce using rule 59 (return_statement -> RETURN .) ]

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 100
    parenthesized_expression       shift and go to state 53

state 17

    (53) control_transfer_statement -> break_statement .

    PRINT           reduce using rule 53 (control_transfer_statement -> break_statement .)
    IMPORT          reduce using rule 53 (control_transfer_statement -> break_statement .)
    LET             reduce using rule 53 (control_transfer_statement -> break_statement .)
    STRUCT          reduce using rule 53 (control_transfer_statement -> break_statement .)
    FOR             reduce using rule 53 (control_transfer_statement -> break_statement .)
    WHILE           reduce using rule 53 (control_transfer_statement -> break_statement .)
    REPEAT          reduce using rule 53 (control_transfer_statement -> break_statement .)
    IF              reduce using rule 53 (control_transfer_statement -> break_statement .)
    SWITCH          reduce using rule 53 (control_transfer_statement -> break_statement .)
    BREAK           reduce using rule 53 (control_transfer_statement -> break_statement .)
    CONTINUE        reduce using rule 53 (control_transfer_statement -> break_statement .)
    RETURN          reduce using rule 53 (control_transfer_statement -> break_statement .)
    AND             reduce using rule 53 (control_transfer_statement -> break_statement .)
    VAR             reduce using rule 53 (control_transfer_statement -> break_statement .)
    FUNC            reduce using rule 53 (control_transfer_statement -> break_statement .)
    PREFIX          reduce using rule 53 (control_transfer_statement -> break_statement .)
    POSTFIX         reduce using rule 53 (control_transfer_statement -> break_statement .)
    INFIX           reduce using rule 53 (control_transfer_statement -> break_statement .)
    DIV             reduce using rule 53 (control_transfer_statement -> break_statement .)
    EQUAL           reduce using rule 53 (control_transfer_statement -> break_statement .)
    SUB             reduce using rule 53 (control_transfer_statement -> break_statement .)
    ADD             reduce using rule 53 (control_transfer_statement -> break_statement .)
    EXCLAMATION     reduce using rule 53 (control_transfer_statement -> break_statement .)
    MUL             reduce using rule 53 (control_transfer_statement -> break_statement .)
    MOD             reduce using rule 53 (control_transfer_statement -> break_statement .)
    OR              reduce using rule 53 (control_transfer_statement -> break_statement .)
    LT              reduce using rule 53 (control_transfer_statement -> break_statement .)
    GT              reduce using rule 53 (control_transfer_statement -> break_statement .)
    CARET           reduce using rule 53 (control_transfer_statement -> break_statement .)
    TILDE           reduce using rule 53 (control_transfer_statement -> break_statement .)
    CONDOP          reduce using rule 53 (control_transfer_statement -> break_statement .)
    ANDAND          reduce using rule 53 (control_transfer_statement -> break_statement .)
    OROR            reduce using rule 53 (control_transfer_statement -> break_statement .)
    NOT             reduce using rule 53 (control_transfer_statement -> break_statement .)
    DOT             reduce using rule 53 (control_transfer_statement -> break_statement .)
    EQUALEQUAL      reduce using rule 53 (control_transfer_statement -> break_statement .)
    NOTEQUAL        reduce using rule 53 (control_transfer_statement -> break_statement .)
    LTE             reduce using rule 53 (control_transfer_statement -> break_statement .)
    GTE             reduce using rule 53 (control_transfer_statement -> break_statement .)
    IDENTIFIER      reduce using rule 53 (control_transfer_statement -> break_statement .)
    LPAREN          reduce using rule 53 (control_transfer_statement -> break_statement .)
    STRING_LITERAL  reduce using rule 53 (control_transfer_statement -> break_statement .)
    CHAR_CONST      reduce using rule 53 (control_transfer_statement -> break_statement .)
    FLOAT_CONST     reduce using rule 53 (control_transfer_statement -> break_statement .)
    INT_CONST       reduce using rule 53 (control_transfer_statement -> break_statement .)
    NIL_LITERAL     reduce using rule 53 (control_transfer_statement -> break_statement .)
    LBRACK          reduce using rule 53 (control_transfer_statement -> break_statement .)
    CASE            reduce using rule 53 (control_transfer_statement -> break_statement .)
    DEFAULT         reduce using rule 53 (control_transfer_statement -> break_statement .)
    RCURLY          reduce using rule 53 (control_transfer_statement -> break_statement .)
    $end            reduce using rule 53 (control_transfer_statement -> break_statement .)


state 18

    (222) prefix_operator -> operator .

    IDENTIFIER      reduce using rule 222 (prefix_operator -> operator .)
    LPAREN          reduce using rule 222 (prefix_operator -> operator .)
    STRING_LITERAL  reduce using rule 222 (prefix_operator -> operator .)
    CHAR_CONST      reduce using rule 222 (prefix_operator -> operator .)
    FLOAT_CONST     reduce using rule 222 (prefix_operator -> operator .)
    INT_CONST       reduce using rule 222 (prefix_operator -> operator .)
    NIL_LITERAL     reduce using rule 222 (prefix_operator -> operator .)
    LBRACK          reduce using rule 222 (prefix_operator -> operator .)


state 19

    (88) variable_declaration -> variable_declaration_head . variable_name type_annotation code_block
    (89) variable_declaration -> variable_declaration_head . variable_name type_annotation initializer
    (90) variable_declaration -> variable_declaration_head . pattern_initializer_list
    (92) variable_name -> . declaration_identifier
    (82) pattern_initializer_list -> . pattern_initializer p_com_pat_init_star
    (220) declaration_identifier -> . IDENTIFIER
    (85) pattern_initializer -> . pattern initializer
    (86) pattern_initializer -> . pattern
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    IDENTIFIER      shift and go to state 63
    VAR             shift and go to state 108
    LET             shift and go to state 110
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern_initializer            shift and go to state 106
    pattern                        shift and go to state 101
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    pattern_initializer_list       shift and go to state 103
    variable_name                  shift and go to state 104
    declaration_identifier         shift and go to state 105
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 20

    (10) print_statement -> PRINT . LPAREN print_arg_list RPAREN

    LPAREN          shift and go to state 112


state 21

    (34) branch_statement -> switch_statement .

    PRINT           reduce using rule 34 (branch_statement -> switch_statement .)
    IMPORT          reduce using rule 34 (branch_statement -> switch_statement .)
    LET             reduce using rule 34 (branch_statement -> switch_statement .)
    STRUCT          reduce using rule 34 (branch_statement -> switch_statement .)
    FOR             reduce using rule 34 (branch_statement -> switch_statement .)
    WHILE           reduce using rule 34 (branch_statement -> switch_statement .)
    REPEAT          reduce using rule 34 (branch_statement -> switch_statement .)
    IF              reduce using rule 34 (branch_statement -> switch_statement .)
    SWITCH          reduce using rule 34 (branch_statement -> switch_statement .)
    BREAK           reduce using rule 34 (branch_statement -> switch_statement .)
    CONTINUE        reduce using rule 34 (branch_statement -> switch_statement .)
    RETURN          reduce using rule 34 (branch_statement -> switch_statement .)
    AND             reduce using rule 34 (branch_statement -> switch_statement .)
    VAR             reduce using rule 34 (branch_statement -> switch_statement .)
    FUNC            reduce using rule 34 (branch_statement -> switch_statement .)
    PREFIX          reduce using rule 34 (branch_statement -> switch_statement .)
    POSTFIX         reduce using rule 34 (branch_statement -> switch_statement .)
    INFIX           reduce using rule 34 (branch_statement -> switch_statement .)
    DIV             reduce using rule 34 (branch_statement -> switch_statement .)
    EQUAL           reduce using rule 34 (branch_statement -> switch_statement .)
    SUB             reduce using rule 34 (branch_statement -> switch_statement .)
    ADD             reduce using rule 34 (branch_statement -> switch_statement .)
    EXCLAMATION     reduce using rule 34 (branch_statement -> switch_statement .)
    MUL             reduce using rule 34 (branch_statement -> switch_statement .)
    MOD             reduce using rule 34 (branch_statement -> switch_statement .)
    OR              reduce using rule 34 (branch_statement -> switch_statement .)
    LT              reduce using rule 34 (branch_statement -> switch_statement .)
    GT              reduce using rule 34 (branch_statement -> switch_statement .)
    CARET           reduce using rule 34 (branch_statement -> switch_statement .)
    TILDE           reduce using rule 34 (branch_statement -> switch_statement .)
    CONDOP          reduce using rule 34 (branch_statement -> switch_statement .)
    ANDAND          reduce using rule 34 (branch_statement -> switch_statement .)
    OROR            reduce using rule 34 (branch_statement -> switch_statement .)
    NOT             reduce using rule 34 (branch_statement -> switch_statement .)
    DOT             reduce using rule 34 (branch_statement -> switch_statement .)
    EQUALEQUAL      reduce using rule 34 (branch_statement -> switch_statement .)
    NOTEQUAL        reduce using rule 34 (branch_statement -> switch_statement .)
    LTE             reduce using rule 34 (branch_statement -> switch_statement .)
    GTE             reduce using rule 34 (branch_statement -> switch_statement .)
    IDENTIFIER      reduce using rule 34 (branch_statement -> switch_statement .)
    LPAREN          reduce using rule 34 (branch_statement -> switch_statement .)
    STRING_LITERAL  reduce using rule 34 (branch_statement -> switch_statement .)
    CHAR_CONST      reduce using rule 34 (branch_statement -> switch_statement .)
    FLOAT_CONST     reduce using rule 34 (branch_statement -> switch_statement .)
    INT_CONST       reduce using rule 34 (branch_statement -> switch_statement .)
    NIL_LITERAL     reduce using rule 34 (branch_statement -> switch_statement .)
    LBRACK          reduce using rule 34 (branch_statement -> switch_statement .)
    RCURLY          reduce using rule 34 (branch_statement -> switch_statement .)
    CASE            reduce using rule 34 (branch_statement -> switch_statement .)
    DEFAULT         reduce using rule 34 (branch_statement -> switch_statement .)
    $end            reduce using rule 34 (branch_statement -> switch_statement .)


state 22

    (54) control_transfer_statement -> continue_statement .

    PRINT           reduce using rule 54 (control_transfer_statement -> continue_statement .)
    IMPORT          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    LET             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    STRUCT          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    FOR             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    WHILE           reduce using rule 54 (control_transfer_statement -> continue_statement .)
    REPEAT          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    IF              reduce using rule 54 (control_transfer_statement -> continue_statement .)
    SWITCH          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    BREAK           reduce using rule 54 (control_transfer_statement -> continue_statement .)
    CONTINUE        reduce using rule 54 (control_transfer_statement -> continue_statement .)
    RETURN          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    AND             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    VAR             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    FUNC            reduce using rule 54 (control_transfer_statement -> continue_statement .)
    PREFIX          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    POSTFIX         reduce using rule 54 (control_transfer_statement -> continue_statement .)
    INFIX           reduce using rule 54 (control_transfer_statement -> continue_statement .)
    DIV             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    EQUAL           reduce using rule 54 (control_transfer_statement -> continue_statement .)
    SUB             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    ADD             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    EXCLAMATION     reduce using rule 54 (control_transfer_statement -> continue_statement .)
    MUL             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    MOD             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    OR              reduce using rule 54 (control_transfer_statement -> continue_statement .)
    LT              reduce using rule 54 (control_transfer_statement -> continue_statement .)
    GT              reduce using rule 54 (control_transfer_statement -> continue_statement .)
    CARET           reduce using rule 54 (control_transfer_statement -> continue_statement .)
    TILDE           reduce using rule 54 (control_transfer_statement -> continue_statement .)
    CONDOP          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    ANDAND          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    OROR            reduce using rule 54 (control_transfer_statement -> continue_statement .)
    NOT             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    DOT             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    EQUALEQUAL      reduce using rule 54 (control_transfer_statement -> continue_statement .)
    NOTEQUAL        reduce using rule 54 (control_transfer_statement -> continue_statement .)
    LTE             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    GTE             reduce using rule 54 (control_transfer_statement -> continue_statement .)
    IDENTIFIER      reduce using rule 54 (control_transfer_statement -> continue_statement .)
    LPAREN          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    STRING_LITERAL  reduce using rule 54 (control_transfer_statement -> continue_statement .)
    CHAR_CONST      reduce using rule 54 (control_transfer_statement -> continue_statement .)
    FLOAT_CONST     reduce using rule 54 (control_transfer_statement -> continue_statement .)
    INT_CONST       reduce using rule 54 (control_transfer_statement -> continue_statement .)
    NIL_LITERAL     reduce using rule 54 (control_transfer_statement -> continue_statement .)
    LBRACK          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    CASE            reduce using rule 54 (control_transfer_statement -> continue_statement .)
    DEFAULT         reduce using rule 54 (control_transfer_statement -> continue_statement .)
    RCURLY          reduce using rule 54 (control_transfer_statement -> continue_statement .)
    $end            reduce using rule 54 (control_transfer_statement -> continue_statement .)


state 23

    (158) primary_expression -> declaration_identifier .

    DOT             reduce using rule 158 (primary_expression -> declaration_identifier .)
    LPAREN          reduce using rule 158 (primary_expression -> declaration_identifier .)
    LBRACK          reduce using rule 158 (primary_expression -> declaration_identifier .)
    EQUAL           reduce using rule 158 (primary_expression -> declaration_identifier .)
    EQUALEQUAL      reduce using rule 158 (primary_expression -> declaration_identifier .)
    NOTEQUAL        reduce using rule 158 (primary_expression -> declaration_identifier .)
    LTE             reduce using rule 158 (primary_expression -> declaration_identifier .)
    GTE             reduce using rule 158 (primary_expression -> declaration_identifier .)
    LT              reduce using rule 158 (primary_expression -> declaration_identifier .)
    GT              reduce using rule 158 (primary_expression -> declaration_identifier .)
    DIV             reduce using rule 158 (primary_expression -> declaration_identifier .)
    SUB             reduce using rule 158 (primary_expression -> declaration_identifier .)
    ADD             reduce using rule 158 (primary_expression -> declaration_identifier .)
    EXCLAMATION     reduce using rule 158 (primary_expression -> declaration_identifier .)
    MUL             reduce using rule 158 (primary_expression -> declaration_identifier .)
    MOD             reduce using rule 158 (primary_expression -> declaration_identifier .)
    AND             reduce using rule 158 (primary_expression -> declaration_identifier .)
    OR              reduce using rule 158 (primary_expression -> declaration_identifier .)
    CARET           reduce using rule 158 (primary_expression -> declaration_identifier .)
    TILDE           reduce using rule 158 (primary_expression -> declaration_identifier .)
    CONDOP          reduce using rule 158 (primary_expression -> declaration_identifier .)
    ANDAND          reduce using rule 158 (primary_expression -> declaration_identifier .)
    OROR            reduce using rule 158 (primary_expression -> declaration_identifier .)
    NOT             reduce using rule 158 (primary_expression -> declaration_identifier .)
    COMMA           reduce using rule 158 (primary_expression -> declaration_identifier .)
    SEMICOLON       reduce using rule 158 (primary_expression -> declaration_identifier .)
    PRINT           reduce using rule 158 (primary_expression -> declaration_identifier .)
    IMPORT          reduce using rule 158 (primary_expression -> declaration_identifier .)
    LET             reduce using rule 158 (primary_expression -> declaration_identifier .)
    STRUCT          reduce using rule 158 (primary_expression -> declaration_identifier .)
    FOR             reduce using rule 158 (primary_expression -> declaration_identifier .)
    WHILE           reduce using rule 158 (primary_expression -> declaration_identifier .)
    REPEAT          reduce using rule 158 (primary_expression -> declaration_identifier .)
    IF              reduce using rule 158 (primary_expression -> declaration_identifier .)
    SWITCH          reduce using rule 158 (primary_expression -> declaration_identifier .)
    BREAK           reduce using rule 158 (primary_expression -> declaration_identifier .)
    CONTINUE        reduce using rule 158 (primary_expression -> declaration_identifier .)
    RETURN          reduce using rule 158 (primary_expression -> declaration_identifier .)
    VAR             reduce using rule 158 (primary_expression -> declaration_identifier .)
    FUNC            reduce using rule 158 (primary_expression -> declaration_identifier .)
    PREFIX          reduce using rule 158 (primary_expression -> declaration_identifier .)
    POSTFIX         reduce using rule 158 (primary_expression -> declaration_identifier .)
    INFIX           reduce using rule 158 (primary_expression -> declaration_identifier .)
    IDENTIFIER      reduce using rule 158 (primary_expression -> declaration_identifier .)
    STRING_LITERAL  reduce using rule 158 (primary_expression -> declaration_identifier .)
    CHAR_CONST      reduce using rule 158 (primary_expression -> declaration_identifier .)
    FLOAT_CONST     reduce using rule 158 (primary_expression -> declaration_identifier .)
    INT_CONST       reduce using rule 158 (primary_expression -> declaration_identifier .)
    NIL_LITERAL     reduce using rule 158 (primary_expression -> declaration_identifier .)
    $end            reduce using rule 158 (primary_expression -> declaration_identifier .)
    RPAREN          reduce using rule 158 (primary_expression -> declaration_identifier .)
    RCURLY          reduce using rule 158 (primary_expression -> declaration_identifier .)
    CASE            reduce using rule 158 (primary_expression -> declaration_identifier .)
    DEFAULT         reduce using rule 158 (primary_expression -> declaration_identifier .)
    RBRACK          reduce using rule 158 (primary_expression -> declaration_identifier .)
    LCURLY          reduce using rule 158 (primary_expression -> declaration_identifier .)
    WHERE           reduce using rule 158 (primary_expression -> declaration_identifier .)
    COLON           reduce using rule 158 (primary_expression -> declaration_identifier .)


state 24

    (32) repeat_while_statement -> REPEAT . code_block WHILE expression
    (68) code_block -> . LCURLY statements RCURLY
    (69) code_block -> . LCURLY RCURLY

    LCURLY          shift and go to state 113

    code_block                     shift and go to state 114

state 25

    (19) for_statement -> FOR . LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block

    LPAREN          shift and go to state 115


state 26

    (95) function_head -> FUNC .

    IDENTIFIER      reduce using rule 95 (function_head -> FUNC .)
    DIV             reduce using rule 95 (function_head -> FUNC .)
    EQUAL           reduce using rule 95 (function_head -> FUNC .)
    SUB             reduce using rule 95 (function_head -> FUNC .)
    ADD             reduce using rule 95 (function_head -> FUNC .)
    EXCLAMATION     reduce using rule 95 (function_head -> FUNC .)
    MUL             reduce using rule 95 (function_head -> FUNC .)
    MOD             reduce using rule 95 (function_head -> FUNC .)
    AND             reduce using rule 95 (function_head -> FUNC .)
    OR              reduce using rule 95 (function_head -> FUNC .)
    LT              reduce using rule 95 (function_head -> FUNC .)
    GT              reduce using rule 95 (function_head -> FUNC .)
    CARET           reduce using rule 95 (function_head -> FUNC .)
    TILDE           reduce using rule 95 (function_head -> FUNC .)
    CONDOP          reduce using rule 95 (function_head -> FUNC .)
    ANDAND          reduce using rule 95 (function_head -> FUNC .)
    OROR            reduce using rule 95 (function_head -> FUNC .)
    NOT             reduce using rule 95 (function_head -> FUNC .)
    DOT             reduce using rule 95 (function_head -> FUNC .)
    EQUALEQUAL      reduce using rule 95 (function_head -> FUNC .)
    NOTEQUAL        reduce using rule 95 (function_head -> FUNC .)
    LTE             reduce using rule 95 (function_head -> FUNC .)
    GTE             reduce using rule 95 (function_head -> FUNC .)


state 27

    (151) in_out_expression -> AND . declaration_identifier
    (232) operator -> AND .
    (220) declaration_identifier -> . IDENTIFIER

    IDENTIFIER      reduce using rule 232 (operator -> AND .)
    LPAREN          reduce using rule 232 (operator -> AND .)
    STRING_LITERAL  reduce using rule 232 (operator -> AND .)
    CHAR_CONST      reduce using rule 232 (operator -> AND .)
    FLOAT_CONST     reduce using rule 232 (operator -> AND .)
    INT_CONST       reduce using rule 232 (operator -> AND .)
    NIL_LITERAL     reduce using rule 232 (operator -> AND .)
    LBRACK          reduce using rule 232 (operator -> AND .)

  ! IDENTIFIER      [ shift and go to state 63 ]

    declaration_identifier         shift and go to state 116

state 28

    (159) primary_expression -> literal_expression .

    DOT             reduce using rule 159 (primary_expression -> literal_expression .)
    LPAREN          reduce using rule 159 (primary_expression -> literal_expression .)
    LBRACK          reduce using rule 159 (primary_expression -> literal_expression .)
    EQUAL           reduce using rule 159 (primary_expression -> literal_expression .)
    EQUALEQUAL      reduce using rule 159 (primary_expression -> literal_expression .)
    NOTEQUAL        reduce using rule 159 (primary_expression -> literal_expression .)
    LTE             reduce using rule 159 (primary_expression -> literal_expression .)
    GTE             reduce using rule 159 (primary_expression -> literal_expression .)
    LT              reduce using rule 159 (primary_expression -> literal_expression .)
    GT              reduce using rule 159 (primary_expression -> literal_expression .)
    DIV             reduce using rule 159 (primary_expression -> literal_expression .)
    SUB             reduce using rule 159 (primary_expression -> literal_expression .)
    ADD             reduce using rule 159 (primary_expression -> literal_expression .)
    EXCLAMATION     reduce using rule 159 (primary_expression -> literal_expression .)
    MUL             reduce using rule 159 (primary_expression -> literal_expression .)
    MOD             reduce using rule 159 (primary_expression -> literal_expression .)
    AND             reduce using rule 159 (primary_expression -> literal_expression .)
    OR              reduce using rule 159 (primary_expression -> literal_expression .)
    CARET           reduce using rule 159 (primary_expression -> literal_expression .)
    TILDE           reduce using rule 159 (primary_expression -> literal_expression .)
    CONDOP          reduce using rule 159 (primary_expression -> literal_expression .)
    ANDAND          reduce using rule 159 (primary_expression -> literal_expression .)
    OROR            reduce using rule 159 (primary_expression -> literal_expression .)
    NOT             reduce using rule 159 (primary_expression -> literal_expression .)
    COMMA           reduce using rule 159 (primary_expression -> literal_expression .)
    SEMICOLON       reduce using rule 159 (primary_expression -> literal_expression .)
    PRINT           reduce using rule 159 (primary_expression -> literal_expression .)
    IMPORT          reduce using rule 159 (primary_expression -> literal_expression .)
    LET             reduce using rule 159 (primary_expression -> literal_expression .)
    STRUCT          reduce using rule 159 (primary_expression -> literal_expression .)
    FOR             reduce using rule 159 (primary_expression -> literal_expression .)
    WHILE           reduce using rule 159 (primary_expression -> literal_expression .)
    REPEAT          reduce using rule 159 (primary_expression -> literal_expression .)
    IF              reduce using rule 159 (primary_expression -> literal_expression .)
    SWITCH          reduce using rule 159 (primary_expression -> literal_expression .)
    BREAK           reduce using rule 159 (primary_expression -> literal_expression .)
    CONTINUE        reduce using rule 159 (primary_expression -> literal_expression .)
    RETURN          reduce using rule 159 (primary_expression -> literal_expression .)
    VAR             reduce using rule 159 (primary_expression -> literal_expression .)
    FUNC            reduce using rule 159 (primary_expression -> literal_expression .)
    PREFIX          reduce using rule 159 (primary_expression -> literal_expression .)
    POSTFIX         reduce using rule 159 (primary_expression -> literal_expression .)
    INFIX           reduce using rule 159 (primary_expression -> literal_expression .)
    IDENTIFIER      reduce using rule 159 (primary_expression -> literal_expression .)
    STRING_LITERAL  reduce using rule 159 (primary_expression -> literal_expression .)
    CHAR_CONST      reduce using rule 159 (primary_expression -> literal_expression .)
    FLOAT_CONST     reduce using rule 159 (primary_expression -> literal_expression .)
    INT_CONST       reduce using rule 159 (primary_expression -> literal_expression .)
    NIL_LITERAL     reduce using rule 159 (primary_expression -> literal_expression .)
    $end            reduce using rule 159 (primary_expression -> literal_expression .)
    RPAREN          reduce using rule 159 (primary_expression -> literal_expression .)
    WHERE           reduce using rule 159 (primary_expression -> literal_expression .)
    COLON           reduce using rule 159 (primary_expression -> literal_expression .)
    RCURLY          reduce using rule 159 (primary_expression -> literal_expression .)
    CASE            reduce using rule 159 (primary_expression -> literal_expression .)
    DEFAULT         reduce using rule 159 (primary_expression -> literal_expression .)
    RBRACK          reduce using rule 159 (primary_expression -> literal_expression .)
    LCURLY          reduce using rule 159 (primary_expression -> literal_expression .)


state 29

    (63) declaration -> function_declaration .

    PRINT           reduce using rule 63 (declaration -> function_declaration .)
    IMPORT          reduce using rule 63 (declaration -> function_declaration .)
    LET             reduce using rule 63 (declaration -> function_declaration .)
    STRUCT          reduce using rule 63 (declaration -> function_declaration .)
    FOR             reduce using rule 63 (declaration -> function_declaration .)
    WHILE           reduce using rule 63 (declaration -> function_declaration .)
    REPEAT          reduce using rule 63 (declaration -> function_declaration .)
    IF              reduce using rule 63 (declaration -> function_declaration .)
    SWITCH          reduce using rule 63 (declaration -> function_declaration .)
    BREAK           reduce using rule 63 (declaration -> function_declaration .)
    CONTINUE        reduce using rule 63 (declaration -> function_declaration .)
    RETURN          reduce using rule 63 (declaration -> function_declaration .)
    AND             reduce using rule 63 (declaration -> function_declaration .)
    VAR             reduce using rule 63 (declaration -> function_declaration .)
    FUNC            reduce using rule 63 (declaration -> function_declaration .)
    PREFIX          reduce using rule 63 (declaration -> function_declaration .)
    POSTFIX         reduce using rule 63 (declaration -> function_declaration .)
    INFIX           reduce using rule 63 (declaration -> function_declaration .)
    DIV             reduce using rule 63 (declaration -> function_declaration .)
    EQUAL           reduce using rule 63 (declaration -> function_declaration .)
    SUB             reduce using rule 63 (declaration -> function_declaration .)
    ADD             reduce using rule 63 (declaration -> function_declaration .)
    EXCLAMATION     reduce using rule 63 (declaration -> function_declaration .)
    MUL             reduce using rule 63 (declaration -> function_declaration .)
    MOD             reduce using rule 63 (declaration -> function_declaration .)
    OR              reduce using rule 63 (declaration -> function_declaration .)
    LT              reduce using rule 63 (declaration -> function_declaration .)
    GT              reduce using rule 63 (declaration -> function_declaration .)
    CARET           reduce using rule 63 (declaration -> function_declaration .)
    TILDE           reduce using rule 63 (declaration -> function_declaration .)
    CONDOP          reduce using rule 63 (declaration -> function_declaration .)
    ANDAND          reduce using rule 63 (declaration -> function_declaration .)
    OROR            reduce using rule 63 (declaration -> function_declaration .)
    NOT             reduce using rule 63 (declaration -> function_declaration .)
    DOT             reduce using rule 63 (declaration -> function_declaration .)
    EQUALEQUAL      reduce using rule 63 (declaration -> function_declaration .)
    NOTEQUAL        reduce using rule 63 (declaration -> function_declaration .)
    LTE             reduce using rule 63 (declaration -> function_declaration .)
    GTE             reduce using rule 63 (declaration -> function_declaration .)
    IDENTIFIER      reduce using rule 63 (declaration -> function_declaration .)
    LPAREN          reduce using rule 63 (declaration -> function_declaration .)
    STRING_LITERAL  reduce using rule 63 (declaration -> function_declaration .)
    CHAR_CONST      reduce using rule 63 (declaration -> function_declaration .)
    FLOAT_CONST     reduce using rule 63 (declaration -> function_declaration .)
    INT_CONST       reduce using rule 63 (declaration -> function_declaration .)
    NIL_LITERAL     reduce using rule 63 (declaration -> function_declaration .)
    LBRACK          reduce using rule 63 (declaration -> function_declaration .)
    $end            reduce using rule 63 (declaration -> function_declaration .)
    RCURLY          reduce using rule 63 (declaration -> function_declaration .)
    CASE            reduce using rule 63 (declaration -> function_declaration .)
    DEFAULT         reduce using rule 63 (declaration -> function_declaration .)


state 30

    (150) prefix_expression -> in_out_expression .

    EQUAL           reduce using rule 150 (prefix_expression -> in_out_expression .)
    EQUALEQUAL      reduce using rule 150 (prefix_expression -> in_out_expression .)
    NOTEQUAL        reduce using rule 150 (prefix_expression -> in_out_expression .)
    LTE             reduce using rule 150 (prefix_expression -> in_out_expression .)
    GTE             reduce using rule 150 (prefix_expression -> in_out_expression .)
    LT              reduce using rule 150 (prefix_expression -> in_out_expression .)
    GT              reduce using rule 150 (prefix_expression -> in_out_expression .)
    DIV             reduce using rule 150 (prefix_expression -> in_out_expression .)
    SUB             reduce using rule 150 (prefix_expression -> in_out_expression .)
    ADD             reduce using rule 150 (prefix_expression -> in_out_expression .)
    EXCLAMATION     reduce using rule 150 (prefix_expression -> in_out_expression .)
    MUL             reduce using rule 150 (prefix_expression -> in_out_expression .)
    MOD             reduce using rule 150 (prefix_expression -> in_out_expression .)
    AND             reduce using rule 150 (prefix_expression -> in_out_expression .)
    OR              reduce using rule 150 (prefix_expression -> in_out_expression .)
    CARET           reduce using rule 150 (prefix_expression -> in_out_expression .)
    TILDE           reduce using rule 150 (prefix_expression -> in_out_expression .)
    CONDOP          reduce using rule 150 (prefix_expression -> in_out_expression .)
    ANDAND          reduce using rule 150 (prefix_expression -> in_out_expression .)
    OROR            reduce using rule 150 (prefix_expression -> in_out_expression .)
    NOT             reduce using rule 150 (prefix_expression -> in_out_expression .)
    DOT             reduce using rule 150 (prefix_expression -> in_out_expression .)
    COMMA           reduce using rule 150 (prefix_expression -> in_out_expression .)
    RPAREN          reduce using rule 150 (prefix_expression -> in_out_expression .)
    WHERE           reduce using rule 150 (prefix_expression -> in_out_expression .)
    COLON           reduce using rule 150 (prefix_expression -> in_out_expression .)
    PRINT           reduce using rule 150 (prefix_expression -> in_out_expression .)
    IMPORT          reduce using rule 150 (prefix_expression -> in_out_expression .)
    LET             reduce using rule 150 (prefix_expression -> in_out_expression .)
    STRUCT          reduce using rule 150 (prefix_expression -> in_out_expression .)
    FOR             reduce using rule 150 (prefix_expression -> in_out_expression .)
    WHILE           reduce using rule 150 (prefix_expression -> in_out_expression .)
    REPEAT          reduce using rule 150 (prefix_expression -> in_out_expression .)
    IF              reduce using rule 150 (prefix_expression -> in_out_expression .)
    SWITCH          reduce using rule 150 (prefix_expression -> in_out_expression .)
    BREAK           reduce using rule 150 (prefix_expression -> in_out_expression .)
    CONTINUE        reduce using rule 150 (prefix_expression -> in_out_expression .)
    RETURN          reduce using rule 150 (prefix_expression -> in_out_expression .)
    VAR             reduce using rule 150 (prefix_expression -> in_out_expression .)
    FUNC            reduce using rule 150 (prefix_expression -> in_out_expression .)
    PREFIX          reduce using rule 150 (prefix_expression -> in_out_expression .)
    POSTFIX         reduce using rule 150 (prefix_expression -> in_out_expression .)
    INFIX           reduce using rule 150 (prefix_expression -> in_out_expression .)
    IDENTIFIER      reduce using rule 150 (prefix_expression -> in_out_expression .)
    LPAREN          reduce using rule 150 (prefix_expression -> in_out_expression .)
    STRING_LITERAL  reduce using rule 150 (prefix_expression -> in_out_expression .)
    CHAR_CONST      reduce using rule 150 (prefix_expression -> in_out_expression .)
    FLOAT_CONST     reduce using rule 150 (prefix_expression -> in_out_expression .)
    INT_CONST       reduce using rule 150 (prefix_expression -> in_out_expression .)
    NIL_LITERAL     reduce using rule 150 (prefix_expression -> in_out_expression .)
    LBRACK          reduce using rule 150 (prefix_expression -> in_out_expression .)
    $end            reduce using rule 150 (prefix_expression -> in_out_expression .)
    RCURLY          reduce using rule 150 (prefix_expression -> in_out_expression .)
    CASE            reduce using rule 150 (prefix_expression -> in_out_expression .)
    DEFAULT         reduce using rule 150 (prefix_expression -> in_out_expression .)
    SEMICOLON       reduce using rule 150 (prefix_expression -> in_out_expression .)
    RBRACK          reduce using rule 150 (prefix_expression -> in_out_expression .)
    LCURLY          reduce using rule 150 (prefix_expression -> in_out_expression .)


state 31

    (163) array_literal -> LBRACK . array_literal_items RBRACK
    (164) array_literal -> LBRACK . RBRACK
    (165) array_literal_items -> . array_literal_item COMMA
    (166) array_literal_items -> . array_literal_item
    (167) array_literal_items -> . array_literal_item COMMA array_literal_items
    (168) array_literal_item -> . expression
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    RBRACK          shift and go to state 119
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    array_literal_items            shift and go to state 118
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    parenthesized_expression       shift and go to state 53
    expression                     shift and go to state 120
    array_literal_item             shift and go to state 117

state 32

    (57) continue_statement -> CONTINUE .

    PRINT           reduce using rule 57 (continue_statement -> CONTINUE .)
    IMPORT          reduce using rule 57 (continue_statement -> CONTINUE .)
    LET             reduce using rule 57 (continue_statement -> CONTINUE .)
    STRUCT          reduce using rule 57 (continue_statement -> CONTINUE .)
    FOR             reduce using rule 57 (continue_statement -> CONTINUE .)
    WHILE           reduce using rule 57 (continue_statement -> CONTINUE .)
    REPEAT          reduce using rule 57 (continue_statement -> CONTINUE .)
    IF              reduce using rule 57 (continue_statement -> CONTINUE .)
    SWITCH          reduce using rule 57 (continue_statement -> CONTINUE .)
    BREAK           reduce using rule 57 (continue_statement -> CONTINUE .)
    CONTINUE        reduce using rule 57 (continue_statement -> CONTINUE .)
    RETURN          reduce using rule 57 (continue_statement -> CONTINUE .)
    AND             reduce using rule 57 (continue_statement -> CONTINUE .)
    VAR             reduce using rule 57 (continue_statement -> CONTINUE .)
    FUNC            reduce using rule 57 (continue_statement -> CONTINUE .)
    PREFIX          reduce using rule 57 (continue_statement -> CONTINUE .)
    POSTFIX         reduce using rule 57 (continue_statement -> CONTINUE .)
    INFIX           reduce using rule 57 (continue_statement -> CONTINUE .)
    DIV             reduce using rule 57 (continue_statement -> CONTINUE .)
    EQUAL           reduce using rule 57 (continue_statement -> CONTINUE .)
    SUB             reduce using rule 57 (continue_statement -> CONTINUE .)
    ADD             reduce using rule 57 (continue_statement -> CONTINUE .)
    EXCLAMATION     reduce using rule 57 (continue_statement -> CONTINUE .)
    MUL             reduce using rule 57 (continue_statement -> CONTINUE .)
    MOD             reduce using rule 57 (continue_statement -> CONTINUE .)
    OR              reduce using rule 57 (continue_statement -> CONTINUE .)
    LT              reduce using rule 57 (continue_statement -> CONTINUE .)
    GT              reduce using rule 57 (continue_statement -> CONTINUE .)
    CARET           reduce using rule 57 (continue_statement -> CONTINUE .)
    TILDE           reduce using rule 57 (continue_statement -> CONTINUE .)
    CONDOP          reduce using rule 57 (continue_statement -> CONTINUE .)
    ANDAND          reduce using rule 57 (continue_statement -> CONTINUE .)
    OROR            reduce using rule 57 (continue_statement -> CONTINUE .)
    NOT             reduce using rule 57 (continue_statement -> CONTINUE .)
    DOT             reduce using rule 57 (continue_statement -> CONTINUE .)
    EQUALEQUAL      reduce using rule 57 (continue_statement -> CONTINUE .)
    NOTEQUAL        reduce using rule 57 (continue_statement -> CONTINUE .)
    LTE             reduce using rule 57 (continue_statement -> CONTINUE .)
    GTE             reduce using rule 57 (continue_statement -> CONTINUE .)
    IDENTIFIER      reduce using rule 57 (continue_statement -> CONTINUE .)
    LPAREN          reduce using rule 57 (continue_statement -> CONTINUE .)
    STRING_LITERAL  reduce using rule 57 (continue_statement -> CONTINUE .)
    CHAR_CONST      reduce using rule 57 (continue_statement -> CONTINUE .)
    FLOAT_CONST     reduce using rule 57 (continue_statement -> CONTINUE .)
    INT_CONST       reduce using rule 57 (continue_statement -> CONTINUE .)
    NIL_LITERAL     reduce using rule 57 (continue_statement -> CONTINUE .)
    LBRACK          reduce using rule 57 (continue_statement -> CONTINUE .)
    $end            reduce using rule 57 (continue_statement -> CONTINUE .)
    RCURLY          reduce using rule 57 (continue_statement -> CONTINUE .)
    CASE            reduce using rule 57 (continue_statement -> CONTINUE .)
    DEFAULT         reduce using rule 57 (continue_statement -> CONTINUE .)


state 33

    (242) operator -> NOT .

    AND             reduce using rule 242 (operator -> NOT .)
    DIV             reduce using rule 242 (operator -> NOT .)
    EQUAL           reduce using rule 242 (operator -> NOT .)
    SUB             reduce using rule 242 (operator -> NOT .)
    ADD             reduce using rule 242 (operator -> NOT .)
    EXCLAMATION     reduce using rule 242 (operator -> NOT .)
    MUL             reduce using rule 242 (operator -> NOT .)
    MOD             reduce using rule 242 (operator -> NOT .)
    OR              reduce using rule 242 (operator -> NOT .)
    LT              reduce using rule 242 (operator -> NOT .)
    GT              reduce using rule 242 (operator -> NOT .)
    CARET           reduce using rule 242 (operator -> NOT .)
    TILDE           reduce using rule 242 (operator -> NOT .)
    CONDOP          reduce using rule 242 (operator -> NOT .)
    ANDAND          reduce using rule 242 (operator -> NOT .)
    OROR            reduce using rule 242 (operator -> NOT .)
    NOT             reduce using rule 242 (operator -> NOT .)
    DOT             reduce using rule 242 (operator -> NOT .)
    EQUALEQUAL      reduce using rule 242 (operator -> NOT .)
    NOTEQUAL        reduce using rule 242 (operator -> NOT .)
    LTE             reduce using rule 242 (operator -> NOT .)
    GTE             reduce using rule 242 (operator -> NOT .)
    IDENTIFIER      reduce using rule 242 (operator -> NOT .)
    LPAREN          reduce using rule 242 (operator -> NOT .)
    STRING_LITERAL  reduce using rule 242 (operator -> NOT .)
    CHAR_CONST      reduce using rule 242 (operator -> NOT .)
    FLOAT_CONST     reduce using rule 242 (operator -> NOT .)
    INT_CONST       reduce using rule 242 (operator -> NOT .)
    NIL_LITERAL     reduce using rule 242 (operator -> NOT .)
    LBRACK          reduce using rule 242 (operator -> NOT .)
    PRINT           reduce using rule 242 (operator -> NOT .)
    IMPORT          reduce using rule 242 (operator -> NOT .)
    LET             reduce using rule 242 (operator -> NOT .)
    STRUCT          reduce using rule 242 (operator -> NOT .)
    FOR             reduce using rule 242 (operator -> NOT .)
    WHILE           reduce using rule 242 (operator -> NOT .)
    REPEAT          reduce using rule 242 (operator -> NOT .)
    IF              reduce using rule 242 (operator -> NOT .)
    SWITCH          reduce using rule 242 (operator -> NOT .)
    BREAK           reduce using rule 242 (operator -> NOT .)
    CONTINUE        reduce using rule 242 (operator -> NOT .)
    RETURN          reduce using rule 242 (operator -> NOT .)
    VAR             reduce using rule 242 (operator -> NOT .)
    FUNC            reduce using rule 242 (operator -> NOT .)
    PREFIX          reduce using rule 242 (operator -> NOT .)
    POSTFIX         reduce using rule 242 (operator -> NOT .)
    INFIX           reduce using rule 242 (operator -> NOT .)
    $end            reduce using rule 242 (operator -> NOT .)
    RCURLY          reduce using rule 242 (operator -> NOT .)
    CASE            reduce using rule 242 (operator -> NOT .)
    DEFAULT         reduce using rule 242 (operator -> NOT .)
    COMMA           reduce using rule 242 (operator -> NOT .)
    RPAREN          reduce using rule 242 (operator -> NOT .)


state 34

    (131) infix_operator_declaration -> INFIX . OPERATOR operator

    OPERATOR        shift and go to state 121


state 35

    (4) statement -> expression .

    PRINT           reduce using rule 4 (statement -> expression .)
    IMPORT          reduce using rule 4 (statement -> expression .)
    LET             reduce using rule 4 (statement -> expression .)
    STRUCT          reduce using rule 4 (statement -> expression .)
    FOR             reduce using rule 4 (statement -> expression .)
    WHILE           reduce using rule 4 (statement -> expression .)
    REPEAT          reduce using rule 4 (statement -> expression .)
    IF              reduce using rule 4 (statement -> expression .)
    SWITCH          reduce using rule 4 (statement -> expression .)
    BREAK           reduce using rule 4 (statement -> expression .)
    CONTINUE        reduce using rule 4 (statement -> expression .)
    RETURN          reduce using rule 4 (statement -> expression .)
    AND             reduce using rule 4 (statement -> expression .)
    VAR             reduce using rule 4 (statement -> expression .)
    FUNC            reduce using rule 4 (statement -> expression .)
    PREFIX          reduce using rule 4 (statement -> expression .)
    POSTFIX         reduce using rule 4 (statement -> expression .)
    INFIX           reduce using rule 4 (statement -> expression .)
    DIV             reduce using rule 4 (statement -> expression .)
    EQUAL           reduce using rule 4 (statement -> expression .)
    SUB             reduce using rule 4 (statement -> expression .)
    ADD             reduce using rule 4 (statement -> expression .)
    EXCLAMATION     reduce using rule 4 (statement -> expression .)
    MUL             reduce using rule 4 (statement -> expression .)
    MOD             reduce using rule 4 (statement -> expression .)
    OR              reduce using rule 4 (statement -> expression .)
    LT              reduce using rule 4 (statement -> expression .)
    GT              reduce using rule 4 (statement -> expression .)
    CARET           reduce using rule 4 (statement -> expression .)
    TILDE           reduce using rule 4 (statement -> expression .)
    CONDOP          reduce using rule 4 (statement -> expression .)
    ANDAND          reduce using rule 4 (statement -> expression .)
    OROR            reduce using rule 4 (statement -> expression .)
    NOT             reduce using rule 4 (statement -> expression .)
    DOT             reduce using rule 4 (statement -> expression .)
    EQUALEQUAL      reduce using rule 4 (statement -> expression .)
    NOTEQUAL        reduce using rule 4 (statement -> expression .)
    LTE             reduce using rule 4 (statement -> expression .)
    GTE             reduce using rule 4 (statement -> expression .)
    IDENTIFIER      reduce using rule 4 (statement -> expression .)
    LPAREN          reduce using rule 4 (statement -> expression .)
    STRING_LITERAL  reduce using rule 4 (statement -> expression .)
    CHAR_CONST      reduce using rule 4 (statement -> expression .)
    FLOAT_CONST     reduce using rule 4 (statement -> expression .)
    INT_CONST       reduce using rule 4 (statement -> expression .)
    NIL_LITERAL     reduce using rule 4 (statement -> expression .)
    LBRACK          reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    RCURLY          reduce using rule 4 (statement -> expression .)
    CASE            reduce using rule 4 (statement -> expression .)
    DEFAULT         reduce using rule 4 (statement -> expression .)


state 36

    (231) operator -> MOD .

    AND             reduce using rule 231 (operator -> MOD .)
    DIV             reduce using rule 231 (operator -> MOD .)
    EQUAL           reduce using rule 231 (operator -> MOD .)
    SUB             reduce using rule 231 (operator -> MOD .)
    ADD             reduce using rule 231 (operator -> MOD .)
    EXCLAMATION     reduce using rule 231 (operator -> MOD .)
    MUL             reduce using rule 231 (operator -> MOD .)
    MOD             reduce using rule 231 (operator -> MOD .)
    OR              reduce using rule 231 (operator -> MOD .)
    LT              reduce using rule 231 (operator -> MOD .)
    GT              reduce using rule 231 (operator -> MOD .)
    CARET           reduce using rule 231 (operator -> MOD .)
    TILDE           reduce using rule 231 (operator -> MOD .)
    CONDOP          reduce using rule 231 (operator -> MOD .)
    ANDAND          reduce using rule 231 (operator -> MOD .)
    OROR            reduce using rule 231 (operator -> MOD .)
    NOT             reduce using rule 231 (operator -> MOD .)
    DOT             reduce using rule 231 (operator -> MOD .)
    EQUALEQUAL      reduce using rule 231 (operator -> MOD .)
    NOTEQUAL        reduce using rule 231 (operator -> MOD .)
    LTE             reduce using rule 231 (operator -> MOD .)
    GTE             reduce using rule 231 (operator -> MOD .)
    IDENTIFIER      reduce using rule 231 (operator -> MOD .)
    LPAREN          reduce using rule 231 (operator -> MOD .)
    STRING_LITERAL  reduce using rule 231 (operator -> MOD .)
    CHAR_CONST      reduce using rule 231 (operator -> MOD .)
    FLOAT_CONST     reduce using rule 231 (operator -> MOD .)
    INT_CONST       reduce using rule 231 (operator -> MOD .)
    NIL_LITERAL     reduce using rule 231 (operator -> MOD .)
    LBRACK          reduce using rule 231 (operator -> MOD .)
    PRINT           reduce using rule 231 (operator -> MOD .)
    IMPORT          reduce using rule 231 (operator -> MOD .)
    LET             reduce using rule 231 (operator -> MOD .)
    STRUCT          reduce using rule 231 (operator -> MOD .)
    FOR             reduce using rule 231 (operator -> MOD .)
    WHILE           reduce using rule 231 (operator -> MOD .)
    REPEAT          reduce using rule 231 (operator -> MOD .)
    IF              reduce using rule 231 (operator -> MOD .)
    SWITCH          reduce using rule 231 (operator -> MOD .)
    BREAK           reduce using rule 231 (operator -> MOD .)
    CONTINUE        reduce using rule 231 (operator -> MOD .)
    RETURN          reduce using rule 231 (operator -> MOD .)
    VAR             reduce using rule 231 (operator -> MOD .)
    FUNC            reduce using rule 231 (operator -> MOD .)
    PREFIX          reduce using rule 231 (operator -> MOD .)
    POSTFIX         reduce using rule 231 (operator -> MOD .)
    INFIX           reduce using rule 231 (operator -> MOD .)
    $end            reduce using rule 231 (operator -> MOD .)
    RCURLY          reduce using rule 231 (operator -> MOD .)
    CASE            reduce using rule 231 (operator -> MOD .)
    DEFAULT         reduce using rule 231 (operator -> MOD .)
    COMMA           reduce using rule 231 (operator -> MOD .)
    RPAREN          reduce using rule 231 (operator -> MOD .)


state 37

    (229) operator -> EXCLAMATION .

    AND             reduce using rule 229 (operator -> EXCLAMATION .)
    DIV             reduce using rule 229 (operator -> EXCLAMATION .)
    EQUAL           reduce using rule 229 (operator -> EXCLAMATION .)
    SUB             reduce using rule 229 (operator -> EXCLAMATION .)
    ADD             reduce using rule 229 (operator -> EXCLAMATION .)
    EXCLAMATION     reduce using rule 229 (operator -> EXCLAMATION .)
    MUL             reduce using rule 229 (operator -> EXCLAMATION .)
    MOD             reduce using rule 229 (operator -> EXCLAMATION .)
    OR              reduce using rule 229 (operator -> EXCLAMATION .)
    LT              reduce using rule 229 (operator -> EXCLAMATION .)
    GT              reduce using rule 229 (operator -> EXCLAMATION .)
    CARET           reduce using rule 229 (operator -> EXCLAMATION .)
    TILDE           reduce using rule 229 (operator -> EXCLAMATION .)
    CONDOP          reduce using rule 229 (operator -> EXCLAMATION .)
    ANDAND          reduce using rule 229 (operator -> EXCLAMATION .)
    OROR            reduce using rule 229 (operator -> EXCLAMATION .)
    NOT             reduce using rule 229 (operator -> EXCLAMATION .)
    DOT             reduce using rule 229 (operator -> EXCLAMATION .)
    EQUALEQUAL      reduce using rule 229 (operator -> EXCLAMATION .)
    NOTEQUAL        reduce using rule 229 (operator -> EXCLAMATION .)
    LTE             reduce using rule 229 (operator -> EXCLAMATION .)
    GTE             reduce using rule 229 (operator -> EXCLAMATION .)
    IDENTIFIER      reduce using rule 229 (operator -> EXCLAMATION .)
    LPAREN          reduce using rule 229 (operator -> EXCLAMATION .)
    STRING_LITERAL  reduce using rule 229 (operator -> EXCLAMATION .)
    CHAR_CONST      reduce using rule 229 (operator -> EXCLAMATION .)
    FLOAT_CONST     reduce using rule 229 (operator -> EXCLAMATION .)
    INT_CONST       reduce using rule 229 (operator -> EXCLAMATION .)
    NIL_LITERAL     reduce using rule 229 (operator -> EXCLAMATION .)
    LBRACK          reduce using rule 229 (operator -> EXCLAMATION .)
    PRINT           reduce using rule 229 (operator -> EXCLAMATION .)
    IMPORT          reduce using rule 229 (operator -> EXCLAMATION .)
    LET             reduce using rule 229 (operator -> EXCLAMATION .)
    STRUCT          reduce using rule 229 (operator -> EXCLAMATION .)
    FOR             reduce using rule 229 (operator -> EXCLAMATION .)
    WHILE           reduce using rule 229 (operator -> EXCLAMATION .)
    REPEAT          reduce using rule 229 (operator -> EXCLAMATION .)
    IF              reduce using rule 229 (operator -> EXCLAMATION .)
    SWITCH          reduce using rule 229 (operator -> EXCLAMATION .)
    BREAK           reduce using rule 229 (operator -> EXCLAMATION .)
    CONTINUE        reduce using rule 229 (operator -> EXCLAMATION .)
    RETURN          reduce using rule 229 (operator -> EXCLAMATION .)
    VAR             reduce using rule 229 (operator -> EXCLAMATION .)
    FUNC            reduce using rule 229 (operator -> EXCLAMATION .)
    PREFIX          reduce using rule 229 (operator -> EXCLAMATION .)
    POSTFIX         reduce using rule 229 (operator -> EXCLAMATION .)
    INFIX           reduce using rule 229 (operator -> EXCLAMATION .)
    $end            reduce using rule 229 (operator -> EXCLAMATION .)
    RCURLY          reduce using rule 229 (operator -> EXCLAMATION .)
    CASE            reduce using rule 229 (operator -> EXCLAMATION .)
    DEFAULT         reduce using rule 229 (operator -> EXCLAMATION .)
    COMMA           reduce using rule 229 (operator -> EXCLAMATION .)
    RPAREN          reduce using rule 229 (operator -> EXCLAMATION .)


state 38

    (241) operator -> OROR .

    AND             reduce using rule 241 (operator -> OROR .)
    DIV             reduce using rule 241 (operator -> OROR .)
    EQUAL           reduce using rule 241 (operator -> OROR .)
    SUB             reduce using rule 241 (operator -> OROR .)
    ADD             reduce using rule 241 (operator -> OROR .)
    EXCLAMATION     reduce using rule 241 (operator -> OROR .)
    MUL             reduce using rule 241 (operator -> OROR .)
    MOD             reduce using rule 241 (operator -> OROR .)
    OR              reduce using rule 241 (operator -> OROR .)
    LT              reduce using rule 241 (operator -> OROR .)
    GT              reduce using rule 241 (operator -> OROR .)
    CARET           reduce using rule 241 (operator -> OROR .)
    TILDE           reduce using rule 241 (operator -> OROR .)
    CONDOP          reduce using rule 241 (operator -> OROR .)
    ANDAND          reduce using rule 241 (operator -> OROR .)
    OROR            reduce using rule 241 (operator -> OROR .)
    NOT             reduce using rule 241 (operator -> OROR .)
    DOT             reduce using rule 241 (operator -> OROR .)
    EQUALEQUAL      reduce using rule 241 (operator -> OROR .)
    NOTEQUAL        reduce using rule 241 (operator -> OROR .)
    LTE             reduce using rule 241 (operator -> OROR .)
    GTE             reduce using rule 241 (operator -> OROR .)
    IDENTIFIER      reduce using rule 241 (operator -> OROR .)
    LPAREN          reduce using rule 241 (operator -> OROR .)
    STRING_LITERAL  reduce using rule 241 (operator -> OROR .)
    CHAR_CONST      reduce using rule 241 (operator -> OROR .)
    FLOAT_CONST     reduce using rule 241 (operator -> OROR .)
    INT_CONST       reduce using rule 241 (operator -> OROR .)
    NIL_LITERAL     reduce using rule 241 (operator -> OROR .)
    LBRACK          reduce using rule 241 (operator -> OROR .)
    PRINT           reduce using rule 241 (operator -> OROR .)
    IMPORT          reduce using rule 241 (operator -> OROR .)
    LET             reduce using rule 241 (operator -> OROR .)
    STRUCT          reduce using rule 241 (operator -> OROR .)
    FOR             reduce using rule 241 (operator -> OROR .)
    WHILE           reduce using rule 241 (operator -> OROR .)
    REPEAT          reduce using rule 241 (operator -> OROR .)
    IF              reduce using rule 241 (operator -> OROR .)
    SWITCH          reduce using rule 241 (operator -> OROR .)
    BREAK           reduce using rule 241 (operator -> OROR .)
    CONTINUE        reduce using rule 241 (operator -> OROR .)
    RETURN          reduce using rule 241 (operator -> OROR .)
    VAR             reduce using rule 241 (operator -> OROR .)
    FUNC            reduce using rule 241 (operator -> OROR .)
    PREFIX          reduce using rule 241 (operator -> OROR .)
    POSTFIX         reduce using rule 241 (operator -> OROR .)
    INFIX           reduce using rule 241 (operator -> OROR .)
    $end            reduce using rule 241 (operator -> OROR .)
    RCURLY          reduce using rule 241 (operator -> OROR .)
    CASE            reduce using rule 241 (operator -> OROR .)
    DEFAULT         reduce using rule 241 (operator -> OROR .)
    COMMA           reduce using rule 241 (operator -> OROR .)
    RPAREN          reduce using rule 241 (operator -> OROR .)


state 39

    (1) start -> statements .

    $end            reduce using rule 1 (start -> statements .)


state 40

    (227) operator -> SUB .

    AND             reduce using rule 227 (operator -> SUB .)
    DIV             reduce using rule 227 (operator -> SUB .)
    EQUAL           reduce using rule 227 (operator -> SUB .)
    SUB             reduce using rule 227 (operator -> SUB .)
    ADD             reduce using rule 227 (operator -> SUB .)
    EXCLAMATION     reduce using rule 227 (operator -> SUB .)
    MUL             reduce using rule 227 (operator -> SUB .)
    MOD             reduce using rule 227 (operator -> SUB .)
    OR              reduce using rule 227 (operator -> SUB .)
    LT              reduce using rule 227 (operator -> SUB .)
    GT              reduce using rule 227 (operator -> SUB .)
    CARET           reduce using rule 227 (operator -> SUB .)
    TILDE           reduce using rule 227 (operator -> SUB .)
    CONDOP          reduce using rule 227 (operator -> SUB .)
    ANDAND          reduce using rule 227 (operator -> SUB .)
    OROR            reduce using rule 227 (operator -> SUB .)
    NOT             reduce using rule 227 (operator -> SUB .)
    DOT             reduce using rule 227 (operator -> SUB .)
    EQUALEQUAL      reduce using rule 227 (operator -> SUB .)
    NOTEQUAL        reduce using rule 227 (operator -> SUB .)
    LTE             reduce using rule 227 (operator -> SUB .)
    GTE             reduce using rule 227 (operator -> SUB .)
    IDENTIFIER      reduce using rule 227 (operator -> SUB .)
    LPAREN          reduce using rule 227 (operator -> SUB .)
    STRING_LITERAL  reduce using rule 227 (operator -> SUB .)
    CHAR_CONST      reduce using rule 227 (operator -> SUB .)
    FLOAT_CONST     reduce using rule 227 (operator -> SUB .)
    INT_CONST       reduce using rule 227 (operator -> SUB .)
    NIL_LITERAL     reduce using rule 227 (operator -> SUB .)
    LBRACK          reduce using rule 227 (operator -> SUB .)
    PRINT           reduce using rule 227 (operator -> SUB .)
    IMPORT          reduce using rule 227 (operator -> SUB .)
    LET             reduce using rule 227 (operator -> SUB .)
    STRUCT          reduce using rule 227 (operator -> SUB .)
    FOR             reduce using rule 227 (operator -> SUB .)
    WHILE           reduce using rule 227 (operator -> SUB .)
    REPEAT          reduce using rule 227 (operator -> SUB .)
    IF              reduce using rule 227 (operator -> SUB .)
    SWITCH          reduce using rule 227 (operator -> SUB .)
    BREAK           reduce using rule 227 (operator -> SUB .)
    CONTINUE        reduce using rule 227 (operator -> SUB .)
    RETURN          reduce using rule 227 (operator -> SUB .)
    VAR             reduce using rule 227 (operator -> SUB .)
    FUNC            reduce using rule 227 (operator -> SUB .)
    PREFIX          reduce using rule 227 (operator -> SUB .)
    POSTFIX         reduce using rule 227 (operator -> SUB .)
    INFIX           reduce using rule 227 (operator -> SUB .)
    $end            reduce using rule 227 (operator -> SUB .)
    RCURLY          reduce using rule 227 (operator -> SUB .)
    CASE            reduce using rule 227 (operator -> SUB .)
    DEFAULT         reduce using rule 227 (operator -> SUB .)
    COMMA           reduce using rule 227 (operator -> SUB .)
    RPAREN          reduce using rule 227 (operator -> SUB .)


state 41

    (22) while_statement -> WHILE . condition_list code_block
    (23) condition_list -> . condition commacond
    (26) condition -> . expression
    (27) condition -> . case_condition
    (28) condition -> . optional_binding_condition
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (29) case_condition -> . CASE pattern initializer
    (30) optional_binding_condition -> . LET pattern initializer
    (31) optional_binding_condition -> . VAR pattern initializer
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    CASE            shift and go to state 125
    LET             shift and go to state 128
    VAR             shift and go to state 126
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    optional_binding_condition     shift and go to state 122
    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    condition_list                 shift and go to state 123
    postfix_expression             shift and go to state 76
    case_condition                 shift and go to state 124
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 23
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    condition                      shift and go to state 127
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    expression                     shift and go to state 129

state 42

    (9) statement -> print_statement .

    PRINT           reduce using rule 9 (statement -> print_statement .)
    IMPORT          reduce using rule 9 (statement -> print_statement .)
    LET             reduce using rule 9 (statement -> print_statement .)
    STRUCT          reduce using rule 9 (statement -> print_statement .)
    FOR             reduce using rule 9 (statement -> print_statement .)
    WHILE           reduce using rule 9 (statement -> print_statement .)
    REPEAT          reduce using rule 9 (statement -> print_statement .)
    IF              reduce using rule 9 (statement -> print_statement .)
    SWITCH          reduce using rule 9 (statement -> print_statement .)
    BREAK           reduce using rule 9 (statement -> print_statement .)
    CONTINUE        reduce using rule 9 (statement -> print_statement .)
    RETURN          reduce using rule 9 (statement -> print_statement .)
    AND             reduce using rule 9 (statement -> print_statement .)
    VAR             reduce using rule 9 (statement -> print_statement .)
    FUNC            reduce using rule 9 (statement -> print_statement .)
    PREFIX          reduce using rule 9 (statement -> print_statement .)
    POSTFIX         reduce using rule 9 (statement -> print_statement .)
    INFIX           reduce using rule 9 (statement -> print_statement .)
    DIV             reduce using rule 9 (statement -> print_statement .)
    EQUAL           reduce using rule 9 (statement -> print_statement .)
    SUB             reduce using rule 9 (statement -> print_statement .)
    ADD             reduce using rule 9 (statement -> print_statement .)
    EXCLAMATION     reduce using rule 9 (statement -> print_statement .)
    MUL             reduce using rule 9 (statement -> print_statement .)
    MOD             reduce using rule 9 (statement -> print_statement .)
    OR              reduce using rule 9 (statement -> print_statement .)
    LT              reduce using rule 9 (statement -> print_statement .)
    GT              reduce using rule 9 (statement -> print_statement .)
    CARET           reduce using rule 9 (statement -> print_statement .)
    TILDE           reduce using rule 9 (statement -> print_statement .)
    CONDOP          reduce using rule 9 (statement -> print_statement .)
    ANDAND          reduce using rule 9 (statement -> print_statement .)
    OROR            reduce using rule 9 (statement -> print_statement .)
    NOT             reduce using rule 9 (statement -> print_statement .)
    DOT             reduce using rule 9 (statement -> print_statement .)
    EQUALEQUAL      reduce using rule 9 (statement -> print_statement .)
    NOTEQUAL        reduce using rule 9 (statement -> print_statement .)
    LTE             reduce using rule 9 (statement -> print_statement .)
    GTE             reduce using rule 9 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 9 (statement -> print_statement .)
    LPAREN          reduce using rule 9 (statement -> print_statement .)
    STRING_LITERAL  reduce using rule 9 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 9 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 9 (statement -> print_statement .)
    INT_CONST       reduce using rule 9 (statement -> print_statement .)
    NIL_LITERAL     reduce using rule 9 (statement -> print_statement .)
    LBRACK          reduce using rule 9 (statement -> print_statement .)
    $end            reduce using rule 9 (statement -> print_statement .)
    RCURLY          reduce using rule 9 (statement -> print_statement .)
    CASE            reduce using rule 9 (statement -> print_statement .)
    DEFAULT         reduce using rule 9 (statement -> print_statement .)


state 43

    (230) operator -> MUL .

    AND             reduce using rule 230 (operator -> MUL .)
    DIV             reduce using rule 230 (operator -> MUL .)
    EQUAL           reduce using rule 230 (operator -> MUL .)
    SUB             reduce using rule 230 (operator -> MUL .)
    ADD             reduce using rule 230 (operator -> MUL .)
    EXCLAMATION     reduce using rule 230 (operator -> MUL .)
    MUL             reduce using rule 230 (operator -> MUL .)
    MOD             reduce using rule 230 (operator -> MUL .)
    OR              reduce using rule 230 (operator -> MUL .)
    LT              reduce using rule 230 (operator -> MUL .)
    GT              reduce using rule 230 (operator -> MUL .)
    CARET           reduce using rule 230 (operator -> MUL .)
    TILDE           reduce using rule 230 (operator -> MUL .)
    CONDOP          reduce using rule 230 (operator -> MUL .)
    ANDAND          reduce using rule 230 (operator -> MUL .)
    OROR            reduce using rule 230 (operator -> MUL .)
    NOT             reduce using rule 230 (operator -> MUL .)
    DOT             reduce using rule 230 (operator -> MUL .)
    EQUALEQUAL      reduce using rule 230 (operator -> MUL .)
    NOTEQUAL        reduce using rule 230 (operator -> MUL .)
    LTE             reduce using rule 230 (operator -> MUL .)
    GTE             reduce using rule 230 (operator -> MUL .)
    IDENTIFIER      reduce using rule 230 (operator -> MUL .)
    LPAREN          reduce using rule 230 (operator -> MUL .)
    STRING_LITERAL  reduce using rule 230 (operator -> MUL .)
    CHAR_CONST      reduce using rule 230 (operator -> MUL .)
    FLOAT_CONST     reduce using rule 230 (operator -> MUL .)
    INT_CONST       reduce using rule 230 (operator -> MUL .)
    NIL_LITERAL     reduce using rule 230 (operator -> MUL .)
    LBRACK          reduce using rule 230 (operator -> MUL .)
    PRINT           reduce using rule 230 (operator -> MUL .)
    IMPORT          reduce using rule 230 (operator -> MUL .)
    LET             reduce using rule 230 (operator -> MUL .)
    STRUCT          reduce using rule 230 (operator -> MUL .)
    FOR             reduce using rule 230 (operator -> MUL .)
    WHILE           reduce using rule 230 (operator -> MUL .)
    REPEAT          reduce using rule 230 (operator -> MUL .)
    IF              reduce using rule 230 (operator -> MUL .)
    SWITCH          reduce using rule 230 (operator -> MUL .)
    BREAK           reduce using rule 230 (operator -> MUL .)
    CONTINUE        reduce using rule 230 (operator -> MUL .)
    RETURN          reduce using rule 230 (operator -> MUL .)
    VAR             reduce using rule 230 (operator -> MUL .)
    FUNC            reduce using rule 230 (operator -> MUL .)
    PREFIX          reduce using rule 230 (operator -> MUL .)
    POSTFIX         reduce using rule 230 (operator -> MUL .)
    INFIX           reduce using rule 230 (operator -> MUL .)
    $end            reduce using rule 230 (operator -> MUL .)
    RCURLY          reduce using rule 230 (operator -> MUL .)
    CASE            reduce using rule 230 (operator -> MUL .)
    DEFAULT         reduce using rule 230 (operator -> MUL .)
    COMMA           reduce using rule 230 (operator -> MUL .)
    RPAREN          reduce using rule 230 (operator -> MUL .)


state 44

    (7) statement -> branch_statement .

    PRINT           reduce using rule 7 (statement -> branch_statement .)
    IMPORT          reduce using rule 7 (statement -> branch_statement .)
    LET             reduce using rule 7 (statement -> branch_statement .)
    STRUCT          reduce using rule 7 (statement -> branch_statement .)
    FOR             reduce using rule 7 (statement -> branch_statement .)
    WHILE           reduce using rule 7 (statement -> branch_statement .)
    REPEAT          reduce using rule 7 (statement -> branch_statement .)
    IF              reduce using rule 7 (statement -> branch_statement .)
    SWITCH          reduce using rule 7 (statement -> branch_statement .)
    BREAK           reduce using rule 7 (statement -> branch_statement .)
    CONTINUE        reduce using rule 7 (statement -> branch_statement .)
    RETURN          reduce using rule 7 (statement -> branch_statement .)
    AND             reduce using rule 7 (statement -> branch_statement .)
    VAR             reduce using rule 7 (statement -> branch_statement .)
    FUNC            reduce using rule 7 (statement -> branch_statement .)
    PREFIX          reduce using rule 7 (statement -> branch_statement .)
    POSTFIX         reduce using rule 7 (statement -> branch_statement .)
    INFIX           reduce using rule 7 (statement -> branch_statement .)
    DIV             reduce using rule 7 (statement -> branch_statement .)
    EQUAL           reduce using rule 7 (statement -> branch_statement .)
    SUB             reduce using rule 7 (statement -> branch_statement .)
    ADD             reduce using rule 7 (statement -> branch_statement .)
    EXCLAMATION     reduce using rule 7 (statement -> branch_statement .)
    MUL             reduce using rule 7 (statement -> branch_statement .)
    MOD             reduce using rule 7 (statement -> branch_statement .)
    OR              reduce using rule 7 (statement -> branch_statement .)
    LT              reduce using rule 7 (statement -> branch_statement .)
    GT              reduce using rule 7 (statement -> branch_statement .)
    CARET           reduce using rule 7 (statement -> branch_statement .)
    TILDE           reduce using rule 7 (statement -> branch_statement .)
    CONDOP          reduce using rule 7 (statement -> branch_statement .)
    ANDAND          reduce using rule 7 (statement -> branch_statement .)
    OROR            reduce using rule 7 (statement -> branch_statement .)
    NOT             reduce using rule 7 (statement -> branch_statement .)
    DOT             reduce using rule 7 (statement -> branch_statement .)
    EQUALEQUAL      reduce using rule 7 (statement -> branch_statement .)
    NOTEQUAL        reduce using rule 7 (statement -> branch_statement .)
    LTE             reduce using rule 7 (statement -> branch_statement .)
    GTE             reduce using rule 7 (statement -> branch_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> branch_statement .)
    LPAREN          reduce using rule 7 (statement -> branch_statement .)
    STRING_LITERAL  reduce using rule 7 (statement -> branch_statement .)
    CHAR_CONST      reduce using rule 7 (statement -> branch_statement .)
    FLOAT_CONST     reduce using rule 7 (statement -> branch_statement .)
    INT_CONST       reduce using rule 7 (statement -> branch_statement .)
    NIL_LITERAL     reduce using rule 7 (statement -> branch_statement .)
    LBRACK          reduce using rule 7 (statement -> branch_statement .)
    $end            reduce using rule 7 (statement -> branch_statement .)
    RCURLY          reduce using rule 7 (statement -> branch_statement .)
    CASE            reduce using rule 7 (statement -> branch_statement .)
    DEFAULT         reduce using rule 7 (statement -> branch_statement .)


state 45

    (62) declaration -> variable_declaration .

    PRINT           reduce using rule 62 (declaration -> variable_declaration .)
    IMPORT          reduce using rule 62 (declaration -> variable_declaration .)
    LET             reduce using rule 62 (declaration -> variable_declaration .)
    STRUCT          reduce using rule 62 (declaration -> variable_declaration .)
    FOR             reduce using rule 62 (declaration -> variable_declaration .)
    WHILE           reduce using rule 62 (declaration -> variable_declaration .)
    REPEAT          reduce using rule 62 (declaration -> variable_declaration .)
    IF              reduce using rule 62 (declaration -> variable_declaration .)
    SWITCH          reduce using rule 62 (declaration -> variable_declaration .)
    BREAK           reduce using rule 62 (declaration -> variable_declaration .)
    CONTINUE        reduce using rule 62 (declaration -> variable_declaration .)
    RETURN          reduce using rule 62 (declaration -> variable_declaration .)
    AND             reduce using rule 62 (declaration -> variable_declaration .)
    VAR             reduce using rule 62 (declaration -> variable_declaration .)
    FUNC            reduce using rule 62 (declaration -> variable_declaration .)
    PREFIX          reduce using rule 62 (declaration -> variable_declaration .)
    POSTFIX         reduce using rule 62 (declaration -> variable_declaration .)
    INFIX           reduce using rule 62 (declaration -> variable_declaration .)
    DIV             reduce using rule 62 (declaration -> variable_declaration .)
    EQUAL           reduce using rule 62 (declaration -> variable_declaration .)
    SUB             reduce using rule 62 (declaration -> variable_declaration .)
    ADD             reduce using rule 62 (declaration -> variable_declaration .)
    EXCLAMATION     reduce using rule 62 (declaration -> variable_declaration .)
    MUL             reduce using rule 62 (declaration -> variable_declaration .)
    MOD             reduce using rule 62 (declaration -> variable_declaration .)
    OR              reduce using rule 62 (declaration -> variable_declaration .)
    LT              reduce using rule 62 (declaration -> variable_declaration .)
    GT              reduce using rule 62 (declaration -> variable_declaration .)
    CARET           reduce using rule 62 (declaration -> variable_declaration .)
    TILDE           reduce using rule 62 (declaration -> variable_declaration .)
    CONDOP          reduce using rule 62 (declaration -> variable_declaration .)
    ANDAND          reduce using rule 62 (declaration -> variable_declaration .)
    OROR            reduce using rule 62 (declaration -> variable_declaration .)
    NOT             reduce using rule 62 (declaration -> variable_declaration .)
    DOT             reduce using rule 62 (declaration -> variable_declaration .)
    EQUALEQUAL      reduce using rule 62 (declaration -> variable_declaration .)
    NOTEQUAL        reduce using rule 62 (declaration -> variable_declaration .)
    LTE             reduce using rule 62 (declaration -> variable_declaration .)
    GTE             reduce using rule 62 (declaration -> variable_declaration .)
    IDENTIFIER      reduce using rule 62 (declaration -> variable_declaration .)
    LPAREN          reduce using rule 62 (declaration -> variable_declaration .)
    STRING_LITERAL  reduce using rule 62 (declaration -> variable_declaration .)
    CHAR_CONST      reduce using rule 62 (declaration -> variable_declaration .)
    FLOAT_CONST     reduce using rule 62 (declaration -> variable_declaration .)
    INT_CONST       reduce using rule 62 (declaration -> variable_declaration .)
    NIL_LITERAL     reduce using rule 62 (declaration -> variable_declaration .)
    LBRACK          reduce using rule 62 (declaration -> variable_declaration .)
    $end            reduce using rule 62 (declaration -> variable_declaration .)
    RCURLY          reduce using rule 62 (declaration -> variable_declaration .)
    CASE            reduce using rule 62 (declaration -> variable_declaration .)
    DEFAULT         reduce using rule 62 (declaration -> variable_declaration .)


state 46

    (243) operator -> DOT .

    AND             reduce using rule 243 (operator -> DOT .)
    DIV             reduce using rule 243 (operator -> DOT .)
    EQUAL           reduce using rule 243 (operator -> DOT .)
    SUB             reduce using rule 243 (operator -> DOT .)
    ADD             reduce using rule 243 (operator -> DOT .)
    EXCLAMATION     reduce using rule 243 (operator -> DOT .)
    MUL             reduce using rule 243 (operator -> DOT .)
    MOD             reduce using rule 243 (operator -> DOT .)
    OR              reduce using rule 243 (operator -> DOT .)
    LT              reduce using rule 243 (operator -> DOT .)
    GT              reduce using rule 243 (operator -> DOT .)
    CARET           reduce using rule 243 (operator -> DOT .)
    TILDE           reduce using rule 243 (operator -> DOT .)
    CONDOP          reduce using rule 243 (operator -> DOT .)
    ANDAND          reduce using rule 243 (operator -> DOT .)
    OROR            reduce using rule 243 (operator -> DOT .)
    NOT             reduce using rule 243 (operator -> DOT .)
    DOT             reduce using rule 243 (operator -> DOT .)
    EQUALEQUAL      reduce using rule 243 (operator -> DOT .)
    NOTEQUAL        reduce using rule 243 (operator -> DOT .)
    LTE             reduce using rule 243 (operator -> DOT .)
    GTE             reduce using rule 243 (operator -> DOT .)
    IDENTIFIER      reduce using rule 243 (operator -> DOT .)
    LPAREN          reduce using rule 243 (operator -> DOT .)
    STRING_LITERAL  reduce using rule 243 (operator -> DOT .)
    CHAR_CONST      reduce using rule 243 (operator -> DOT .)
    FLOAT_CONST     reduce using rule 243 (operator -> DOT .)
    INT_CONST       reduce using rule 243 (operator -> DOT .)
    NIL_LITERAL     reduce using rule 243 (operator -> DOT .)
    LBRACK          reduce using rule 243 (operator -> DOT .)
    PRINT           reduce using rule 243 (operator -> DOT .)
    IMPORT          reduce using rule 243 (operator -> DOT .)
    LET             reduce using rule 243 (operator -> DOT .)
    STRUCT          reduce using rule 243 (operator -> DOT .)
    FOR             reduce using rule 243 (operator -> DOT .)
    WHILE           reduce using rule 243 (operator -> DOT .)
    REPEAT          reduce using rule 243 (operator -> DOT .)
    IF              reduce using rule 243 (operator -> DOT .)
    SWITCH          reduce using rule 243 (operator -> DOT .)
    BREAK           reduce using rule 243 (operator -> DOT .)
    CONTINUE        reduce using rule 243 (operator -> DOT .)
    RETURN          reduce using rule 243 (operator -> DOT .)
    VAR             reduce using rule 243 (operator -> DOT .)
    FUNC            reduce using rule 243 (operator -> DOT .)
    PREFIX          reduce using rule 243 (operator -> DOT .)
    POSTFIX         reduce using rule 243 (operator -> DOT .)
    INFIX           reduce using rule 243 (operator -> DOT .)
    $end            reduce using rule 243 (operator -> DOT .)
    RCURLY          reduce using rule 243 (operator -> DOT .)
    CASE            reduce using rule 243 (operator -> DOT .)
    DEFAULT         reduce using rule 243 (operator -> DOT .)
    COMMA           reduce using rule 243 (operator -> DOT .)
    RPAREN          reduce using rule 243 (operator -> DOT .)


state 47

    (253) literal -> INT_CONST .

    DOT             reduce using rule 253 (literal -> INT_CONST .)
    LPAREN          reduce using rule 253 (literal -> INT_CONST .)
    LBRACK          reduce using rule 253 (literal -> INT_CONST .)
    EQUAL           reduce using rule 253 (literal -> INT_CONST .)
    EQUALEQUAL      reduce using rule 253 (literal -> INT_CONST .)
    NOTEQUAL        reduce using rule 253 (literal -> INT_CONST .)
    LTE             reduce using rule 253 (literal -> INT_CONST .)
    GTE             reduce using rule 253 (literal -> INT_CONST .)
    LT              reduce using rule 253 (literal -> INT_CONST .)
    GT              reduce using rule 253 (literal -> INT_CONST .)
    DIV             reduce using rule 253 (literal -> INT_CONST .)
    SUB             reduce using rule 253 (literal -> INT_CONST .)
    ADD             reduce using rule 253 (literal -> INT_CONST .)
    EXCLAMATION     reduce using rule 253 (literal -> INT_CONST .)
    MUL             reduce using rule 253 (literal -> INT_CONST .)
    MOD             reduce using rule 253 (literal -> INT_CONST .)
    AND             reduce using rule 253 (literal -> INT_CONST .)
    OR              reduce using rule 253 (literal -> INT_CONST .)
    CARET           reduce using rule 253 (literal -> INT_CONST .)
    TILDE           reduce using rule 253 (literal -> INT_CONST .)
    CONDOP          reduce using rule 253 (literal -> INT_CONST .)
    ANDAND          reduce using rule 253 (literal -> INT_CONST .)
    OROR            reduce using rule 253 (literal -> INT_CONST .)
    NOT             reduce using rule 253 (literal -> INT_CONST .)
    PRINT           reduce using rule 253 (literal -> INT_CONST .)
    IMPORT          reduce using rule 253 (literal -> INT_CONST .)
    LET             reduce using rule 253 (literal -> INT_CONST .)
    STRUCT          reduce using rule 253 (literal -> INT_CONST .)
    FOR             reduce using rule 253 (literal -> INT_CONST .)
    WHILE           reduce using rule 253 (literal -> INT_CONST .)
    REPEAT          reduce using rule 253 (literal -> INT_CONST .)
    IF              reduce using rule 253 (literal -> INT_CONST .)
    SWITCH          reduce using rule 253 (literal -> INT_CONST .)
    BREAK           reduce using rule 253 (literal -> INT_CONST .)
    CONTINUE        reduce using rule 253 (literal -> INT_CONST .)
    RETURN          reduce using rule 253 (literal -> INT_CONST .)
    VAR             reduce using rule 253 (literal -> INT_CONST .)
    FUNC            reduce using rule 253 (literal -> INT_CONST .)
    PREFIX          reduce using rule 253 (literal -> INT_CONST .)
    POSTFIX         reduce using rule 253 (literal -> INT_CONST .)
    INFIX           reduce using rule 253 (literal -> INT_CONST .)
    IDENTIFIER      reduce using rule 253 (literal -> INT_CONST .)
    STRING_LITERAL  reduce using rule 253 (literal -> INT_CONST .)
    CHAR_CONST      reduce using rule 253 (literal -> INT_CONST .)
    FLOAT_CONST     reduce using rule 253 (literal -> INT_CONST .)
    INT_CONST       reduce using rule 253 (literal -> INT_CONST .)
    NIL_LITERAL     reduce using rule 253 (literal -> INT_CONST .)
    $end            reduce using rule 253 (literal -> INT_CONST .)
    COMMA           reduce using rule 253 (literal -> INT_CONST .)
    SEMICOLON       reduce using rule 253 (literal -> INT_CONST .)
    RBRACK          reduce using rule 253 (literal -> INT_CONST .)
    RCURLY          reduce using rule 253 (literal -> INT_CONST .)
    RPAREN          reduce using rule 253 (literal -> INT_CONST .)
    CASE            reduce using rule 253 (literal -> INT_CONST .)
    DEFAULT         reduce using rule 253 (literal -> INT_CONST .)
    LCURLY          reduce using rule 253 (literal -> INT_CONST .)
    WHERE           reduce using rule 253 (literal -> INT_CONST .)
    COLON           reduce using rule 253 (literal -> INT_CONST .)


state 48

    (17) loop_statement -> while_statement .

    PRINT           reduce using rule 17 (loop_statement -> while_statement .)
    IMPORT          reduce using rule 17 (loop_statement -> while_statement .)
    LET             reduce using rule 17 (loop_statement -> while_statement .)
    STRUCT          reduce using rule 17 (loop_statement -> while_statement .)
    FOR             reduce using rule 17 (loop_statement -> while_statement .)
    WHILE           reduce using rule 17 (loop_statement -> while_statement .)
    REPEAT          reduce using rule 17 (loop_statement -> while_statement .)
    IF              reduce using rule 17 (loop_statement -> while_statement .)
    SWITCH          reduce using rule 17 (loop_statement -> while_statement .)
    BREAK           reduce using rule 17 (loop_statement -> while_statement .)
    CONTINUE        reduce using rule 17 (loop_statement -> while_statement .)
    RETURN          reduce using rule 17 (loop_statement -> while_statement .)
    AND             reduce using rule 17 (loop_statement -> while_statement .)
    VAR             reduce using rule 17 (loop_statement -> while_statement .)
    FUNC            reduce using rule 17 (loop_statement -> while_statement .)
    PREFIX          reduce using rule 17 (loop_statement -> while_statement .)
    POSTFIX         reduce using rule 17 (loop_statement -> while_statement .)
    INFIX           reduce using rule 17 (loop_statement -> while_statement .)
    DIV             reduce using rule 17 (loop_statement -> while_statement .)
    EQUAL           reduce using rule 17 (loop_statement -> while_statement .)
    SUB             reduce using rule 17 (loop_statement -> while_statement .)
    ADD             reduce using rule 17 (loop_statement -> while_statement .)
    EXCLAMATION     reduce using rule 17 (loop_statement -> while_statement .)
    MUL             reduce using rule 17 (loop_statement -> while_statement .)
    MOD             reduce using rule 17 (loop_statement -> while_statement .)
    OR              reduce using rule 17 (loop_statement -> while_statement .)
    LT              reduce using rule 17 (loop_statement -> while_statement .)
    GT              reduce using rule 17 (loop_statement -> while_statement .)
    CARET           reduce using rule 17 (loop_statement -> while_statement .)
    TILDE           reduce using rule 17 (loop_statement -> while_statement .)
    CONDOP          reduce using rule 17 (loop_statement -> while_statement .)
    ANDAND          reduce using rule 17 (loop_statement -> while_statement .)
    OROR            reduce using rule 17 (loop_statement -> while_statement .)
    NOT             reduce using rule 17 (loop_statement -> while_statement .)
    DOT             reduce using rule 17 (loop_statement -> while_statement .)
    EQUALEQUAL      reduce using rule 17 (loop_statement -> while_statement .)
    NOTEQUAL        reduce using rule 17 (loop_statement -> while_statement .)
    LTE             reduce using rule 17 (loop_statement -> while_statement .)
    GTE             reduce using rule 17 (loop_statement -> while_statement .)
    IDENTIFIER      reduce using rule 17 (loop_statement -> while_statement .)
    LPAREN          reduce using rule 17 (loop_statement -> while_statement .)
    STRING_LITERAL  reduce using rule 17 (loop_statement -> while_statement .)
    CHAR_CONST      reduce using rule 17 (loop_statement -> while_statement .)
    FLOAT_CONST     reduce using rule 17 (loop_statement -> while_statement .)
    INT_CONST       reduce using rule 17 (loop_statement -> while_statement .)
    NIL_LITERAL     reduce using rule 17 (loop_statement -> while_statement .)
    LBRACK          reduce using rule 17 (loop_statement -> while_statement .)
    $end            reduce using rule 17 (loop_statement -> while_statement .)
    RCURLY          reduce using rule 17 (loop_statement -> while_statement .)
    CASE            reduce using rule 17 (loop_statement -> while_statement .)
    DEFAULT         reduce using rule 17 (loop_statement -> while_statement .)


state 49

    (0) S' -> start .



state 50

    (39) switch_statement -> SWITCH . expression LCURLY switch_cases RCURLY
    (40) switch_statement -> SWITCH . expression LCURLY RCURLY
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    literal                        shift and go to state 82
    postfix_expression             shift and go to state 76
    array_literal                  shift and go to state 83
    declaration_identifier         shift and go to state 23
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 130
    parenthesized_expression       shift and go to state 53

state 51

    (2) statements -> statement . statements
    (2) statements -> . statement statements
    (3) statements -> .
    (4) statement -> . expression
    (5) statement -> . declaration
    (6) statement -> . loop_statement
    (7) statement -> . branch_statement
    (8) statement -> . control_transfer_statement
    (9) statement -> . print_statement
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (60) declaration -> . import_declaration
    (61) declaration -> . constant_declaration
    (62) declaration -> . variable_declaration
    (63) declaration -> . function_declaration
    (64) declaration -> . struct_declaration
    (65) declaration -> . operator_declaration
    (16) loop_statement -> . for_statement
    (17) loop_statement -> . while_statement
    (18) loop_statement -> . repeat_while_statement
    (33) branch_statement -> . if_statement
    (34) branch_statement -> . switch_statement
    (53) control_transfer_statement -> . break_statement
    (54) control_transfer_statement -> . continue_statement
    (55) control_transfer_statement -> . return_statement
    (10) print_statement -> . PRINT LPAREN print_arg_list RPAREN
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (70) import_declaration -> . IMPORT import_kind import_path
    (71) import_declaration -> . IMPORT import_path
    (81) constant_declaration -> . LET pattern_initializer_list
    (88) variable_declaration -> . variable_declaration_head variable_name type_annotation code_block
    (89) variable_declaration -> . variable_declaration_head variable_name type_annotation initializer
    (90) variable_declaration -> . variable_declaration_head pattern_initializer_list
    (93) function_declaration -> . function_head function_name function_signature function_body
    (94) function_declaration -> . function_head function_name function_signature
    (120) struct_declaration -> . STRUCT struct_name struct_body
    (126) operator_declaration -> . prefix_operator_declaration
    (127) operator_declaration -> . postfix_operator_declaration
    (128) operator_declaration -> . infix_operator_declaration
    (19) for_statement -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block
    (22) while_statement -> . WHILE condition_list code_block
    (32) repeat_while_statement -> . REPEAT code_block WHILE expression
    (35) if_statement -> . IF condition_list code_block else_clause
    (36) if_statement -> . IF condition_list code_block
    (39) switch_statement -> . SWITCH expression LCURLY switch_cases RCURLY
    (40) switch_statement -> . SWITCH expression LCURLY RCURLY
    (56) break_statement -> . BREAK
    (57) continue_statement -> . CONTINUE
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (91) variable_declaration_head -> . VAR
    (95) function_head -> . FUNC
    (129) prefix_operator_declaration -> . PREFIX OPERATOR operator
    (130) postfix_operator_declaration -> . POSTFIX OPERATOR operator
    (131) infix_operator_declaration -> . INFIX OPERATOR operator
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    $end            reduce using rule 3 (statements -> .)
    RCURLY          reduce using rule 3 (statements -> .)
    CASE            reduce using rule 3 (statements -> .)
    DEFAULT         reduce using rule 3 (statements -> .)
    PRINT           shift and go to state 20
    IMPORT          shift and go to state 8
    LET             shift and go to state 68
    STRUCT          shift and go to state 86
    FOR             shift and go to state 25
    WHILE           shift and go to state 41
    REPEAT          shift and go to state 24
    IF              shift and go to state 85
    SWITCH          shift and go to state 50
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 32
    RETURN          shift and go to state 16
    AND             shift and go to state 27
    VAR             shift and go to state 12
    FUNC            shift and go to state 26
    PREFIX          shift and go to state 71
    POSTFIX         shift and go to state 4
    INFIX           shift and go to state 34
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    statements                     shift and go to state 131
    loop_statement                 shift and go to state 3
    break_statement                shift and go to state 17
    operator                       shift and go to state 18
    variable_declaration_head      shift and go to state 19
    prefix_operator                shift and go to state 6
    print_statement                shift and go to state 42
    branch_statement               shift and go to state 44
    variable_declaration           shift and go to state 45
    switch_statement               shift and go to state 21
    prefix_operator_declaration    shift and go to state 55
    function_head                  shift and go to state 75
    postfix_expression             shift and go to state 76
    return_statement               shift and go to state 77
    while_statement                shift and go to state 48
    continue_statement             shift and go to state 22
    statement                      shift and go to state 51
    declaration_identifier         shift and go to state 23
    constant_declaration           shift and go to state 80
    if_statement                   shift and go to state 81
    for_statement                  shift and go to state 9
    postfix_operator_declaration   shift and go to state 54
    struct_declaration             shift and go to state 11
    literal                        shift and go to state 82
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    declaration                    shift and go to state 59
    import_declaration             shift and go to state 5
    literal_expression             shift and go to state 28
    operator_declaration           shift and go to state 60
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    function_declaration           shift and go to state 29
    conditional_operator           shift and go to state 79
    in_out_expression              shift and go to state 30
    infix_operator_declaration     shift and go to state 13
    control_transfer_statement     shift and go to state 87
    repeat_while_statement         shift and go to state 69
    expression                     shift and go to state 35

state 52

    (244) conditional_operator -> EQUALEQUAL .

    IDENTIFIER      reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    LPAREN          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    STRING_LITERAL  reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    CHAR_CONST      reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    FLOAT_CONST     reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    INT_CONST       reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    NIL_LITERAL     reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    LBRACK          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    COMMA           reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    RPAREN          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    AND             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    DIV             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    EQUAL           reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    SUB             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    ADD             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    EXCLAMATION     reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    MUL             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    MOD             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    OR              reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    LT              reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    GT              reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    CARET           reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    TILDE           reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    CONDOP          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    ANDAND          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    OROR            reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    NOT             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    DOT             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    EQUALEQUAL      reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    NOTEQUAL        reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    LTE             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    GTE             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    PRINT           reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    IMPORT          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    LET             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    STRUCT          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    FOR             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    WHILE           reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    REPEAT          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    IF              reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    SWITCH          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    BREAK           reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    CONTINUE        reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    RETURN          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    VAR             reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    FUNC            reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    PREFIX          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    POSTFIX         reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    INFIX           reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    $end            reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    RCURLY          reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    CASE            reduce using rule 244 (conditional_operator -> EQUALEQUAL .)
    DEFAULT         reduce using rule 244 (conditional_operator -> EQUALEQUAL .)


state 53

    (160) primary_expression -> parenthesized_expression .

    DOT             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    LPAREN          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    LBRACK          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    EQUAL           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    EQUALEQUAL      reduce using rule 160 (primary_expression -> parenthesized_expression .)
    NOTEQUAL        reduce using rule 160 (primary_expression -> parenthesized_expression .)
    LTE             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    GTE             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    LT              reduce using rule 160 (primary_expression -> parenthesized_expression .)
    GT              reduce using rule 160 (primary_expression -> parenthesized_expression .)
    DIV             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    SUB             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    ADD             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    EXCLAMATION     reduce using rule 160 (primary_expression -> parenthesized_expression .)
    MUL             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    MOD             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    AND             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    OR              reduce using rule 160 (primary_expression -> parenthesized_expression .)
    CARET           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    TILDE           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    CONDOP          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    ANDAND          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    OROR            reduce using rule 160 (primary_expression -> parenthesized_expression .)
    NOT             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    COMMA           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    SEMICOLON       reduce using rule 160 (primary_expression -> parenthesized_expression .)
    PRINT           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    IMPORT          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    LET             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    STRUCT          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    FOR             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    WHILE           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    REPEAT          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    IF              reduce using rule 160 (primary_expression -> parenthesized_expression .)
    SWITCH          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    BREAK           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    CONTINUE        reduce using rule 160 (primary_expression -> parenthesized_expression .)
    RETURN          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    VAR             reduce using rule 160 (primary_expression -> parenthesized_expression .)
    FUNC            reduce using rule 160 (primary_expression -> parenthesized_expression .)
    PREFIX          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    POSTFIX         reduce using rule 160 (primary_expression -> parenthesized_expression .)
    INFIX           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    IDENTIFIER      reduce using rule 160 (primary_expression -> parenthesized_expression .)
    STRING_LITERAL  reduce using rule 160 (primary_expression -> parenthesized_expression .)
    CHAR_CONST      reduce using rule 160 (primary_expression -> parenthesized_expression .)
    FLOAT_CONST     reduce using rule 160 (primary_expression -> parenthesized_expression .)
    INT_CONST       reduce using rule 160 (primary_expression -> parenthesized_expression .)
    NIL_LITERAL     reduce using rule 160 (primary_expression -> parenthesized_expression .)
    $end            reduce using rule 160 (primary_expression -> parenthesized_expression .)
    RPAREN          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    WHERE           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    COLON           reduce using rule 160 (primary_expression -> parenthesized_expression .)
    RCURLY          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    CASE            reduce using rule 160 (primary_expression -> parenthesized_expression .)
    DEFAULT         reduce using rule 160 (primary_expression -> parenthesized_expression .)
    RBRACK          reduce using rule 160 (primary_expression -> parenthesized_expression .)
    LCURLY          reduce using rule 160 (primary_expression -> parenthesized_expression .)


state 54

    (127) operator_declaration -> postfix_operator_declaration .

    IMPORT          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    LET             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    STRUCT          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    VAR             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    FUNC            reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    PREFIX          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    POSTFIX         reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    INFIX           reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    RCURLY          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    PRINT           reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    FOR             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    WHILE           reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    REPEAT          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    IF              reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    SWITCH          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    BREAK           reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    CONTINUE        reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    RETURN          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    AND             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    DIV             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    EQUAL           reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    SUB             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    ADD             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    EXCLAMATION     reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    MUL             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    MOD             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    OR              reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    LT              reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    GT              reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    CARET           reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    TILDE           reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    CONDOP          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    ANDAND          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    OROR            reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    NOT             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    DOT             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    EQUALEQUAL      reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    NOTEQUAL        reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    LTE             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    GTE             reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    IDENTIFIER      reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    LPAREN          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    STRING_LITERAL  reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    CHAR_CONST      reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    FLOAT_CONST     reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    INT_CONST       reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    NIL_LITERAL     reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    LBRACK          reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    CASE            reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    DEFAULT         reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)
    $end            reduce using rule 127 (operator_declaration -> postfix_operator_declaration .)


state 55

    (126) operator_declaration -> prefix_operator_declaration .

    IMPORT          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    LET             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    STRUCT          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    VAR             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    FUNC            reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    PREFIX          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    POSTFIX         reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    INFIX           reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    RCURLY          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    PRINT           reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    FOR             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    WHILE           reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    REPEAT          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    IF              reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    SWITCH          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    BREAK           reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    CONTINUE        reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    RETURN          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    AND             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    DIV             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    EQUAL           reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    SUB             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    ADD             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    EXCLAMATION     reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    MUL             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    MOD             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    OR              reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    LT              reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    GT              reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    CARET           reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    TILDE           reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    CONDOP          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    ANDAND          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    OROR            reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    NOT             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    DOT             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    EQUALEQUAL      reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    NOTEQUAL        reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    LTE             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    GTE             reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    IDENTIFIER      reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    LPAREN          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    STRING_LITERAL  reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    CHAR_CONST      reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    FLOAT_CONST     reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    INT_CONST       reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    NIL_LITERAL     reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    LBRACK          reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    CASE            reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    DEFAULT         reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)
    $end            reduce using rule 126 (operator_declaration -> prefix_operator_declaration .)


state 56

    (237) operator -> TILDE .

    AND             reduce using rule 237 (operator -> TILDE .)
    DIV             reduce using rule 237 (operator -> TILDE .)
    EQUAL           reduce using rule 237 (operator -> TILDE .)
    SUB             reduce using rule 237 (operator -> TILDE .)
    ADD             reduce using rule 237 (operator -> TILDE .)
    EXCLAMATION     reduce using rule 237 (operator -> TILDE .)
    MUL             reduce using rule 237 (operator -> TILDE .)
    MOD             reduce using rule 237 (operator -> TILDE .)
    OR              reduce using rule 237 (operator -> TILDE .)
    LT              reduce using rule 237 (operator -> TILDE .)
    GT              reduce using rule 237 (operator -> TILDE .)
    CARET           reduce using rule 237 (operator -> TILDE .)
    TILDE           reduce using rule 237 (operator -> TILDE .)
    CONDOP          reduce using rule 237 (operator -> TILDE .)
    ANDAND          reduce using rule 237 (operator -> TILDE .)
    OROR            reduce using rule 237 (operator -> TILDE .)
    NOT             reduce using rule 237 (operator -> TILDE .)
    DOT             reduce using rule 237 (operator -> TILDE .)
    EQUALEQUAL      reduce using rule 237 (operator -> TILDE .)
    NOTEQUAL        reduce using rule 237 (operator -> TILDE .)
    LTE             reduce using rule 237 (operator -> TILDE .)
    GTE             reduce using rule 237 (operator -> TILDE .)
    IDENTIFIER      reduce using rule 237 (operator -> TILDE .)
    LPAREN          reduce using rule 237 (operator -> TILDE .)
    STRING_LITERAL  reduce using rule 237 (operator -> TILDE .)
    CHAR_CONST      reduce using rule 237 (operator -> TILDE .)
    FLOAT_CONST     reduce using rule 237 (operator -> TILDE .)
    INT_CONST       reduce using rule 237 (operator -> TILDE .)
    NIL_LITERAL     reduce using rule 237 (operator -> TILDE .)
    LBRACK          reduce using rule 237 (operator -> TILDE .)
    PRINT           reduce using rule 237 (operator -> TILDE .)
    IMPORT          reduce using rule 237 (operator -> TILDE .)
    LET             reduce using rule 237 (operator -> TILDE .)
    STRUCT          reduce using rule 237 (operator -> TILDE .)
    FOR             reduce using rule 237 (operator -> TILDE .)
    WHILE           reduce using rule 237 (operator -> TILDE .)
    REPEAT          reduce using rule 237 (operator -> TILDE .)
    IF              reduce using rule 237 (operator -> TILDE .)
    SWITCH          reduce using rule 237 (operator -> TILDE .)
    BREAK           reduce using rule 237 (operator -> TILDE .)
    CONTINUE        reduce using rule 237 (operator -> TILDE .)
    RETURN          reduce using rule 237 (operator -> TILDE .)
    VAR             reduce using rule 237 (operator -> TILDE .)
    FUNC            reduce using rule 237 (operator -> TILDE .)
    PREFIX          reduce using rule 237 (operator -> TILDE .)
    POSTFIX         reduce using rule 237 (operator -> TILDE .)
    INFIX           reduce using rule 237 (operator -> TILDE .)
    $end            reduce using rule 237 (operator -> TILDE .)
    RCURLY          reduce using rule 237 (operator -> TILDE .)
    CASE            reduce using rule 237 (operator -> TILDE .)
    DEFAULT         reduce using rule 237 (operator -> TILDE .)
    COMMA           reduce using rule 237 (operator -> TILDE .)
    RPAREN          reduce using rule 237 (operator -> TILDE .)


state 57

    (228) operator -> ADD .

    AND             reduce using rule 228 (operator -> ADD .)
    DIV             reduce using rule 228 (operator -> ADD .)
    EQUAL           reduce using rule 228 (operator -> ADD .)
    SUB             reduce using rule 228 (operator -> ADD .)
    ADD             reduce using rule 228 (operator -> ADD .)
    EXCLAMATION     reduce using rule 228 (operator -> ADD .)
    MUL             reduce using rule 228 (operator -> ADD .)
    MOD             reduce using rule 228 (operator -> ADD .)
    OR              reduce using rule 228 (operator -> ADD .)
    LT              reduce using rule 228 (operator -> ADD .)
    GT              reduce using rule 228 (operator -> ADD .)
    CARET           reduce using rule 228 (operator -> ADD .)
    TILDE           reduce using rule 228 (operator -> ADD .)
    CONDOP          reduce using rule 228 (operator -> ADD .)
    ANDAND          reduce using rule 228 (operator -> ADD .)
    OROR            reduce using rule 228 (operator -> ADD .)
    NOT             reduce using rule 228 (operator -> ADD .)
    DOT             reduce using rule 228 (operator -> ADD .)
    EQUALEQUAL      reduce using rule 228 (operator -> ADD .)
    NOTEQUAL        reduce using rule 228 (operator -> ADD .)
    LTE             reduce using rule 228 (operator -> ADD .)
    GTE             reduce using rule 228 (operator -> ADD .)
    IDENTIFIER      reduce using rule 228 (operator -> ADD .)
    LPAREN          reduce using rule 228 (operator -> ADD .)
    STRING_LITERAL  reduce using rule 228 (operator -> ADD .)
    CHAR_CONST      reduce using rule 228 (operator -> ADD .)
    FLOAT_CONST     reduce using rule 228 (operator -> ADD .)
    INT_CONST       reduce using rule 228 (operator -> ADD .)
    NIL_LITERAL     reduce using rule 228 (operator -> ADD .)
    LBRACK          reduce using rule 228 (operator -> ADD .)
    PRINT           reduce using rule 228 (operator -> ADD .)
    IMPORT          reduce using rule 228 (operator -> ADD .)
    LET             reduce using rule 228 (operator -> ADD .)
    STRUCT          reduce using rule 228 (operator -> ADD .)
    FOR             reduce using rule 228 (operator -> ADD .)
    WHILE           reduce using rule 228 (operator -> ADD .)
    REPEAT          reduce using rule 228 (operator -> ADD .)
    IF              reduce using rule 228 (operator -> ADD .)
    SWITCH          reduce using rule 228 (operator -> ADD .)
    BREAK           reduce using rule 228 (operator -> ADD .)
    CONTINUE        reduce using rule 228 (operator -> ADD .)
    RETURN          reduce using rule 228 (operator -> ADD .)
    VAR             reduce using rule 228 (operator -> ADD .)
    FUNC            reduce using rule 228 (operator -> ADD .)
    PREFIX          reduce using rule 228 (operator -> ADD .)
    POSTFIX         reduce using rule 228 (operator -> ADD .)
    INFIX           reduce using rule 228 (operator -> ADD .)
    $end            reduce using rule 228 (operator -> ADD .)
    RCURLY          reduce using rule 228 (operator -> ADD .)
    CASE            reduce using rule 228 (operator -> ADD .)
    DEFAULT         reduce using rule 228 (operator -> ADD .)
    COMMA           reduce using rule 228 (operator -> ADD .)
    RPAREN          reduce using rule 228 (operator -> ADD .)


state 58

    (170) postfix_expression -> primary_expression .

    DOT             reduce using rule 170 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 170 (postfix_expression -> primary_expression .)
    LBRACK          reduce using rule 170 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 170 (postfix_expression -> primary_expression .)
    EQUALEQUAL      reduce using rule 170 (postfix_expression -> primary_expression .)
    NOTEQUAL        reduce using rule 170 (postfix_expression -> primary_expression .)
    LTE             reduce using rule 170 (postfix_expression -> primary_expression .)
    GTE             reduce using rule 170 (postfix_expression -> primary_expression .)
    LT              reduce using rule 170 (postfix_expression -> primary_expression .)
    GT              reduce using rule 170 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 170 (postfix_expression -> primary_expression .)
    SUB             reduce using rule 170 (postfix_expression -> primary_expression .)
    ADD             reduce using rule 170 (postfix_expression -> primary_expression .)
    EXCLAMATION     reduce using rule 170 (postfix_expression -> primary_expression .)
    MUL             reduce using rule 170 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 170 (postfix_expression -> primary_expression .)
    AND             reduce using rule 170 (postfix_expression -> primary_expression .)
    OR              reduce using rule 170 (postfix_expression -> primary_expression .)
    CARET           reduce using rule 170 (postfix_expression -> primary_expression .)
    TILDE           reduce using rule 170 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 170 (postfix_expression -> primary_expression .)
    ANDAND          reduce using rule 170 (postfix_expression -> primary_expression .)
    OROR            reduce using rule 170 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 170 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 170 (postfix_expression -> primary_expression .)
    PRINT           reduce using rule 170 (postfix_expression -> primary_expression .)
    IMPORT          reduce using rule 170 (postfix_expression -> primary_expression .)
    LET             reduce using rule 170 (postfix_expression -> primary_expression .)
    STRUCT          reduce using rule 170 (postfix_expression -> primary_expression .)
    FOR             reduce using rule 170 (postfix_expression -> primary_expression .)
    WHILE           reduce using rule 170 (postfix_expression -> primary_expression .)
    REPEAT          reduce using rule 170 (postfix_expression -> primary_expression .)
    IF              reduce using rule 170 (postfix_expression -> primary_expression .)
    SWITCH          reduce using rule 170 (postfix_expression -> primary_expression .)
    BREAK           reduce using rule 170 (postfix_expression -> primary_expression .)
    CONTINUE        reduce using rule 170 (postfix_expression -> primary_expression .)
    RETURN          reduce using rule 170 (postfix_expression -> primary_expression .)
    VAR             reduce using rule 170 (postfix_expression -> primary_expression .)
    FUNC            reduce using rule 170 (postfix_expression -> primary_expression .)
    PREFIX          reduce using rule 170 (postfix_expression -> primary_expression .)
    POSTFIX         reduce using rule 170 (postfix_expression -> primary_expression .)
    INFIX           reduce using rule 170 (postfix_expression -> primary_expression .)
    IDENTIFIER      reduce using rule 170 (postfix_expression -> primary_expression .)
    STRING_LITERAL  reduce using rule 170 (postfix_expression -> primary_expression .)
    CHAR_CONST      reduce using rule 170 (postfix_expression -> primary_expression .)
    FLOAT_CONST     reduce using rule 170 (postfix_expression -> primary_expression .)
    INT_CONST       reduce using rule 170 (postfix_expression -> primary_expression .)
    NIL_LITERAL     reduce using rule 170 (postfix_expression -> primary_expression .)
    $end            reduce using rule 170 (postfix_expression -> primary_expression .)
    RCURLY          reduce using rule 170 (postfix_expression -> primary_expression .)
    CASE            reduce using rule 170 (postfix_expression -> primary_expression .)
    DEFAULT         reduce using rule 170 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 170 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 170 (postfix_expression -> primary_expression .)
    RBRACK          reduce using rule 170 (postfix_expression -> primary_expression .)
    LCURLY          reduce using rule 170 (postfix_expression -> primary_expression .)
    WHERE           reduce using rule 170 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 170 (postfix_expression -> primary_expression .)


state 59

    (5) statement -> declaration .

    PRINT           reduce using rule 5 (statement -> declaration .)
    IMPORT          reduce using rule 5 (statement -> declaration .)
    LET             reduce using rule 5 (statement -> declaration .)
    STRUCT          reduce using rule 5 (statement -> declaration .)
    FOR             reduce using rule 5 (statement -> declaration .)
    WHILE           reduce using rule 5 (statement -> declaration .)
    REPEAT          reduce using rule 5 (statement -> declaration .)
    IF              reduce using rule 5 (statement -> declaration .)
    SWITCH          reduce using rule 5 (statement -> declaration .)
    BREAK           reduce using rule 5 (statement -> declaration .)
    CONTINUE        reduce using rule 5 (statement -> declaration .)
    RETURN          reduce using rule 5 (statement -> declaration .)
    AND             reduce using rule 5 (statement -> declaration .)
    VAR             reduce using rule 5 (statement -> declaration .)
    FUNC            reduce using rule 5 (statement -> declaration .)
    PREFIX          reduce using rule 5 (statement -> declaration .)
    POSTFIX         reduce using rule 5 (statement -> declaration .)
    INFIX           reduce using rule 5 (statement -> declaration .)
    DIV             reduce using rule 5 (statement -> declaration .)
    EQUAL           reduce using rule 5 (statement -> declaration .)
    SUB             reduce using rule 5 (statement -> declaration .)
    ADD             reduce using rule 5 (statement -> declaration .)
    EXCLAMATION     reduce using rule 5 (statement -> declaration .)
    MUL             reduce using rule 5 (statement -> declaration .)
    MOD             reduce using rule 5 (statement -> declaration .)
    OR              reduce using rule 5 (statement -> declaration .)
    LT              reduce using rule 5 (statement -> declaration .)
    GT              reduce using rule 5 (statement -> declaration .)
    CARET           reduce using rule 5 (statement -> declaration .)
    TILDE           reduce using rule 5 (statement -> declaration .)
    CONDOP          reduce using rule 5 (statement -> declaration .)
    ANDAND          reduce using rule 5 (statement -> declaration .)
    OROR            reduce using rule 5 (statement -> declaration .)
    NOT             reduce using rule 5 (statement -> declaration .)
    DOT             reduce using rule 5 (statement -> declaration .)
    EQUALEQUAL      reduce using rule 5 (statement -> declaration .)
    NOTEQUAL        reduce using rule 5 (statement -> declaration .)
    LTE             reduce using rule 5 (statement -> declaration .)
    GTE             reduce using rule 5 (statement -> declaration .)
    IDENTIFIER      reduce using rule 5 (statement -> declaration .)
    LPAREN          reduce using rule 5 (statement -> declaration .)
    STRING_LITERAL  reduce using rule 5 (statement -> declaration .)
    CHAR_CONST      reduce using rule 5 (statement -> declaration .)
    FLOAT_CONST     reduce using rule 5 (statement -> declaration .)
    INT_CONST       reduce using rule 5 (statement -> declaration .)
    NIL_LITERAL     reduce using rule 5 (statement -> declaration .)
    LBRACK          reduce using rule 5 (statement -> declaration .)
    $end            reduce using rule 5 (statement -> declaration .)
    RCURLY          reduce using rule 5 (statement -> declaration .)
    CASE            reduce using rule 5 (statement -> declaration .)
    DEFAULT         reduce using rule 5 (statement -> declaration .)


state 60

    (65) declaration -> operator_declaration .

    PRINT           reduce using rule 65 (declaration -> operator_declaration .)
    IMPORT          reduce using rule 65 (declaration -> operator_declaration .)
    LET             reduce using rule 65 (declaration -> operator_declaration .)
    STRUCT          reduce using rule 65 (declaration -> operator_declaration .)
    FOR             reduce using rule 65 (declaration -> operator_declaration .)
    WHILE           reduce using rule 65 (declaration -> operator_declaration .)
    REPEAT          reduce using rule 65 (declaration -> operator_declaration .)
    IF              reduce using rule 65 (declaration -> operator_declaration .)
    SWITCH          reduce using rule 65 (declaration -> operator_declaration .)
    BREAK           reduce using rule 65 (declaration -> operator_declaration .)
    CONTINUE        reduce using rule 65 (declaration -> operator_declaration .)
    RETURN          reduce using rule 65 (declaration -> operator_declaration .)
    AND             reduce using rule 65 (declaration -> operator_declaration .)
    VAR             reduce using rule 65 (declaration -> operator_declaration .)
    FUNC            reduce using rule 65 (declaration -> operator_declaration .)
    PREFIX          reduce using rule 65 (declaration -> operator_declaration .)
    POSTFIX         reduce using rule 65 (declaration -> operator_declaration .)
    INFIX           reduce using rule 65 (declaration -> operator_declaration .)
    DIV             reduce using rule 65 (declaration -> operator_declaration .)
    EQUAL           reduce using rule 65 (declaration -> operator_declaration .)
    SUB             reduce using rule 65 (declaration -> operator_declaration .)
    ADD             reduce using rule 65 (declaration -> operator_declaration .)
    EXCLAMATION     reduce using rule 65 (declaration -> operator_declaration .)
    MUL             reduce using rule 65 (declaration -> operator_declaration .)
    MOD             reduce using rule 65 (declaration -> operator_declaration .)
    OR              reduce using rule 65 (declaration -> operator_declaration .)
    LT              reduce using rule 65 (declaration -> operator_declaration .)
    GT              reduce using rule 65 (declaration -> operator_declaration .)
    CARET           reduce using rule 65 (declaration -> operator_declaration .)
    TILDE           reduce using rule 65 (declaration -> operator_declaration .)
    CONDOP          reduce using rule 65 (declaration -> operator_declaration .)
    ANDAND          reduce using rule 65 (declaration -> operator_declaration .)
    OROR            reduce using rule 65 (declaration -> operator_declaration .)
    NOT             reduce using rule 65 (declaration -> operator_declaration .)
    DOT             reduce using rule 65 (declaration -> operator_declaration .)
    EQUALEQUAL      reduce using rule 65 (declaration -> operator_declaration .)
    NOTEQUAL        reduce using rule 65 (declaration -> operator_declaration .)
    LTE             reduce using rule 65 (declaration -> operator_declaration .)
    GTE             reduce using rule 65 (declaration -> operator_declaration .)
    IDENTIFIER      reduce using rule 65 (declaration -> operator_declaration .)
    LPAREN          reduce using rule 65 (declaration -> operator_declaration .)
    STRING_LITERAL  reduce using rule 65 (declaration -> operator_declaration .)
    CHAR_CONST      reduce using rule 65 (declaration -> operator_declaration .)
    FLOAT_CONST     reduce using rule 65 (declaration -> operator_declaration .)
    INT_CONST       reduce using rule 65 (declaration -> operator_declaration .)
    NIL_LITERAL     reduce using rule 65 (declaration -> operator_declaration .)
    LBRACK          reduce using rule 65 (declaration -> operator_declaration .)
    $end            reduce using rule 65 (declaration -> operator_declaration .)
    RCURLY          reduce using rule 65 (declaration -> operator_declaration .)
    CASE            reduce using rule 65 (declaration -> operator_declaration .)
    DEFAULT         reduce using rule 65 (declaration -> operator_declaration .)


state 61

    (250) literal -> STRING_LITERAL .

    DOT             reduce using rule 250 (literal -> STRING_LITERAL .)
    LPAREN          reduce using rule 250 (literal -> STRING_LITERAL .)
    LBRACK          reduce using rule 250 (literal -> STRING_LITERAL .)
    EQUAL           reduce using rule 250 (literal -> STRING_LITERAL .)
    EQUALEQUAL      reduce using rule 250 (literal -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 250 (literal -> STRING_LITERAL .)
    LTE             reduce using rule 250 (literal -> STRING_LITERAL .)
    GTE             reduce using rule 250 (literal -> STRING_LITERAL .)
    LT              reduce using rule 250 (literal -> STRING_LITERAL .)
    GT              reduce using rule 250 (literal -> STRING_LITERAL .)
    DIV             reduce using rule 250 (literal -> STRING_LITERAL .)
    SUB             reduce using rule 250 (literal -> STRING_LITERAL .)
    ADD             reduce using rule 250 (literal -> STRING_LITERAL .)
    EXCLAMATION     reduce using rule 250 (literal -> STRING_LITERAL .)
    MUL             reduce using rule 250 (literal -> STRING_LITERAL .)
    MOD             reduce using rule 250 (literal -> STRING_LITERAL .)
    AND             reduce using rule 250 (literal -> STRING_LITERAL .)
    OR              reduce using rule 250 (literal -> STRING_LITERAL .)
    CARET           reduce using rule 250 (literal -> STRING_LITERAL .)
    TILDE           reduce using rule 250 (literal -> STRING_LITERAL .)
    CONDOP          reduce using rule 250 (literal -> STRING_LITERAL .)
    ANDAND          reduce using rule 250 (literal -> STRING_LITERAL .)
    OROR            reduce using rule 250 (literal -> STRING_LITERAL .)
    NOT             reduce using rule 250 (literal -> STRING_LITERAL .)
    PRINT           reduce using rule 250 (literal -> STRING_LITERAL .)
    IMPORT          reduce using rule 250 (literal -> STRING_LITERAL .)
    LET             reduce using rule 250 (literal -> STRING_LITERAL .)
    STRUCT          reduce using rule 250 (literal -> STRING_LITERAL .)
    FOR             reduce using rule 250 (literal -> STRING_LITERAL .)
    WHILE           reduce using rule 250 (literal -> STRING_LITERAL .)
    REPEAT          reduce using rule 250 (literal -> STRING_LITERAL .)
    IF              reduce using rule 250 (literal -> STRING_LITERAL .)
    SWITCH          reduce using rule 250 (literal -> STRING_LITERAL .)
    BREAK           reduce using rule 250 (literal -> STRING_LITERAL .)
    CONTINUE        reduce using rule 250 (literal -> STRING_LITERAL .)
    RETURN          reduce using rule 250 (literal -> STRING_LITERAL .)
    VAR             reduce using rule 250 (literal -> STRING_LITERAL .)
    FUNC            reduce using rule 250 (literal -> STRING_LITERAL .)
    PREFIX          reduce using rule 250 (literal -> STRING_LITERAL .)
    POSTFIX         reduce using rule 250 (literal -> STRING_LITERAL .)
    INFIX           reduce using rule 250 (literal -> STRING_LITERAL .)
    IDENTIFIER      reduce using rule 250 (literal -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 250 (literal -> STRING_LITERAL .)
    CHAR_CONST      reduce using rule 250 (literal -> STRING_LITERAL .)
    FLOAT_CONST     reduce using rule 250 (literal -> STRING_LITERAL .)
    INT_CONST       reduce using rule 250 (literal -> STRING_LITERAL .)
    NIL_LITERAL     reduce using rule 250 (literal -> STRING_LITERAL .)
    $end            reduce using rule 250 (literal -> STRING_LITERAL .)
    COMMA           reduce using rule 250 (literal -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 250 (literal -> STRING_LITERAL .)
    RBRACK          reduce using rule 250 (literal -> STRING_LITERAL .)
    RCURLY          reduce using rule 250 (literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 250 (literal -> STRING_LITERAL .)
    CASE            reduce using rule 250 (literal -> STRING_LITERAL .)
    DEFAULT         reduce using rule 250 (literal -> STRING_LITERAL .)
    LCURLY          reduce using rule 250 (literal -> STRING_LITERAL .)
    WHERE           reduce using rule 250 (literal -> STRING_LITERAL .)
    COLON           reduce using rule 250 (literal -> STRING_LITERAL .)


state 62

    (240) operator -> ANDAND .

    AND             reduce using rule 240 (operator -> ANDAND .)
    DIV             reduce using rule 240 (operator -> ANDAND .)
    EQUAL           reduce using rule 240 (operator -> ANDAND .)
    SUB             reduce using rule 240 (operator -> ANDAND .)
    ADD             reduce using rule 240 (operator -> ANDAND .)
    EXCLAMATION     reduce using rule 240 (operator -> ANDAND .)
    MUL             reduce using rule 240 (operator -> ANDAND .)
    MOD             reduce using rule 240 (operator -> ANDAND .)
    OR              reduce using rule 240 (operator -> ANDAND .)
    LT              reduce using rule 240 (operator -> ANDAND .)
    GT              reduce using rule 240 (operator -> ANDAND .)
    CARET           reduce using rule 240 (operator -> ANDAND .)
    TILDE           reduce using rule 240 (operator -> ANDAND .)
    CONDOP          reduce using rule 240 (operator -> ANDAND .)
    ANDAND          reduce using rule 240 (operator -> ANDAND .)
    OROR            reduce using rule 240 (operator -> ANDAND .)
    NOT             reduce using rule 240 (operator -> ANDAND .)
    DOT             reduce using rule 240 (operator -> ANDAND .)
    EQUALEQUAL      reduce using rule 240 (operator -> ANDAND .)
    NOTEQUAL        reduce using rule 240 (operator -> ANDAND .)
    LTE             reduce using rule 240 (operator -> ANDAND .)
    GTE             reduce using rule 240 (operator -> ANDAND .)
    IDENTIFIER      reduce using rule 240 (operator -> ANDAND .)
    LPAREN          reduce using rule 240 (operator -> ANDAND .)
    STRING_LITERAL  reduce using rule 240 (operator -> ANDAND .)
    CHAR_CONST      reduce using rule 240 (operator -> ANDAND .)
    FLOAT_CONST     reduce using rule 240 (operator -> ANDAND .)
    INT_CONST       reduce using rule 240 (operator -> ANDAND .)
    NIL_LITERAL     reduce using rule 240 (operator -> ANDAND .)
    LBRACK          reduce using rule 240 (operator -> ANDAND .)
    PRINT           reduce using rule 240 (operator -> ANDAND .)
    IMPORT          reduce using rule 240 (operator -> ANDAND .)
    LET             reduce using rule 240 (operator -> ANDAND .)
    STRUCT          reduce using rule 240 (operator -> ANDAND .)
    FOR             reduce using rule 240 (operator -> ANDAND .)
    WHILE           reduce using rule 240 (operator -> ANDAND .)
    REPEAT          reduce using rule 240 (operator -> ANDAND .)
    IF              reduce using rule 240 (operator -> ANDAND .)
    SWITCH          reduce using rule 240 (operator -> ANDAND .)
    BREAK           reduce using rule 240 (operator -> ANDAND .)
    CONTINUE        reduce using rule 240 (operator -> ANDAND .)
    RETURN          reduce using rule 240 (operator -> ANDAND .)
    VAR             reduce using rule 240 (operator -> ANDAND .)
    FUNC            reduce using rule 240 (operator -> ANDAND .)
    PREFIX          reduce using rule 240 (operator -> ANDAND .)
    POSTFIX         reduce using rule 240 (operator -> ANDAND .)
    INFIX           reduce using rule 240 (operator -> ANDAND .)
    $end            reduce using rule 240 (operator -> ANDAND .)
    RCURLY          reduce using rule 240 (operator -> ANDAND .)
    CASE            reduce using rule 240 (operator -> ANDAND .)
    DEFAULT         reduce using rule 240 (operator -> ANDAND .)
    COMMA           reduce using rule 240 (operator -> ANDAND .)
    RPAREN          reduce using rule 240 (operator -> ANDAND .)


state 63

    (220) declaration_identifier -> IDENTIFIER .

    COLON           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EQUAL           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    DOT             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LBRACK          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LTE             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    GTE             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LT              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    GT              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    DIV             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    SUB             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    ADD             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EXCLAMATION     reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    MUL             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    MOD             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    AND             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    OR              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CARET           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    TILDE           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CONDOP          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    ANDAND          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    OROR            reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    NOT             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    COMMA           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    RBRACK          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    WHERE           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LCURLY          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    PRINT           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    IMPORT          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LET             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    STRUCT          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    FOR             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    WHILE           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    REPEAT          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    IF              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    SWITCH          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    BREAK           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CONTINUE        reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    RETURN          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    VAR             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    FUNC            reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    PREFIX          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    POSTFIX         reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    INFIX           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    STRING_LITERAL  reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CHAR_CONST      reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    FLOAT_CONST     reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    INT_CONST       reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    NIL_LITERAL     reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    $end            reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    RCURLY          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CASE            reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    DEFAULT         reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    RANGEOP         reduce using rule 220 (declaration_identifier -> IDENTIFIER .)


state 64

    (143) expression -> prefix_expression . binary_expressions
    (144) expression -> prefix_expression .
    (155) binary_expressions -> . binary_expression_plus
    (156) binary_expression_plus -> . binary_expression binary_expression_plus
    (157) binary_expression_plus -> . binary_expression
    (152) binary_expression -> . binary_operator prefix_expression
    (153) binary_expression -> . EQUAL prefix_expression
    (154) binary_expression -> . conditional_operator prefix_expression
    (223) binary_operator -> . operator
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
  ! shift/reduce conflict for CONDOP resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    PRINT           reduce using rule 144 (expression -> prefix_expression .)
    IMPORT          reduce using rule 144 (expression -> prefix_expression .)
    LET             reduce using rule 144 (expression -> prefix_expression .)
    STRUCT          reduce using rule 144 (expression -> prefix_expression .)
    FOR             reduce using rule 144 (expression -> prefix_expression .)
    WHILE           reduce using rule 144 (expression -> prefix_expression .)
    REPEAT          reduce using rule 144 (expression -> prefix_expression .)
    IF              reduce using rule 144 (expression -> prefix_expression .)
    SWITCH          reduce using rule 144 (expression -> prefix_expression .)
    BREAK           reduce using rule 144 (expression -> prefix_expression .)
    CONTINUE        reduce using rule 144 (expression -> prefix_expression .)
    RETURN          reduce using rule 144 (expression -> prefix_expression .)
    VAR             reduce using rule 144 (expression -> prefix_expression .)
    FUNC            reduce using rule 144 (expression -> prefix_expression .)
    PREFIX          reduce using rule 144 (expression -> prefix_expression .)
    POSTFIX         reduce using rule 144 (expression -> prefix_expression .)
    INFIX           reduce using rule 144 (expression -> prefix_expression .)
    IDENTIFIER      reduce using rule 144 (expression -> prefix_expression .)
    LPAREN          reduce using rule 144 (expression -> prefix_expression .)
    STRING_LITERAL  reduce using rule 144 (expression -> prefix_expression .)
    CHAR_CONST      reduce using rule 144 (expression -> prefix_expression .)
    FLOAT_CONST     reduce using rule 144 (expression -> prefix_expression .)
    INT_CONST       reduce using rule 144 (expression -> prefix_expression .)
    NIL_LITERAL     reduce using rule 144 (expression -> prefix_expression .)
    LBRACK          reduce using rule 144 (expression -> prefix_expression .)
    $end            reduce using rule 144 (expression -> prefix_expression .)
    COMMA           reduce using rule 144 (expression -> prefix_expression .)
    SEMICOLON       reduce using rule 144 (expression -> prefix_expression .)
    RPAREN          reduce using rule 144 (expression -> prefix_expression .)
    LCURLY          reduce using rule 144 (expression -> prefix_expression .)
    RCURLY          reduce using rule 144 (expression -> prefix_expression .)
    CASE            reduce using rule 144 (expression -> prefix_expression .)
    DEFAULT         reduce using rule 144 (expression -> prefix_expression .)
    WHERE           reduce using rule 144 (expression -> prefix_expression .)
    COLON           reduce using rule 144 (expression -> prefix_expression .)
    RBRACK          reduce using rule 144 (expression -> prefix_expression .)
    EQUAL           shift and go to state 132
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LT              shift and go to state 135
    GT              shift and go to state 138
    DIV             shift and go to state 73
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46

  ! AND             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! DIV             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! EQUAL           [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! SUB             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! ADD             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! EXCLAMATION     [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! MUL             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! MOD             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! OR              [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! LT              [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! GT              [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! CARET           [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! TILDE           [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! CONDOP          [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! ANDAND          [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! OROR            [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! NOT             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! DOT             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! EQUALEQUAL      [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! NOTEQUAL        [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! LTE             [ reduce using rule 144 (expression -> prefix_expression .) ]
  ! GTE             [ reduce using rule 144 (expression -> prefix_expression .) ]

    binary_expression              shift and go to state 139
    conditional_operator           shift and go to state 136
    binary_operator                shift and go to state 140
    operator                       shift and go to state 133
    binary_expressions             shift and go to state 137
    binary_expression_plus         shift and go to state 134

state 65

    (238) operator -> CONDOP .

    AND             reduce using rule 238 (operator -> CONDOP .)
    DIV             reduce using rule 238 (operator -> CONDOP .)
    EQUAL           reduce using rule 238 (operator -> CONDOP .)
    SUB             reduce using rule 238 (operator -> CONDOP .)
    ADD             reduce using rule 238 (operator -> CONDOP .)
    EXCLAMATION     reduce using rule 238 (operator -> CONDOP .)
    MUL             reduce using rule 238 (operator -> CONDOP .)
    MOD             reduce using rule 238 (operator -> CONDOP .)
    OR              reduce using rule 238 (operator -> CONDOP .)
    LT              reduce using rule 238 (operator -> CONDOP .)
    GT              reduce using rule 238 (operator -> CONDOP .)
    CARET           reduce using rule 238 (operator -> CONDOP .)
    TILDE           reduce using rule 238 (operator -> CONDOP .)
    CONDOP          reduce using rule 238 (operator -> CONDOP .)
    ANDAND          reduce using rule 238 (operator -> CONDOP .)
    OROR            reduce using rule 238 (operator -> CONDOP .)
    NOT             reduce using rule 238 (operator -> CONDOP .)
    DOT             reduce using rule 238 (operator -> CONDOP .)
    EQUALEQUAL      reduce using rule 238 (operator -> CONDOP .)
    NOTEQUAL        reduce using rule 238 (operator -> CONDOP .)
    LTE             reduce using rule 238 (operator -> CONDOP .)
    GTE             reduce using rule 238 (operator -> CONDOP .)
    IDENTIFIER      reduce using rule 238 (operator -> CONDOP .)
    LPAREN          reduce using rule 238 (operator -> CONDOP .)
    STRING_LITERAL  reduce using rule 238 (operator -> CONDOP .)
    CHAR_CONST      reduce using rule 238 (operator -> CONDOP .)
    FLOAT_CONST     reduce using rule 238 (operator -> CONDOP .)
    INT_CONST       reduce using rule 238 (operator -> CONDOP .)
    NIL_LITERAL     reduce using rule 238 (operator -> CONDOP .)
    LBRACK          reduce using rule 238 (operator -> CONDOP .)
    PRINT           reduce using rule 238 (operator -> CONDOP .)
    IMPORT          reduce using rule 238 (operator -> CONDOP .)
    LET             reduce using rule 238 (operator -> CONDOP .)
    STRUCT          reduce using rule 238 (operator -> CONDOP .)
    FOR             reduce using rule 238 (operator -> CONDOP .)
    WHILE           reduce using rule 238 (operator -> CONDOP .)
    REPEAT          reduce using rule 238 (operator -> CONDOP .)
    IF              reduce using rule 238 (operator -> CONDOP .)
    SWITCH          reduce using rule 238 (operator -> CONDOP .)
    BREAK           reduce using rule 238 (operator -> CONDOP .)
    CONTINUE        reduce using rule 238 (operator -> CONDOP .)
    RETURN          reduce using rule 238 (operator -> CONDOP .)
    VAR             reduce using rule 238 (operator -> CONDOP .)
    FUNC            reduce using rule 238 (operator -> CONDOP .)
    PREFIX          reduce using rule 238 (operator -> CONDOP .)
    POSTFIX         reduce using rule 238 (operator -> CONDOP .)
    INFIX           reduce using rule 238 (operator -> CONDOP .)
    $end            reduce using rule 238 (operator -> CONDOP .)
    RCURLY          reduce using rule 238 (operator -> CONDOP .)
    CASE            reduce using rule 238 (operator -> CONDOP .)
    DEFAULT         reduce using rule 238 (operator -> CONDOP .)
    COMMA           reduce using rule 238 (operator -> CONDOP .)
    RPAREN          reduce using rule 238 (operator -> CONDOP .)


state 66

    (251) literal -> CHAR_CONST .

    DOT             reduce using rule 251 (literal -> CHAR_CONST .)
    LPAREN          reduce using rule 251 (literal -> CHAR_CONST .)
    LBRACK          reduce using rule 251 (literal -> CHAR_CONST .)
    EQUAL           reduce using rule 251 (literal -> CHAR_CONST .)
    EQUALEQUAL      reduce using rule 251 (literal -> CHAR_CONST .)
    NOTEQUAL        reduce using rule 251 (literal -> CHAR_CONST .)
    LTE             reduce using rule 251 (literal -> CHAR_CONST .)
    GTE             reduce using rule 251 (literal -> CHAR_CONST .)
    LT              reduce using rule 251 (literal -> CHAR_CONST .)
    GT              reduce using rule 251 (literal -> CHAR_CONST .)
    DIV             reduce using rule 251 (literal -> CHAR_CONST .)
    SUB             reduce using rule 251 (literal -> CHAR_CONST .)
    ADD             reduce using rule 251 (literal -> CHAR_CONST .)
    EXCLAMATION     reduce using rule 251 (literal -> CHAR_CONST .)
    MUL             reduce using rule 251 (literal -> CHAR_CONST .)
    MOD             reduce using rule 251 (literal -> CHAR_CONST .)
    AND             reduce using rule 251 (literal -> CHAR_CONST .)
    OR              reduce using rule 251 (literal -> CHAR_CONST .)
    CARET           reduce using rule 251 (literal -> CHAR_CONST .)
    TILDE           reduce using rule 251 (literal -> CHAR_CONST .)
    CONDOP          reduce using rule 251 (literal -> CHAR_CONST .)
    ANDAND          reduce using rule 251 (literal -> CHAR_CONST .)
    OROR            reduce using rule 251 (literal -> CHAR_CONST .)
    NOT             reduce using rule 251 (literal -> CHAR_CONST .)
    PRINT           reduce using rule 251 (literal -> CHAR_CONST .)
    IMPORT          reduce using rule 251 (literal -> CHAR_CONST .)
    LET             reduce using rule 251 (literal -> CHAR_CONST .)
    STRUCT          reduce using rule 251 (literal -> CHAR_CONST .)
    FOR             reduce using rule 251 (literal -> CHAR_CONST .)
    WHILE           reduce using rule 251 (literal -> CHAR_CONST .)
    REPEAT          reduce using rule 251 (literal -> CHAR_CONST .)
    IF              reduce using rule 251 (literal -> CHAR_CONST .)
    SWITCH          reduce using rule 251 (literal -> CHAR_CONST .)
    BREAK           reduce using rule 251 (literal -> CHAR_CONST .)
    CONTINUE        reduce using rule 251 (literal -> CHAR_CONST .)
    RETURN          reduce using rule 251 (literal -> CHAR_CONST .)
    VAR             reduce using rule 251 (literal -> CHAR_CONST .)
    FUNC            reduce using rule 251 (literal -> CHAR_CONST .)
    PREFIX          reduce using rule 251 (literal -> CHAR_CONST .)
    POSTFIX         reduce using rule 251 (literal -> CHAR_CONST .)
    INFIX           reduce using rule 251 (literal -> CHAR_CONST .)
    IDENTIFIER      reduce using rule 251 (literal -> CHAR_CONST .)
    STRING_LITERAL  reduce using rule 251 (literal -> CHAR_CONST .)
    CHAR_CONST      reduce using rule 251 (literal -> CHAR_CONST .)
    FLOAT_CONST     reduce using rule 251 (literal -> CHAR_CONST .)
    INT_CONST       reduce using rule 251 (literal -> CHAR_CONST .)
    NIL_LITERAL     reduce using rule 251 (literal -> CHAR_CONST .)
    $end            reduce using rule 251 (literal -> CHAR_CONST .)
    COMMA           reduce using rule 251 (literal -> CHAR_CONST .)
    SEMICOLON       reduce using rule 251 (literal -> CHAR_CONST .)
    RBRACK          reduce using rule 251 (literal -> CHAR_CONST .)
    RCURLY          reduce using rule 251 (literal -> CHAR_CONST .)
    RPAREN          reduce using rule 251 (literal -> CHAR_CONST .)
    CASE            reduce using rule 251 (literal -> CHAR_CONST .)
    DEFAULT         reduce using rule 251 (literal -> CHAR_CONST .)
    LCURLY          reduce using rule 251 (literal -> CHAR_CONST .)
    WHERE           reduce using rule 251 (literal -> CHAR_CONST .)
    COLON           reduce using rule 251 (literal -> CHAR_CONST .)


state 67

    (56) break_statement -> BREAK .

    PRINT           reduce using rule 56 (break_statement -> BREAK .)
    IMPORT          reduce using rule 56 (break_statement -> BREAK .)
    LET             reduce using rule 56 (break_statement -> BREAK .)
    STRUCT          reduce using rule 56 (break_statement -> BREAK .)
    FOR             reduce using rule 56 (break_statement -> BREAK .)
    WHILE           reduce using rule 56 (break_statement -> BREAK .)
    REPEAT          reduce using rule 56 (break_statement -> BREAK .)
    IF              reduce using rule 56 (break_statement -> BREAK .)
    SWITCH          reduce using rule 56 (break_statement -> BREAK .)
    BREAK           reduce using rule 56 (break_statement -> BREAK .)
    CONTINUE        reduce using rule 56 (break_statement -> BREAK .)
    RETURN          reduce using rule 56 (break_statement -> BREAK .)
    AND             reduce using rule 56 (break_statement -> BREAK .)
    VAR             reduce using rule 56 (break_statement -> BREAK .)
    FUNC            reduce using rule 56 (break_statement -> BREAK .)
    PREFIX          reduce using rule 56 (break_statement -> BREAK .)
    POSTFIX         reduce using rule 56 (break_statement -> BREAK .)
    INFIX           reduce using rule 56 (break_statement -> BREAK .)
    DIV             reduce using rule 56 (break_statement -> BREAK .)
    EQUAL           reduce using rule 56 (break_statement -> BREAK .)
    SUB             reduce using rule 56 (break_statement -> BREAK .)
    ADD             reduce using rule 56 (break_statement -> BREAK .)
    EXCLAMATION     reduce using rule 56 (break_statement -> BREAK .)
    MUL             reduce using rule 56 (break_statement -> BREAK .)
    MOD             reduce using rule 56 (break_statement -> BREAK .)
    OR              reduce using rule 56 (break_statement -> BREAK .)
    LT              reduce using rule 56 (break_statement -> BREAK .)
    GT              reduce using rule 56 (break_statement -> BREAK .)
    CARET           reduce using rule 56 (break_statement -> BREAK .)
    TILDE           reduce using rule 56 (break_statement -> BREAK .)
    CONDOP          reduce using rule 56 (break_statement -> BREAK .)
    ANDAND          reduce using rule 56 (break_statement -> BREAK .)
    OROR            reduce using rule 56 (break_statement -> BREAK .)
    NOT             reduce using rule 56 (break_statement -> BREAK .)
    DOT             reduce using rule 56 (break_statement -> BREAK .)
    EQUALEQUAL      reduce using rule 56 (break_statement -> BREAK .)
    NOTEQUAL        reduce using rule 56 (break_statement -> BREAK .)
    LTE             reduce using rule 56 (break_statement -> BREAK .)
    GTE             reduce using rule 56 (break_statement -> BREAK .)
    IDENTIFIER      reduce using rule 56 (break_statement -> BREAK .)
    LPAREN          reduce using rule 56 (break_statement -> BREAK .)
    STRING_LITERAL  reduce using rule 56 (break_statement -> BREAK .)
    CHAR_CONST      reduce using rule 56 (break_statement -> BREAK .)
    FLOAT_CONST     reduce using rule 56 (break_statement -> BREAK .)
    INT_CONST       reduce using rule 56 (break_statement -> BREAK .)
    NIL_LITERAL     reduce using rule 56 (break_statement -> BREAK .)
    LBRACK          reduce using rule 56 (break_statement -> BREAK .)
    $end            reduce using rule 56 (break_statement -> BREAK .)
    RCURLY          reduce using rule 56 (break_statement -> BREAK .)
    CASE            reduce using rule 56 (break_statement -> BREAK .)
    DEFAULT         reduce using rule 56 (break_statement -> BREAK .)


state 68

    (81) constant_declaration -> LET . pattern_initializer_list
    (82) pattern_initializer_list -> . pattern_initializer p_com_pat_init_star
    (85) pattern_initializer -> . pattern initializer
    (86) pattern_initializer -> . pattern
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern_initializer            shift and go to state 106
    pattern                        shift and go to state 101
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    pattern_initializer_list       shift and go to state 141
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 69

    (18) loop_statement -> repeat_while_statement .

    PRINT           reduce using rule 18 (loop_statement -> repeat_while_statement .)
    IMPORT          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    LET             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    STRUCT          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    FOR             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    WHILE           reduce using rule 18 (loop_statement -> repeat_while_statement .)
    REPEAT          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    IF              reduce using rule 18 (loop_statement -> repeat_while_statement .)
    SWITCH          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    BREAK           reduce using rule 18 (loop_statement -> repeat_while_statement .)
    CONTINUE        reduce using rule 18 (loop_statement -> repeat_while_statement .)
    RETURN          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    AND             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    VAR             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    FUNC            reduce using rule 18 (loop_statement -> repeat_while_statement .)
    PREFIX          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    POSTFIX         reduce using rule 18 (loop_statement -> repeat_while_statement .)
    INFIX           reduce using rule 18 (loop_statement -> repeat_while_statement .)
    DIV             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    EQUAL           reduce using rule 18 (loop_statement -> repeat_while_statement .)
    SUB             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    ADD             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    EXCLAMATION     reduce using rule 18 (loop_statement -> repeat_while_statement .)
    MUL             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    MOD             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    OR              reduce using rule 18 (loop_statement -> repeat_while_statement .)
    LT              reduce using rule 18 (loop_statement -> repeat_while_statement .)
    GT              reduce using rule 18 (loop_statement -> repeat_while_statement .)
    CARET           reduce using rule 18 (loop_statement -> repeat_while_statement .)
    TILDE           reduce using rule 18 (loop_statement -> repeat_while_statement .)
    CONDOP          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    ANDAND          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    OROR            reduce using rule 18 (loop_statement -> repeat_while_statement .)
    NOT             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    DOT             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    EQUALEQUAL      reduce using rule 18 (loop_statement -> repeat_while_statement .)
    NOTEQUAL        reduce using rule 18 (loop_statement -> repeat_while_statement .)
    LTE             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    GTE             reduce using rule 18 (loop_statement -> repeat_while_statement .)
    IDENTIFIER      reduce using rule 18 (loop_statement -> repeat_while_statement .)
    LPAREN          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    STRING_LITERAL  reduce using rule 18 (loop_statement -> repeat_while_statement .)
    CHAR_CONST      reduce using rule 18 (loop_statement -> repeat_while_statement .)
    FLOAT_CONST     reduce using rule 18 (loop_statement -> repeat_while_statement .)
    INT_CONST       reduce using rule 18 (loop_statement -> repeat_while_statement .)
    NIL_LITERAL     reduce using rule 18 (loop_statement -> repeat_while_statement .)
    LBRACK          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    $end            reduce using rule 18 (loop_statement -> repeat_while_statement .)
    RCURLY          reduce using rule 18 (loop_statement -> repeat_while_statement .)
    CASE            reduce using rule 18 (loop_statement -> repeat_while_statement .)
    DEFAULT         reduce using rule 18 (loop_statement -> repeat_while_statement .)


state 70

    (226) operator -> EQUAL .

    DOT             reduce using rule 226 (operator -> EQUAL .)
    PRINT           reduce using rule 226 (operator -> EQUAL .)
    IMPORT          reduce using rule 226 (operator -> EQUAL .)
    LET             reduce using rule 226 (operator -> EQUAL .)
    STRUCT          reduce using rule 226 (operator -> EQUAL .)
    FOR             reduce using rule 226 (operator -> EQUAL .)
    WHILE           reduce using rule 226 (operator -> EQUAL .)
    REPEAT          reduce using rule 226 (operator -> EQUAL .)
    IF              reduce using rule 226 (operator -> EQUAL .)
    SWITCH          reduce using rule 226 (operator -> EQUAL .)
    BREAK           reduce using rule 226 (operator -> EQUAL .)
    CONTINUE        reduce using rule 226 (operator -> EQUAL .)
    RETURN          reduce using rule 226 (operator -> EQUAL .)
    AND             reduce using rule 226 (operator -> EQUAL .)
    VAR             reduce using rule 226 (operator -> EQUAL .)
    FUNC            reduce using rule 226 (operator -> EQUAL .)
    PREFIX          reduce using rule 226 (operator -> EQUAL .)
    POSTFIX         reduce using rule 226 (operator -> EQUAL .)
    INFIX           reduce using rule 226 (operator -> EQUAL .)
    DIV             reduce using rule 226 (operator -> EQUAL .)
    EQUAL           reduce using rule 226 (operator -> EQUAL .)
    SUB             reduce using rule 226 (operator -> EQUAL .)
    ADD             reduce using rule 226 (operator -> EQUAL .)
    EXCLAMATION     reduce using rule 226 (operator -> EQUAL .)
    MUL             reduce using rule 226 (operator -> EQUAL .)
    MOD             reduce using rule 226 (operator -> EQUAL .)
    OR              reduce using rule 226 (operator -> EQUAL .)
    LT              reduce using rule 226 (operator -> EQUAL .)
    GT              reduce using rule 226 (operator -> EQUAL .)
    CARET           reduce using rule 226 (operator -> EQUAL .)
    TILDE           reduce using rule 226 (operator -> EQUAL .)
    CONDOP          reduce using rule 226 (operator -> EQUAL .)
    ANDAND          reduce using rule 226 (operator -> EQUAL .)
    OROR            reduce using rule 226 (operator -> EQUAL .)
    NOT             reduce using rule 226 (operator -> EQUAL .)
    EQUALEQUAL      reduce using rule 226 (operator -> EQUAL .)
    NOTEQUAL        reduce using rule 226 (operator -> EQUAL .)
    LTE             reduce using rule 226 (operator -> EQUAL .)
    GTE             reduce using rule 226 (operator -> EQUAL .)
    IDENTIFIER      reduce using rule 226 (operator -> EQUAL .)
    LPAREN          reduce using rule 226 (operator -> EQUAL .)
    STRING_LITERAL  reduce using rule 226 (operator -> EQUAL .)
    CHAR_CONST      reduce using rule 226 (operator -> EQUAL .)
    FLOAT_CONST     reduce using rule 226 (operator -> EQUAL .)
    INT_CONST       reduce using rule 226 (operator -> EQUAL .)
    NIL_LITERAL     reduce using rule 226 (operator -> EQUAL .)
    LBRACK          reduce using rule 226 (operator -> EQUAL .)
    $end            reduce using rule 226 (operator -> EQUAL .)
    RCURLY          reduce using rule 226 (operator -> EQUAL .)
    CASE            reduce using rule 226 (operator -> EQUAL .)
    DEFAULT         reduce using rule 226 (operator -> EQUAL .)
    COMMA           reduce using rule 226 (operator -> EQUAL .)
    RPAREN          reduce using rule 226 (operator -> EQUAL .)


state 71

    (129) prefix_operator_declaration -> PREFIX . OPERATOR operator

    OPERATOR        shift and go to state 143


state 72

    (254) literal -> NIL_LITERAL .

    DOT             reduce using rule 254 (literal -> NIL_LITERAL .)
    LPAREN          reduce using rule 254 (literal -> NIL_LITERAL .)
    LBRACK          reduce using rule 254 (literal -> NIL_LITERAL .)
    EQUAL           reduce using rule 254 (literal -> NIL_LITERAL .)
    EQUALEQUAL      reduce using rule 254 (literal -> NIL_LITERAL .)
    NOTEQUAL        reduce using rule 254 (literal -> NIL_LITERAL .)
    LTE             reduce using rule 254 (literal -> NIL_LITERAL .)
    GTE             reduce using rule 254 (literal -> NIL_LITERAL .)
    LT              reduce using rule 254 (literal -> NIL_LITERAL .)
    GT              reduce using rule 254 (literal -> NIL_LITERAL .)
    DIV             reduce using rule 254 (literal -> NIL_LITERAL .)
    SUB             reduce using rule 254 (literal -> NIL_LITERAL .)
    ADD             reduce using rule 254 (literal -> NIL_LITERAL .)
    EXCLAMATION     reduce using rule 254 (literal -> NIL_LITERAL .)
    MUL             reduce using rule 254 (literal -> NIL_LITERAL .)
    MOD             reduce using rule 254 (literal -> NIL_LITERAL .)
    AND             reduce using rule 254 (literal -> NIL_LITERAL .)
    OR              reduce using rule 254 (literal -> NIL_LITERAL .)
    CARET           reduce using rule 254 (literal -> NIL_LITERAL .)
    TILDE           reduce using rule 254 (literal -> NIL_LITERAL .)
    CONDOP          reduce using rule 254 (literal -> NIL_LITERAL .)
    ANDAND          reduce using rule 254 (literal -> NIL_LITERAL .)
    OROR            reduce using rule 254 (literal -> NIL_LITERAL .)
    NOT             reduce using rule 254 (literal -> NIL_LITERAL .)
    PRINT           reduce using rule 254 (literal -> NIL_LITERAL .)
    IMPORT          reduce using rule 254 (literal -> NIL_LITERAL .)
    LET             reduce using rule 254 (literal -> NIL_LITERAL .)
    STRUCT          reduce using rule 254 (literal -> NIL_LITERAL .)
    FOR             reduce using rule 254 (literal -> NIL_LITERAL .)
    WHILE           reduce using rule 254 (literal -> NIL_LITERAL .)
    REPEAT          reduce using rule 254 (literal -> NIL_LITERAL .)
    IF              reduce using rule 254 (literal -> NIL_LITERAL .)
    SWITCH          reduce using rule 254 (literal -> NIL_LITERAL .)
    BREAK           reduce using rule 254 (literal -> NIL_LITERAL .)
    CONTINUE        reduce using rule 254 (literal -> NIL_LITERAL .)
    RETURN          reduce using rule 254 (literal -> NIL_LITERAL .)
    VAR             reduce using rule 254 (literal -> NIL_LITERAL .)
    FUNC            reduce using rule 254 (literal -> NIL_LITERAL .)
    PREFIX          reduce using rule 254 (literal -> NIL_LITERAL .)
    POSTFIX         reduce using rule 254 (literal -> NIL_LITERAL .)
    INFIX           reduce using rule 254 (literal -> NIL_LITERAL .)
    IDENTIFIER      reduce using rule 254 (literal -> NIL_LITERAL .)
    STRING_LITERAL  reduce using rule 254 (literal -> NIL_LITERAL .)
    CHAR_CONST      reduce using rule 254 (literal -> NIL_LITERAL .)
    FLOAT_CONST     reduce using rule 254 (literal -> NIL_LITERAL .)
    INT_CONST       reduce using rule 254 (literal -> NIL_LITERAL .)
    NIL_LITERAL     reduce using rule 254 (literal -> NIL_LITERAL .)
    $end            reduce using rule 254 (literal -> NIL_LITERAL .)
    COMMA           reduce using rule 254 (literal -> NIL_LITERAL .)
    SEMICOLON       reduce using rule 254 (literal -> NIL_LITERAL .)
    RBRACK          reduce using rule 254 (literal -> NIL_LITERAL .)
    RCURLY          reduce using rule 254 (literal -> NIL_LITERAL .)
    RPAREN          reduce using rule 254 (literal -> NIL_LITERAL .)
    CASE            reduce using rule 254 (literal -> NIL_LITERAL .)
    DEFAULT         reduce using rule 254 (literal -> NIL_LITERAL .)
    LCURLY          reduce using rule 254 (literal -> NIL_LITERAL .)
    WHERE           reduce using rule 254 (literal -> NIL_LITERAL .)
    COLON           reduce using rule 254 (literal -> NIL_LITERAL .)


state 73

    (225) operator -> DIV .

    AND             reduce using rule 225 (operator -> DIV .)
    DIV             reduce using rule 225 (operator -> DIV .)
    EQUAL           reduce using rule 225 (operator -> DIV .)
    SUB             reduce using rule 225 (operator -> DIV .)
    ADD             reduce using rule 225 (operator -> DIV .)
    EXCLAMATION     reduce using rule 225 (operator -> DIV .)
    MUL             reduce using rule 225 (operator -> DIV .)
    MOD             reduce using rule 225 (operator -> DIV .)
    OR              reduce using rule 225 (operator -> DIV .)
    LT              reduce using rule 225 (operator -> DIV .)
    GT              reduce using rule 225 (operator -> DIV .)
    CARET           reduce using rule 225 (operator -> DIV .)
    TILDE           reduce using rule 225 (operator -> DIV .)
    CONDOP          reduce using rule 225 (operator -> DIV .)
    ANDAND          reduce using rule 225 (operator -> DIV .)
    OROR            reduce using rule 225 (operator -> DIV .)
    NOT             reduce using rule 225 (operator -> DIV .)
    DOT             reduce using rule 225 (operator -> DIV .)
    EQUALEQUAL      reduce using rule 225 (operator -> DIV .)
    NOTEQUAL        reduce using rule 225 (operator -> DIV .)
    LTE             reduce using rule 225 (operator -> DIV .)
    GTE             reduce using rule 225 (operator -> DIV .)
    IDENTIFIER      reduce using rule 225 (operator -> DIV .)
    LPAREN          reduce using rule 225 (operator -> DIV .)
    STRING_LITERAL  reduce using rule 225 (operator -> DIV .)
    CHAR_CONST      reduce using rule 225 (operator -> DIV .)
    FLOAT_CONST     reduce using rule 225 (operator -> DIV .)
    INT_CONST       reduce using rule 225 (operator -> DIV .)
    NIL_LITERAL     reduce using rule 225 (operator -> DIV .)
    LBRACK          reduce using rule 225 (operator -> DIV .)
    PRINT           reduce using rule 225 (operator -> DIV .)
    IMPORT          reduce using rule 225 (operator -> DIV .)
    LET             reduce using rule 225 (operator -> DIV .)
    STRUCT          reduce using rule 225 (operator -> DIV .)
    FOR             reduce using rule 225 (operator -> DIV .)
    WHILE           reduce using rule 225 (operator -> DIV .)
    REPEAT          reduce using rule 225 (operator -> DIV .)
    IF              reduce using rule 225 (operator -> DIV .)
    SWITCH          reduce using rule 225 (operator -> DIV .)
    BREAK           reduce using rule 225 (operator -> DIV .)
    CONTINUE        reduce using rule 225 (operator -> DIV .)
    RETURN          reduce using rule 225 (operator -> DIV .)
    VAR             reduce using rule 225 (operator -> DIV .)
    FUNC            reduce using rule 225 (operator -> DIV .)
    PREFIX          reduce using rule 225 (operator -> DIV .)
    POSTFIX         reduce using rule 225 (operator -> DIV .)
    INFIX           reduce using rule 225 (operator -> DIV .)
    $end            reduce using rule 225 (operator -> DIV .)
    RCURLY          reduce using rule 225 (operator -> DIV .)
    CASE            reduce using rule 225 (operator -> DIV .)
    DEFAULT         reduce using rule 225 (operator -> DIV .)
    COMMA           reduce using rule 225 (operator -> DIV .)
    RPAREN          reduce using rule 225 (operator -> DIV .)


state 74

    (247) conditional_operator -> GTE .

    IDENTIFIER      reduce using rule 247 (conditional_operator -> GTE .)
    LPAREN          reduce using rule 247 (conditional_operator -> GTE .)
    STRING_LITERAL  reduce using rule 247 (conditional_operator -> GTE .)
    CHAR_CONST      reduce using rule 247 (conditional_operator -> GTE .)
    FLOAT_CONST     reduce using rule 247 (conditional_operator -> GTE .)
    INT_CONST       reduce using rule 247 (conditional_operator -> GTE .)
    NIL_LITERAL     reduce using rule 247 (conditional_operator -> GTE .)
    LBRACK          reduce using rule 247 (conditional_operator -> GTE .)
    COMMA           reduce using rule 247 (conditional_operator -> GTE .)
    RPAREN          reduce using rule 247 (conditional_operator -> GTE .)
    AND             reduce using rule 247 (conditional_operator -> GTE .)
    DIV             reduce using rule 247 (conditional_operator -> GTE .)
    EQUAL           reduce using rule 247 (conditional_operator -> GTE .)
    SUB             reduce using rule 247 (conditional_operator -> GTE .)
    ADD             reduce using rule 247 (conditional_operator -> GTE .)
    EXCLAMATION     reduce using rule 247 (conditional_operator -> GTE .)
    MUL             reduce using rule 247 (conditional_operator -> GTE .)
    MOD             reduce using rule 247 (conditional_operator -> GTE .)
    OR              reduce using rule 247 (conditional_operator -> GTE .)
    LT              reduce using rule 247 (conditional_operator -> GTE .)
    GT              reduce using rule 247 (conditional_operator -> GTE .)
    CARET           reduce using rule 247 (conditional_operator -> GTE .)
    TILDE           reduce using rule 247 (conditional_operator -> GTE .)
    CONDOP          reduce using rule 247 (conditional_operator -> GTE .)
    ANDAND          reduce using rule 247 (conditional_operator -> GTE .)
    OROR            reduce using rule 247 (conditional_operator -> GTE .)
    NOT             reduce using rule 247 (conditional_operator -> GTE .)
    DOT             reduce using rule 247 (conditional_operator -> GTE .)
    EQUALEQUAL      reduce using rule 247 (conditional_operator -> GTE .)
    NOTEQUAL        reduce using rule 247 (conditional_operator -> GTE .)
    LTE             reduce using rule 247 (conditional_operator -> GTE .)
    GTE             reduce using rule 247 (conditional_operator -> GTE .)
    PRINT           reduce using rule 247 (conditional_operator -> GTE .)
    IMPORT          reduce using rule 247 (conditional_operator -> GTE .)
    LET             reduce using rule 247 (conditional_operator -> GTE .)
    STRUCT          reduce using rule 247 (conditional_operator -> GTE .)
    FOR             reduce using rule 247 (conditional_operator -> GTE .)
    WHILE           reduce using rule 247 (conditional_operator -> GTE .)
    REPEAT          reduce using rule 247 (conditional_operator -> GTE .)
    IF              reduce using rule 247 (conditional_operator -> GTE .)
    SWITCH          reduce using rule 247 (conditional_operator -> GTE .)
    BREAK           reduce using rule 247 (conditional_operator -> GTE .)
    CONTINUE        reduce using rule 247 (conditional_operator -> GTE .)
    RETURN          reduce using rule 247 (conditional_operator -> GTE .)
    VAR             reduce using rule 247 (conditional_operator -> GTE .)
    FUNC            reduce using rule 247 (conditional_operator -> GTE .)
    PREFIX          reduce using rule 247 (conditional_operator -> GTE .)
    POSTFIX         reduce using rule 247 (conditional_operator -> GTE .)
    INFIX           reduce using rule 247 (conditional_operator -> GTE .)
    $end            reduce using rule 247 (conditional_operator -> GTE .)
    RCURLY          reduce using rule 247 (conditional_operator -> GTE .)
    CASE            reduce using rule 247 (conditional_operator -> GTE .)
    DEFAULT         reduce using rule 247 (conditional_operator -> GTE .)


state 75

    (93) function_declaration -> function_head . function_name function_signature function_body
    (94) function_declaration -> function_head . function_name function_signature
    (96) function_name -> . declaration_identifier
    (97) function_name -> . operator
    (220) declaration_identifier -> . IDENTIFIER
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT

    IDENTIFIER      shift and go to state 63
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74

    operator                       shift and go to state 144
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 145
    function_name                  shift and go to state 146

state 76

    (149) prefix_expression -> postfix_expression .
    (171) postfix_expression -> postfix_expression . function_call_argument_clause
    (172) postfix_expression -> postfix_expression . DOT INIT
    (173) postfix_expression -> postfix_expression . DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> postfix_expression . DOT INT_CONST
    (175) postfix_expression -> postfix_expression . DOT declaration_identifier
    (176) postfix_expression -> postfix_expression . DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> postfix_expression . LPAREN argument_names RPAREN
    (178) postfix_expression -> postfix_expression . DOT SELF
    (179) postfix_expression -> postfix_expression . LBRACK expression_list RBRACK
    (180) function_call_argument_clause -> . LPAREN RPAREN
    (181) function_call_argument_clause -> . LPAREN function_call_argument_list RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    EQUAL           reduce using rule 149 (prefix_expression -> postfix_expression .)
    EQUALEQUAL      reduce using rule 149 (prefix_expression -> postfix_expression .)
    NOTEQUAL        reduce using rule 149 (prefix_expression -> postfix_expression .)
    LTE             reduce using rule 149 (prefix_expression -> postfix_expression .)
    GTE             reduce using rule 149 (prefix_expression -> postfix_expression .)
    LT              reduce using rule 149 (prefix_expression -> postfix_expression .)
    GT              reduce using rule 149 (prefix_expression -> postfix_expression .)
    DIV             reduce using rule 149 (prefix_expression -> postfix_expression .)
    SUB             reduce using rule 149 (prefix_expression -> postfix_expression .)
    ADD             reduce using rule 149 (prefix_expression -> postfix_expression .)
    EXCLAMATION     reduce using rule 149 (prefix_expression -> postfix_expression .)
    MUL             reduce using rule 149 (prefix_expression -> postfix_expression .)
    MOD             reduce using rule 149 (prefix_expression -> postfix_expression .)
    AND             reduce using rule 149 (prefix_expression -> postfix_expression .)
    OR              reduce using rule 149 (prefix_expression -> postfix_expression .)
    CARET           reduce using rule 149 (prefix_expression -> postfix_expression .)
    TILDE           reduce using rule 149 (prefix_expression -> postfix_expression .)
    CONDOP          reduce using rule 149 (prefix_expression -> postfix_expression .)
    ANDAND          reduce using rule 149 (prefix_expression -> postfix_expression .)
    OROR            reduce using rule 149 (prefix_expression -> postfix_expression .)
    NOT             reduce using rule 149 (prefix_expression -> postfix_expression .)
    COMMA           reduce using rule 149 (prefix_expression -> postfix_expression .)
    RPAREN          reduce using rule 149 (prefix_expression -> postfix_expression .)
    WHERE           reduce using rule 149 (prefix_expression -> postfix_expression .)
    COLON           reduce using rule 149 (prefix_expression -> postfix_expression .)
    PRINT           reduce using rule 149 (prefix_expression -> postfix_expression .)
    IMPORT          reduce using rule 149 (prefix_expression -> postfix_expression .)
    LET             reduce using rule 149 (prefix_expression -> postfix_expression .)
    STRUCT          reduce using rule 149 (prefix_expression -> postfix_expression .)
    FOR             reduce using rule 149 (prefix_expression -> postfix_expression .)
    WHILE           reduce using rule 149 (prefix_expression -> postfix_expression .)
    REPEAT          reduce using rule 149 (prefix_expression -> postfix_expression .)
    IF              reduce using rule 149 (prefix_expression -> postfix_expression .)
    SWITCH          reduce using rule 149 (prefix_expression -> postfix_expression .)
    BREAK           reduce using rule 149 (prefix_expression -> postfix_expression .)
    CONTINUE        reduce using rule 149 (prefix_expression -> postfix_expression .)
    RETURN          reduce using rule 149 (prefix_expression -> postfix_expression .)
    VAR             reduce using rule 149 (prefix_expression -> postfix_expression .)
    FUNC            reduce using rule 149 (prefix_expression -> postfix_expression .)
    PREFIX          reduce using rule 149 (prefix_expression -> postfix_expression .)
    POSTFIX         reduce using rule 149 (prefix_expression -> postfix_expression .)
    INFIX           reduce using rule 149 (prefix_expression -> postfix_expression .)
    IDENTIFIER      reduce using rule 149 (prefix_expression -> postfix_expression .)
    STRING_LITERAL  reduce using rule 149 (prefix_expression -> postfix_expression .)
    CHAR_CONST      reduce using rule 149 (prefix_expression -> postfix_expression .)
    FLOAT_CONST     reduce using rule 149 (prefix_expression -> postfix_expression .)
    INT_CONST       reduce using rule 149 (prefix_expression -> postfix_expression .)
    NIL_LITERAL     reduce using rule 149 (prefix_expression -> postfix_expression .)
    $end            reduce using rule 149 (prefix_expression -> postfix_expression .)
    RCURLY          reduce using rule 149 (prefix_expression -> postfix_expression .)
    CASE            reduce using rule 149 (prefix_expression -> postfix_expression .)
    DEFAULT         reduce using rule 149 (prefix_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 149 (prefix_expression -> postfix_expression .)
    RBRACK          reduce using rule 149 (prefix_expression -> postfix_expression .)
    LCURLY          reduce using rule 149 (prefix_expression -> postfix_expression .)
    DOT             shift and go to state 150
    LPAREN          shift and go to state 149
    LBRACK          shift and go to state 148

  ! DOT             [ reduce using rule 149 (prefix_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 149 (prefix_expression -> postfix_expression .) ]
  ! LBRACK          [ reduce using rule 149 (prefix_expression -> postfix_expression .) ]

    function_call_argument_clause  shift and go to state 147

state 77

    (55) control_transfer_statement -> return_statement .

    PRINT           reduce using rule 55 (control_transfer_statement -> return_statement .)
    IMPORT          reduce using rule 55 (control_transfer_statement -> return_statement .)
    LET             reduce using rule 55 (control_transfer_statement -> return_statement .)
    STRUCT          reduce using rule 55 (control_transfer_statement -> return_statement .)
    FOR             reduce using rule 55 (control_transfer_statement -> return_statement .)
    WHILE           reduce using rule 55 (control_transfer_statement -> return_statement .)
    REPEAT          reduce using rule 55 (control_transfer_statement -> return_statement .)
    IF              reduce using rule 55 (control_transfer_statement -> return_statement .)
    SWITCH          reduce using rule 55 (control_transfer_statement -> return_statement .)
    BREAK           reduce using rule 55 (control_transfer_statement -> return_statement .)
    CONTINUE        reduce using rule 55 (control_transfer_statement -> return_statement .)
    RETURN          reduce using rule 55 (control_transfer_statement -> return_statement .)
    AND             reduce using rule 55 (control_transfer_statement -> return_statement .)
    VAR             reduce using rule 55 (control_transfer_statement -> return_statement .)
    FUNC            reduce using rule 55 (control_transfer_statement -> return_statement .)
    PREFIX          reduce using rule 55 (control_transfer_statement -> return_statement .)
    POSTFIX         reduce using rule 55 (control_transfer_statement -> return_statement .)
    INFIX           reduce using rule 55 (control_transfer_statement -> return_statement .)
    DIV             reduce using rule 55 (control_transfer_statement -> return_statement .)
    EQUAL           reduce using rule 55 (control_transfer_statement -> return_statement .)
    SUB             reduce using rule 55 (control_transfer_statement -> return_statement .)
    ADD             reduce using rule 55 (control_transfer_statement -> return_statement .)
    EXCLAMATION     reduce using rule 55 (control_transfer_statement -> return_statement .)
    MUL             reduce using rule 55 (control_transfer_statement -> return_statement .)
    MOD             reduce using rule 55 (control_transfer_statement -> return_statement .)
    OR              reduce using rule 55 (control_transfer_statement -> return_statement .)
    LT              reduce using rule 55 (control_transfer_statement -> return_statement .)
    GT              reduce using rule 55 (control_transfer_statement -> return_statement .)
    CARET           reduce using rule 55 (control_transfer_statement -> return_statement .)
    TILDE           reduce using rule 55 (control_transfer_statement -> return_statement .)
    CONDOP          reduce using rule 55 (control_transfer_statement -> return_statement .)
    ANDAND          reduce using rule 55 (control_transfer_statement -> return_statement .)
    OROR            reduce using rule 55 (control_transfer_statement -> return_statement .)
    NOT             reduce using rule 55 (control_transfer_statement -> return_statement .)
    DOT             reduce using rule 55 (control_transfer_statement -> return_statement .)
    EQUALEQUAL      reduce using rule 55 (control_transfer_statement -> return_statement .)
    NOTEQUAL        reduce using rule 55 (control_transfer_statement -> return_statement .)
    LTE             reduce using rule 55 (control_transfer_statement -> return_statement .)
    GTE             reduce using rule 55 (control_transfer_statement -> return_statement .)
    IDENTIFIER      reduce using rule 55 (control_transfer_statement -> return_statement .)
    LPAREN          reduce using rule 55 (control_transfer_statement -> return_statement .)
    STRING_LITERAL  reduce using rule 55 (control_transfer_statement -> return_statement .)
    CHAR_CONST      reduce using rule 55 (control_transfer_statement -> return_statement .)
    FLOAT_CONST     reduce using rule 55 (control_transfer_statement -> return_statement .)
    INT_CONST       reduce using rule 55 (control_transfer_statement -> return_statement .)
    NIL_LITERAL     reduce using rule 55 (control_transfer_statement -> return_statement .)
    LBRACK          reduce using rule 55 (control_transfer_statement -> return_statement .)
    CASE            reduce using rule 55 (control_transfer_statement -> return_statement .)
    DEFAULT         reduce using rule 55 (control_transfer_statement -> return_statement .)
    RCURLY          reduce using rule 55 (control_transfer_statement -> return_statement .)
    $end            reduce using rule 55 (control_transfer_statement -> return_statement .)


state 78

    (234) operator -> LT .
    (248) conditional_operator -> LT .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for NIL_LITERAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LBRACK resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for COMMA resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for DOT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for PRINT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for IMPORT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LET resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for STRUCT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for FOR resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for WHILE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for IF resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for BREAK resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for RETURN resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for AND resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for VAR resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for FUNC resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for PREFIX resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for POSTFIX resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for INFIX resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for DIV resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for EQUAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for SUB resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for ADD resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for MUL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for MOD resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for OR resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for GT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for CARET resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for TILDE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for CONDOP resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for ANDAND resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for OROR resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for NOT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LTE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for GTE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for $end resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for RCURLY resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for CASE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 234 (operator -> LT .)
    DOT             reduce using rule 234 (operator -> LT .)
    PRINT           reduce using rule 234 (operator -> LT .)
    IMPORT          reduce using rule 234 (operator -> LT .)
    LET             reduce using rule 234 (operator -> LT .)
    STRUCT          reduce using rule 234 (operator -> LT .)
    FOR             reduce using rule 234 (operator -> LT .)
    WHILE           reduce using rule 234 (operator -> LT .)
    REPEAT          reduce using rule 234 (operator -> LT .)
    IF              reduce using rule 234 (operator -> LT .)
    SWITCH          reduce using rule 234 (operator -> LT .)
    BREAK           reduce using rule 234 (operator -> LT .)
    CONTINUE        reduce using rule 234 (operator -> LT .)
    RETURN          reduce using rule 234 (operator -> LT .)
    AND             reduce using rule 234 (operator -> LT .)
    VAR             reduce using rule 234 (operator -> LT .)
    FUNC            reduce using rule 234 (operator -> LT .)
    PREFIX          reduce using rule 234 (operator -> LT .)
    POSTFIX         reduce using rule 234 (operator -> LT .)
    INFIX           reduce using rule 234 (operator -> LT .)
    DIV             reduce using rule 234 (operator -> LT .)
    EQUAL           reduce using rule 234 (operator -> LT .)
    SUB             reduce using rule 234 (operator -> LT .)
    ADD             reduce using rule 234 (operator -> LT .)
    EXCLAMATION     reduce using rule 234 (operator -> LT .)
    MUL             reduce using rule 234 (operator -> LT .)
    MOD             reduce using rule 234 (operator -> LT .)
    OR              reduce using rule 234 (operator -> LT .)
    LT              reduce using rule 234 (operator -> LT .)
    GT              reduce using rule 234 (operator -> LT .)
    CARET           reduce using rule 234 (operator -> LT .)
    TILDE           reduce using rule 234 (operator -> LT .)
    CONDOP          reduce using rule 234 (operator -> LT .)
    ANDAND          reduce using rule 234 (operator -> LT .)
    OROR            reduce using rule 234 (operator -> LT .)
    NOT             reduce using rule 234 (operator -> LT .)
    EQUALEQUAL      reduce using rule 234 (operator -> LT .)
    NOTEQUAL        reduce using rule 234 (operator -> LT .)
    LTE             reduce using rule 234 (operator -> LT .)
    GTE             reduce using rule 234 (operator -> LT .)
    IDENTIFIER      reduce using rule 234 (operator -> LT .)
    LPAREN          reduce using rule 234 (operator -> LT .)
    STRING_LITERAL  reduce using rule 234 (operator -> LT .)
    CHAR_CONST      reduce using rule 234 (operator -> LT .)
    FLOAT_CONST     reduce using rule 234 (operator -> LT .)
    INT_CONST       reduce using rule 234 (operator -> LT .)
    NIL_LITERAL     reduce using rule 234 (operator -> LT .)
    LBRACK          reduce using rule 234 (operator -> LT .)
    $end            reduce using rule 234 (operator -> LT .)
    RCURLY          reduce using rule 234 (operator -> LT .)
    CASE            reduce using rule 234 (operator -> LT .)
    DEFAULT         reduce using rule 234 (operator -> LT .)
    COMMA           reduce using rule 234 (operator -> LT .)
    RPAREN          reduce using rule 234 (operator -> LT .)

  ! IDENTIFIER      [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LPAREN          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! STRING_LITERAL  [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! CHAR_CONST      [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! FLOAT_CONST     [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! INT_CONST       [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! NIL_LITERAL     [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LBRACK          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! COMMA           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! RPAREN          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! DOT             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! PRINT           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! IMPORT          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LET             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! STRUCT          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! FOR             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! WHILE           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! REPEAT          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! IF              [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! SWITCH          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! BREAK           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! CONTINUE        [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! RETURN          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! AND             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! VAR             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! FUNC            [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! PREFIX          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! POSTFIX         [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! INFIX           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! DIV             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! EQUAL           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! SUB             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! ADD             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! EXCLAMATION     [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! MUL             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! MOD             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! OR              [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LT              [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! GT              [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! CARET           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! TILDE           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! CONDOP          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! ANDAND          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! OROR            [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! NOT             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! EQUALEQUAL      [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! NOTEQUAL        [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LTE             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! GTE             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! $end            [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! RCURLY          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! CASE            [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! DEFAULT         [ reduce using rule 248 (conditional_operator -> LT .) ]


state 79

    (239) operator -> conditional_operator .

    DOT             reduce using rule 239 (operator -> conditional_operator .)
    PRINT           reduce using rule 239 (operator -> conditional_operator .)
    IMPORT          reduce using rule 239 (operator -> conditional_operator .)
    LET             reduce using rule 239 (operator -> conditional_operator .)
    STRUCT          reduce using rule 239 (operator -> conditional_operator .)
    FOR             reduce using rule 239 (operator -> conditional_operator .)
    WHILE           reduce using rule 239 (operator -> conditional_operator .)
    REPEAT          reduce using rule 239 (operator -> conditional_operator .)
    IF              reduce using rule 239 (operator -> conditional_operator .)
    SWITCH          reduce using rule 239 (operator -> conditional_operator .)
    BREAK           reduce using rule 239 (operator -> conditional_operator .)
    CONTINUE        reduce using rule 239 (operator -> conditional_operator .)
    RETURN          reduce using rule 239 (operator -> conditional_operator .)
    AND             reduce using rule 239 (operator -> conditional_operator .)
    VAR             reduce using rule 239 (operator -> conditional_operator .)
    FUNC            reduce using rule 239 (operator -> conditional_operator .)
    PREFIX          reduce using rule 239 (operator -> conditional_operator .)
    POSTFIX         reduce using rule 239 (operator -> conditional_operator .)
    INFIX           reduce using rule 239 (operator -> conditional_operator .)
    DIV             reduce using rule 239 (operator -> conditional_operator .)
    EQUAL           reduce using rule 239 (operator -> conditional_operator .)
    SUB             reduce using rule 239 (operator -> conditional_operator .)
    ADD             reduce using rule 239 (operator -> conditional_operator .)
    EXCLAMATION     reduce using rule 239 (operator -> conditional_operator .)
    MUL             reduce using rule 239 (operator -> conditional_operator .)
    MOD             reduce using rule 239 (operator -> conditional_operator .)
    OR              reduce using rule 239 (operator -> conditional_operator .)
    LT              reduce using rule 239 (operator -> conditional_operator .)
    GT              reduce using rule 239 (operator -> conditional_operator .)
    CARET           reduce using rule 239 (operator -> conditional_operator .)
    TILDE           reduce using rule 239 (operator -> conditional_operator .)
    CONDOP          reduce using rule 239 (operator -> conditional_operator .)
    ANDAND          reduce using rule 239 (operator -> conditional_operator .)
    OROR            reduce using rule 239 (operator -> conditional_operator .)
    NOT             reduce using rule 239 (operator -> conditional_operator .)
    EQUALEQUAL      reduce using rule 239 (operator -> conditional_operator .)
    NOTEQUAL        reduce using rule 239 (operator -> conditional_operator .)
    LTE             reduce using rule 239 (operator -> conditional_operator .)
    GTE             reduce using rule 239 (operator -> conditional_operator .)
    IDENTIFIER      reduce using rule 239 (operator -> conditional_operator .)
    LPAREN          reduce using rule 239 (operator -> conditional_operator .)
    STRING_LITERAL  reduce using rule 239 (operator -> conditional_operator .)
    CHAR_CONST      reduce using rule 239 (operator -> conditional_operator .)
    FLOAT_CONST     reduce using rule 239 (operator -> conditional_operator .)
    INT_CONST       reduce using rule 239 (operator -> conditional_operator .)
    NIL_LITERAL     reduce using rule 239 (operator -> conditional_operator .)
    LBRACK          reduce using rule 239 (operator -> conditional_operator .)
    $end            reduce using rule 239 (operator -> conditional_operator .)
    RCURLY          reduce using rule 239 (operator -> conditional_operator .)
    CASE            reduce using rule 239 (operator -> conditional_operator .)
    DEFAULT         reduce using rule 239 (operator -> conditional_operator .)
    COMMA           reduce using rule 239 (operator -> conditional_operator .)
    RPAREN          reduce using rule 239 (operator -> conditional_operator .)


state 80

    (61) declaration -> constant_declaration .

    PRINT           reduce using rule 61 (declaration -> constant_declaration .)
    IMPORT          reduce using rule 61 (declaration -> constant_declaration .)
    LET             reduce using rule 61 (declaration -> constant_declaration .)
    STRUCT          reduce using rule 61 (declaration -> constant_declaration .)
    FOR             reduce using rule 61 (declaration -> constant_declaration .)
    WHILE           reduce using rule 61 (declaration -> constant_declaration .)
    REPEAT          reduce using rule 61 (declaration -> constant_declaration .)
    IF              reduce using rule 61 (declaration -> constant_declaration .)
    SWITCH          reduce using rule 61 (declaration -> constant_declaration .)
    BREAK           reduce using rule 61 (declaration -> constant_declaration .)
    CONTINUE        reduce using rule 61 (declaration -> constant_declaration .)
    RETURN          reduce using rule 61 (declaration -> constant_declaration .)
    AND             reduce using rule 61 (declaration -> constant_declaration .)
    VAR             reduce using rule 61 (declaration -> constant_declaration .)
    FUNC            reduce using rule 61 (declaration -> constant_declaration .)
    PREFIX          reduce using rule 61 (declaration -> constant_declaration .)
    POSTFIX         reduce using rule 61 (declaration -> constant_declaration .)
    INFIX           reduce using rule 61 (declaration -> constant_declaration .)
    DIV             reduce using rule 61 (declaration -> constant_declaration .)
    EQUAL           reduce using rule 61 (declaration -> constant_declaration .)
    SUB             reduce using rule 61 (declaration -> constant_declaration .)
    ADD             reduce using rule 61 (declaration -> constant_declaration .)
    EXCLAMATION     reduce using rule 61 (declaration -> constant_declaration .)
    MUL             reduce using rule 61 (declaration -> constant_declaration .)
    MOD             reduce using rule 61 (declaration -> constant_declaration .)
    OR              reduce using rule 61 (declaration -> constant_declaration .)
    LT              reduce using rule 61 (declaration -> constant_declaration .)
    GT              reduce using rule 61 (declaration -> constant_declaration .)
    CARET           reduce using rule 61 (declaration -> constant_declaration .)
    TILDE           reduce using rule 61 (declaration -> constant_declaration .)
    CONDOP          reduce using rule 61 (declaration -> constant_declaration .)
    ANDAND          reduce using rule 61 (declaration -> constant_declaration .)
    OROR            reduce using rule 61 (declaration -> constant_declaration .)
    NOT             reduce using rule 61 (declaration -> constant_declaration .)
    DOT             reduce using rule 61 (declaration -> constant_declaration .)
    EQUALEQUAL      reduce using rule 61 (declaration -> constant_declaration .)
    NOTEQUAL        reduce using rule 61 (declaration -> constant_declaration .)
    LTE             reduce using rule 61 (declaration -> constant_declaration .)
    GTE             reduce using rule 61 (declaration -> constant_declaration .)
    IDENTIFIER      reduce using rule 61 (declaration -> constant_declaration .)
    LPAREN          reduce using rule 61 (declaration -> constant_declaration .)
    STRING_LITERAL  reduce using rule 61 (declaration -> constant_declaration .)
    CHAR_CONST      reduce using rule 61 (declaration -> constant_declaration .)
    FLOAT_CONST     reduce using rule 61 (declaration -> constant_declaration .)
    INT_CONST       reduce using rule 61 (declaration -> constant_declaration .)
    NIL_LITERAL     reduce using rule 61 (declaration -> constant_declaration .)
    LBRACK          reduce using rule 61 (declaration -> constant_declaration .)
    $end            reduce using rule 61 (declaration -> constant_declaration .)
    RCURLY          reduce using rule 61 (declaration -> constant_declaration .)
    CASE            reduce using rule 61 (declaration -> constant_declaration .)
    DEFAULT         reduce using rule 61 (declaration -> constant_declaration .)


state 81

    (33) branch_statement -> if_statement .

    PRINT           reduce using rule 33 (branch_statement -> if_statement .)
    IMPORT          reduce using rule 33 (branch_statement -> if_statement .)
    LET             reduce using rule 33 (branch_statement -> if_statement .)
    STRUCT          reduce using rule 33 (branch_statement -> if_statement .)
    FOR             reduce using rule 33 (branch_statement -> if_statement .)
    WHILE           reduce using rule 33 (branch_statement -> if_statement .)
    REPEAT          reduce using rule 33 (branch_statement -> if_statement .)
    IF              reduce using rule 33 (branch_statement -> if_statement .)
    SWITCH          reduce using rule 33 (branch_statement -> if_statement .)
    BREAK           reduce using rule 33 (branch_statement -> if_statement .)
    CONTINUE        reduce using rule 33 (branch_statement -> if_statement .)
    RETURN          reduce using rule 33 (branch_statement -> if_statement .)
    AND             reduce using rule 33 (branch_statement -> if_statement .)
    VAR             reduce using rule 33 (branch_statement -> if_statement .)
    FUNC            reduce using rule 33 (branch_statement -> if_statement .)
    PREFIX          reduce using rule 33 (branch_statement -> if_statement .)
    POSTFIX         reduce using rule 33 (branch_statement -> if_statement .)
    INFIX           reduce using rule 33 (branch_statement -> if_statement .)
    DIV             reduce using rule 33 (branch_statement -> if_statement .)
    EQUAL           reduce using rule 33 (branch_statement -> if_statement .)
    SUB             reduce using rule 33 (branch_statement -> if_statement .)
    ADD             reduce using rule 33 (branch_statement -> if_statement .)
    EXCLAMATION     reduce using rule 33 (branch_statement -> if_statement .)
    MUL             reduce using rule 33 (branch_statement -> if_statement .)
    MOD             reduce using rule 33 (branch_statement -> if_statement .)
    OR              reduce using rule 33 (branch_statement -> if_statement .)
    LT              reduce using rule 33 (branch_statement -> if_statement .)
    GT              reduce using rule 33 (branch_statement -> if_statement .)
    CARET           reduce using rule 33 (branch_statement -> if_statement .)
    TILDE           reduce using rule 33 (branch_statement -> if_statement .)
    CONDOP          reduce using rule 33 (branch_statement -> if_statement .)
    ANDAND          reduce using rule 33 (branch_statement -> if_statement .)
    OROR            reduce using rule 33 (branch_statement -> if_statement .)
    NOT             reduce using rule 33 (branch_statement -> if_statement .)
    DOT             reduce using rule 33 (branch_statement -> if_statement .)
    EQUALEQUAL      reduce using rule 33 (branch_statement -> if_statement .)
    NOTEQUAL        reduce using rule 33 (branch_statement -> if_statement .)
    LTE             reduce using rule 33 (branch_statement -> if_statement .)
    GTE             reduce using rule 33 (branch_statement -> if_statement .)
    IDENTIFIER      reduce using rule 33 (branch_statement -> if_statement .)
    LPAREN          reduce using rule 33 (branch_statement -> if_statement .)
    STRING_LITERAL  reduce using rule 33 (branch_statement -> if_statement .)
    CHAR_CONST      reduce using rule 33 (branch_statement -> if_statement .)
    FLOAT_CONST     reduce using rule 33 (branch_statement -> if_statement .)
    INT_CONST       reduce using rule 33 (branch_statement -> if_statement .)
    NIL_LITERAL     reduce using rule 33 (branch_statement -> if_statement .)
    LBRACK          reduce using rule 33 (branch_statement -> if_statement .)
    RCURLY          reduce using rule 33 (branch_statement -> if_statement .)
    CASE            reduce using rule 33 (branch_statement -> if_statement .)
    DEFAULT         reduce using rule 33 (branch_statement -> if_statement .)
    $end            reduce using rule 33 (branch_statement -> if_statement .)


state 82

    (161) literal_expression -> literal .

    DOT             reduce using rule 161 (literal_expression -> literal .)
    LPAREN          reduce using rule 161 (literal_expression -> literal .)
    LBRACK          reduce using rule 161 (literal_expression -> literal .)
    EQUAL           reduce using rule 161 (literal_expression -> literal .)
    EQUALEQUAL      reduce using rule 161 (literal_expression -> literal .)
    NOTEQUAL        reduce using rule 161 (literal_expression -> literal .)
    LTE             reduce using rule 161 (literal_expression -> literal .)
    GTE             reduce using rule 161 (literal_expression -> literal .)
    LT              reduce using rule 161 (literal_expression -> literal .)
    GT              reduce using rule 161 (literal_expression -> literal .)
    DIV             reduce using rule 161 (literal_expression -> literal .)
    SUB             reduce using rule 161 (literal_expression -> literal .)
    ADD             reduce using rule 161 (literal_expression -> literal .)
    EXCLAMATION     reduce using rule 161 (literal_expression -> literal .)
    MUL             reduce using rule 161 (literal_expression -> literal .)
    MOD             reduce using rule 161 (literal_expression -> literal .)
    AND             reduce using rule 161 (literal_expression -> literal .)
    OR              reduce using rule 161 (literal_expression -> literal .)
    CARET           reduce using rule 161 (literal_expression -> literal .)
    TILDE           reduce using rule 161 (literal_expression -> literal .)
    CONDOP          reduce using rule 161 (literal_expression -> literal .)
    ANDAND          reduce using rule 161 (literal_expression -> literal .)
    OROR            reduce using rule 161 (literal_expression -> literal .)
    NOT             reduce using rule 161 (literal_expression -> literal .)
    COMMA           reduce using rule 161 (literal_expression -> literal .)
    RBRACK          reduce using rule 161 (literal_expression -> literal .)
    RPAREN          reduce using rule 161 (literal_expression -> literal .)
    PRINT           reduce using rule 161 (literal_expression -> literal .)
    IMPORT          reduce using rule 161 (literal_expression -> literal .)
    LET             reduce using rule 161 (literal_expression -> literal .)
    STRUCT          reduce using rule 161 (literal_expression -> literal .)
    FOR             reduce using rule 161 (literal_expression -> literal .)
    WHILE           reduce using rule 161 (literal_expression -> literal .)
    REPEAT          reduce using rule 161 (literal_expression -> literal .)
    IF              reduce using rule 161 (literal_expression -> literal .)
    SWITCH          reduce using rule 161 (literal_expression -> literal .)
    BREAK           reduce using rule 161 (literal_expression -> literal .)
    CONTINUE        reduce using rule 161 (literal_expression -> literal .)
    RETURN          reduce using rule 161 (literal_expression -> literal .)
    VAR             reduce using rule 161 (literal_expression -> literal .)
    FUNC            reduce using rule 161 (literal_expression -> literal .)
    PREFIX          reduce using rule 161 (literal_expression -> literal .)
    POSTFIX         reduce using rule 161 (literal_expression -> literal .)
    INFIX           reduce using rule 161 (literal_expression -> literal .)
    IDENTIFIER      reduce using rule 161 (literal_expression -> literal .)
    STRING_LITERAL  reduce using rule 161 (literal_expression -> literal .)
    CHAR_CONST      reduce using rule 161 (literal_expression -> literal .)
    FLOAT_CONST     reduce using rule 161 (literal_expression -> literal .)
    INT_CONST       reduce using rule 161 (literal_expression -> literal .)
    NIL_LITERAL     reduce using rule 161 (literal_expression -> literal .)
    CASE            reduce using rule 161 (literal_expression -> literal .)
    DEFAULT         reduce using rule 161 (literal_expression -> literal .)
    RCURLY          reduce using rule 161 (literal_expression -> literal .)
    LCURLY          reduce using rule 161 (literal_expression -> literal .)
    $end            reduce using rule 161 (literal_expression -> literal .)
    SEMICOLON       reduce using rule 161 (literal_expression -> literal .)
    WHERE           reduce using rule 161 (literal_expression -> literal .)
    COLON           reduce using rule 161 (literal_expression -> literal .)


state 83

    (162) literal_expression -> array_literal .

    DOT             reduce using rule 162 (literal_expression -> array_literal .)
    LPAREN          reduce using rule 162 (literal_expression -> array_literal .)
    LBRACK          reduce using rule 162 (literal_expression -> array_literal .)
    EQUAL           reduce using rule 162 (literal_expression -> array_literal .)
    EQUALEQUAL      reduce using rule 162 (literal_expression -> array_literal .)
    NOTEQUAL        reduce using rule 162 (literal_expression -> array_literal .)
    LTE             reduce using rule 162 (literal_expression -> array_literal .)
    GTE             reduce using rule 162 (literal_expression -> array_literal .)
    LT              reduce using rule 162 (literal_expression -> array_literal .)
    GT              reduce using rule 162 (literal_expression -> array_literal .)
    DIV             reduce using rule 162 (literal_expression -> array_literal .)
    SUB             reduce using rule 162 (literal_expression -> array_literal .)
    ADD             reduce using rule 162 (literal_expression -> array_literal .)
    EXCLAMATION     reduce using rule 162 (literal_expression -> array_literal .)
    MUL             reduce using rule 162 (literal_expression -> array_literal .)
    MOD             reduce using rule 162 (literal_expression -> array_literal .)
    AND             reduce using rule 162 (literal_expression -> array_literal .)
    OR              reduce using rule 162 (literal_expression -> array_literal .)
    CARET           reduce using rule 162 (literal_expression -> array_literal .)
    TILDE           reduce using rule 162 (literal_expression -> array_literal .)
    CONDOP          reduce using rule 162 (literal_expression -> array_literal .)
    ANDAND          reduce using rule 162 (literal_expression -> array_literal .)
    OROR            reduce using rule 162 (literal_expression -> array_literal .)
    NOT             reduce using rule 162 (literal_expression -> array_literal .)
    COMMA           reduce using rule 162 (literal_expression -> array_literal .)
    RBRACK          reduce using rule 162 (literal_expression -> array_literal .)
    RPAREN          reduce using rule 162 (literal_expression -> array_literal .)
    PRINT           reduce using rule 162 (literal_expression -> array_literal .)
    IMPORT          reduce using rule 162 (literal_expression -> array_literal .)
    LET             reduce using rule 162 (literal_expression -> array_literal .)
    STRUCT          reduce using rule 162 (literal_expression -> array_literal .)
    FOR             reduce using rule 162 (literal_expression -> array_literal .)
    WHILE           reduce using rule 162 (literal_expression -> array_literal .)
    REPEAT          reduce using rule 162 (literal_expression -> array_literal .)
    IF              reduce using rule 162 (literal_expression -> array_literal .)
    SWITCH          reduce using rule 162 (literal_expression -> array_literal .)
    BREAK           reduce using rule 162 (literal_expression -> array_literal .)
    CONTINUE        reduce using rule 162 (literal_expression -> array_literal .)
    RETURN          reduce using rule 162 (literal_expression -> array_literal .)
    VAR             reduce using rule 162 (literal_expression -> array_literal .)
    FUNC            reduce using rule 162 (literal_expression -> array_literal .)
    PREFIX          reduce using rule 162 (literal_expression -> array_literal .)
    POSTFIX         reduce using rule 162 (literal_expression -> array_literal .)
    INFIX           reduce using rule 162 (literal_expression -> array_literal .)
    IDENTIFIER      reduce using rule 162 (literal_expression -> array_literal .)
    STRING_LITERAL  reduce using rule 162 (literal_expression -> array_literal .)
    CHAR_CONST      reduce using rule 162 (literal_expression -> array_literal .)
    FLOAT_CONST     reduce using rule 162 (literal_expression -> array_literal .)
    INT_CONST       reduce using rule 162 (literal_expression -> array_literal .)
    NIL_LITERAL     reduce using rule 162 (literal_expression -> array_literal .)
    CASE            reduce using rule 162 (literal_expression -> array_literal .)
    DEFAULT         reduce using rule 162 (literal_expression -> array_literal .)
    RCURLY          reduce using rule 162 (literal_expression -> array_literal .)
    LCURLY          reduce using rule 162 (literal_expression -> array_literal .)
    $end            reduce using rule 162 (literal_expression -> array_literal .)
    SEMICOLON       reduce using rule 162 (literal_expression -> array_literal .)
    WHERE           reduce using rule 162 (literal_expression -> array_literal .)
    COLON           reduce using rule 162 (literal_expression -> array_literal .)


state 84

    (169) parenthesized_expression -> LPAREN . expression RPAREN
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 151
    parenthesized_expression       shift and go to state 53

state 85

    (35) if_statement -> IF . condition_list code_block else_clause
    (36) if_statement -> IF . condition_list code_block
    (23) condition_list -> . condition commacond
    (26) condition -> . expression
    (27) condition -> . case_condition
    (28) condition -> . optional_binding_condition
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (29) case_condition -> . CASE pattern initializer
    (30) optional_binding_condition -> . LET pattern initializer
    (31) optional_binding_condition -> . VAR pattern initializer
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    CASE            shift and go to state 125
    LET             shift and go to state 128
    VAR             shift and go to state 126
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    optional_binding_condition     shift and go to state 122
    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    condition_list                 shift and go to state 152
    postfix_expression             shift and go to state 76
    case_condition                 shift and go to state 124
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 23
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    condition                      shift and go to state 127
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    expression                     shift and go to state 129

state 86

    (120) struct_declaration -> STRUCT . struct_name struct_body
    (121) struct_name -> . declaration_identifier
    (220) declaration_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 63

    struct_name                    shift and go to state 153
    declaration_identifier         shift and go to state 154

state 87

    (8) statement -> control_transfer_statement .

    PRINT           reduce using rule 8 (statement -> control_transfer_statement .)
    IMPORT          reduce using rule 8 (statement -> control_transfer_statement .)
    LET             reduce using rule 8 (statement -> control_transfer_statement .)
    STRUCT          reduce using rule 8 (statement -> control_transfer_statement .)
    FOR             reduce using rule 8 (statement -> control_transfer_statement .)
    WHILE           reduce using rule 8 (statement -> control_transfer_statement .)
    REPEAT          reduce using rule 8 (statement -> control_transfer_statement .)
    IF              reduce using rule 8 (statement -> control_transfer_statement .)
    SWITCH          reduce using rule 8 (statement -> control_transfer_statement .)
    BREAK           reduce using rule 8 (statement -> control_transfer_statement .)
    CONTINUE        reduce using rule 8 (statement -> control_transfer_statement .)
    RETURN          reduce using rule 8 (statement -> control_transfer_statement .)
    AND             reduce using rule 8 (statement -> control_transfer_statement .)
    VAR             reduce using rule 8 (statement -> control_transfer_statement .)
    FUNC            reduce using rule 8 (statement -> control_transfer_statement .)
    PREFIX          reduce using rule 8 (statement -> control_transfer_statement .)
    POSTFIX         reduce using rule 8 (statement -> control_transfer_statement .)
    INFIX           reduce using rule 8 (statement -> control_transfer_statement .)
    DIV             reduce using rule 8 (statement -> control_transfer_statement .)
    EQUAL           reduce using rule 8 (statement -> control_transfer_statement .)
    SUB             reduce using rule 8 (statement -> control_transfer_statement .)
    ADD             reduce using rule 8 (statement -> control_transfer_statement .)
    EXCLAMATION     reduce using rule 8 (statement -> control_transfer_statement .)
    MUL             reduce using rule 8 (statement -> control_transfer_statement .)
    MOD             reduce using rule 8 (statement -> control_transfer_statement .)
    OR              reduce using rule 8 (statement -> control_transfer_statement .)
    LT              reduce using rule 8 (statement -> control_transfer_statement .)
    GT              reduce using rule 8 (statement -> control_transfer_statement .)
    CARET           reduce using rule 8 (statement -> control_transfer_statement .)
    TILDE           reduce using rule 8 (statement -> control_transfer_statement .)
    CONDOP          reduce using rule 8 (statement -> control_transfer_statement .)
    ANDAND          reduce using rule 8 (statement -> control_transfer_statement .)
    OROR            reduce using rule 8 (statement -> control_transfer_statement .)
    NOT             reduce using rule 8 (statement -> control_transfer_statement .)
    DOT             reduce using rule 8 (statement -> control_transfer_statement .)
    EQUALEQUAL      reduce using rule 8 (statement -> control_transfer_statement .)
    NOTEQUAL        reduce using rule 8 (statement -> control_transfer_statement .)
    LTE             reduce using rule 8 (statement -> control_transfer_statement .)
    GTE             reduce using rule 8 (statement -> control_transfer_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> control_transfer_statement .)
    LPAREN          reduce using rule 8 (statement -> control_transfer_statement .)
    STRING_LITERAL  reduce using rule 8 (statement -> control_transfer_statement .)
    CHAR_CONST      reduce using rule 8 (statement -> control_transfer_statement .)
    FLOAT_CONST     reduce using rule 8 (statement -> control_transfer_statement .)
    INT_CONST       reduce using rule 8 (statement -> control_transfer_statement .)
    NIL_LITERAL     reduce using rule 8 (statement -> control_transfer_statement .)
    LBRACK          reduce using rule 8 (statement -> control_transfer_statement .)
    $end            reduce using rule 8 (statement -> control_transfer_statement .)
    RCURLY          reduce using rule 8 (statement -> control_transfer_statement .)
    CASE            reduce using rule 8 (statement -> control_transfer_statement .)
    DEFAULT         reduce using rule 8 (statement -> control_transfer_statement .)


state 88

    (130) postfix_operator_declaration -> POSTFIX OPERATOR . operator
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT

    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74

    operator                       shift and go to state 155
    conditional_operator           shift and go to state 79

state 89

    (148) prefix_expression -> prefix_operator postfix_expression .
    (171) postfix_expression -> postfix_expression . function_call_argument_clause
    (172) postfix_expression -> postfix_expression . DOT INIT
    (173) postfix_expression -> postfix_expression . DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> postfix_expression . DOT INT_CONST
    (175) postfix_expression -> postfix_expression . DOT declaration_identifier
    (176) postfix_expression -> postfix_expression . DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> postfix_expression . LPAREN argument_names RPAREN
    (178) postfix_expression -> postfix_expression . DOT SELF
    (179) postfix_expression -> postfix_expression . LBRACK expression_list RBRACK
    (180) function_call_argument_clause -> . LPAREN RPAREN
    (181) function_call_argument_clause -> . LPAREN function_call_argument_list RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    EQUAL           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    EQUALEQUAL      reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    NOTEQUAL        reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    LTE             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    GTE             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    LT              reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    GT              reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    DIV             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    SUB             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    ADD             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    EXCLAMATION     reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    MUL             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    MOD             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    AND             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    OR              reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    CARET           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    TILDE           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    CONDOP          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    ANDAND          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    OROR            reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    NOT             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    COMMA           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    RPAREN          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    WHERE           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    COLON           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    PRINT           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    IMPORT          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    LET             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    STRUCT          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    FOR             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    WHILE           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    REPEAT          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    IF              reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    SWITCH          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    BREAK           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    CONTINUE        reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    RETURN          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    VAR             reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    FUNC            reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    PREFIX          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    POSTFIX         reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    INFIX           reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    IDENTIFIER      reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    STRING_LITERAL  reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    CHAR_CONST      reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    FLOAT_CONST     reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    INT_CONST       reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    NIL_LITERAL     reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    $end            reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    RCURLY          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    CASE            reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    DEFAULT         reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    SEMICOLON       reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    RBRACK          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    LCURLY          reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .)
    DOT             shift and go to state 150
    LPAREN          shift and go to state 149
    LBRACK          shift and go to state 148

  ! DOT             [ reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .) ]
  ! LPAREN          [ reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .) ]
  ! LBRACK          [ reduce using rule 148 (prefix_expression -> prefix_operator postfix_expression .) ]

    function_call_argument_clause  shift and go to state 147

state 90

    (72) import_kind -> TYPEALIAS .

    IDENTIFIER      reduce using rule 72 (import_kind -> TYPEALIAS .)
    DIV             reduce using rule 72 (import_kind -> TYPEALIAS .)
    EQUAL           reduce using rule 72 (import_kind -> TYPEALIAS .)
    SUB             reduce using rule 72 (import_kind -> TYPEALIAS .)
    ADD             reduce using rule 72 (import_kind -> TYPEALIAS .)
    EXCLAMATION     reduce using rule 72 (import_kind -> TYPEALIAS .)
    MUL             reduce using rule 72 (import_kind -> TYPEALIAS .)
    MOD             reduce using rule 72 (import_kind -> TYPEALIAS .)
    AND             reduce using rule 72 (import_kind -> TYPEALIAS .)
    OR              reduce using rule 72 (import_kind -> TYPEALIAS .)
    LT              reduce using rule 72 (import_kind -> TYPEALIAS .)
    GT              reduce using rule 72 (import_kind -> TYPEALIAS .)
    CARET           reduce using rule 72 (import_kind -> TYPEALIAS .)
    TILDE           reduce using rule 72 (import_kind -> TYPEALIAS .)
    CONDOP          reduce using rule 72 (import_kind -> TYPEALIAS .)
    ANDAND          reduce using rule 72 (import_kind -> TYPEALIAS .)
    OROR            reduce using rule 72 (import_kind -> TYPEALIAS .)
    NOT             reduce using rule 72 (import_kind -> TYPEALIAS .)
    DOT             reduce using rule 72 (import_kind -> TYPEALIAS .)
    EQUALEQUAL      reduce using rule 72 (import_kind -> TYPEALIAS .)
    NOTEQUAL        reduce using rule 72 (import_kind -> TYPEALIAS .)
    LTE             reduce using rule 72 (import_kind -> TYPEALIAS .)
    GTE             reduce using rule 72 (import_kind -> TYPEALIAS .)


state 91

    (80) import_path_identifier -> operator .

    DOT             reduce using rule 80 (import_path_identifier -> operator .)
    PRINT           reduce using rule 80 (import_path_identifier -> operator .)
    IMPORT          reduce using rule 80 (import_path_identifier -> operator .)
    LET             reduce using rule 80 (import_path_identifier -> operator .)
    STRUCT          reduce using rule 80 (import_path_identifier -> operator .)
    FOR             reduce using rule 80 (import_path_identifier -> operator .)
    WHILE           reduce using rule 80 (import_path_identifier -> operator .)
    REPEAT          reduce using rule 80 (import_path_identifier -> operator .)
    IF              reduce using rule 80 (import_path_identifier -> operator .)
    SWITCH          reduce using rule 80 (import_path_identifier -> operator .)
    BREAK           reduce using rule 80 (import_path_identifier -> operator .)
    CONTINUE        reduce using rule 80 (import_path_identifier -> operator .)
    RETURN          reduce using rule 80 (import_path_identifier -> operator .)
    AND             reduce using rule 80 (import_path_identifier -> operator .)
    VAR             reduce using rule 80 (import_path_identifier -> operator .)
    FUNC            reduce using rule 80 (import_path_identifier -> operator .)
    PREFIX          reduce using rule 80 (import_path_identifier -> operator .)
    POSTFIX         reduce using rule 80 (import_path_identifier -> operator .)
    INFIX           reduce using rule 80 (import_path_identifier -> operator .)
    DIV             reduce using rule 80 (import_path_identifier -> operator .)
    EQUAL           reduce using rule 80 (import_path_identifier -> operator .)
    SUB             reduce using rule 80 (import_path_identifier -> operator .)
    ADD             reduce using rule 80 (import_path_identifier -> operator .)
    EXCLAMATION     reduce using rule 80 (import_path_identifier -> operator .)
    MUL             reduce using rule 80 (import_path_identifier -> operator .)
    MOD             reduce using rule 80 (import_path_identifier -> operator .)
    OR              reduce using rule 80 (import_path_identifier -> operator .)
    LT              reduce using rule 80 (import_path_identifier -> operator .)
    GT              reduce using rule 80 (import_path_identifier -> operator .)
    CARET           reduce using rule 80 (import_path_identifier -> operator .)
    TILDE           reduce using rule 80 (import_path_identifier -> operator .)
    CONDOP          reduce using rule 80 (import_path_identifier -> operator .)
    ANDAND          reduce using rule 80 (import_path_identifier -> operator .)
    OROR            reduce using rule 80 (import_path_identifier -> operator .)
    NOT             reduce using rule 80 (import_path_identifier -> operator .)
    EQUALEQUAL      reduce using rule 80 (import_path_identifier -> operator .)
    NOTEQUAL        reduce using rule 80 (import_path_identifier -> operator .)
    LTE             reduce using rule 80 (import_path_identifier -> operator .)
    GTE             reduce using rule 80 (import_path_identifier -> operator .)
    IDENTIFIER      reduce using rule 80 (import_path_identifier -> operator .)
    LPAREN          reduce using rule 80 (import_path_identifier -> operator .)
    STRING_LITERAL  reduce using rule 80 (import_path_identifier -> operator .)
    CHAR_CONST      reduce using rule 80 (import_path_identifier -> operator .)
    FLOAT_CONST     reduce using rule 80 (import_path_identifier -> operator .)
    INT_CONST       reduce using rule 80 (import_path_identifier -> operator .)
    NIL_LITERAL     reduce using rule 80 (import_path_identifier -> operator .)
    LBRACK          reduce using rule 80 (import_path_identifier -> operator .)
    $end            reduce using rule 80 (import_path_identifier -> operator .)
    RCURLY          reduce using rule 80 (import_path_identifier -> operator .)
    CASE            reduce using rule 80 (import_path_identifier -> operator .)
    DEFAULT         reduce using rule 80 (import_path_identifier -> operator .)


state 92

    (70) import_declaration -> IMPORT import_kind . import_path
    (76) import_path -> . import_path_identifier dot_import_path_identifier
    (79) import_path_identifier -> . declaration_identifier
    (80) import_path_identifier -> . operator
    (220) declaration_identifier -> . IDENTIFIER
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT

    IDENTIFIER      shift and go to state 63
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74

    operator                       shift and go to state 91
    import_path_identifier         shift and go to state 93
    conditional_operator           shift and go to state 79
    import_path                    shift and go to state 156
    declaration_identifier         shift and go to state 95

state 93

    (76) import_path -> import_path_identifier . dot_import_path_identifier
    (77) dot_import_path_identifier -> . DOT import_path_identifier dot_import_path_identifier
    (78) dot_import_path_identifier -> .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 158
    PRINT           reduce using rule 78 (dot_import_path_identifier -> .)
    IMPORT          reduce using rule 78 (dot_import_path_identifier -> .)
    LET             reduce using rule 78 (dot_import_path_identifier -> .)
    STRUCT          reduce using rule 78 (dot_import_path_identifier -> .)
    FOR             reduce using rule 78 (dot_import_path_identifier -> .)
    WHILE           reduce using rule 78 (dot_import_path_identifier -> .)
    REPEAT          reduce using rule 78 (dot_import_path_identifier -> .)
    IF              reduce using rule 78 (dot_import_path_identifier -> .)
    SWITCH          reduce using rule 78 (dot_import_path_identifier -> .)
    BREAK           reduce using rule 78 (dot_import_path_identifier -> .)
    CONTINUE        reduce using rule 78 (dot_import_path_identifier -> .)
    RETURN          reduce using rule 78 (dot_import_path_identifier -> .)
    AND             reduce using rule 78 (dot_import_path_identifier -> .)
    VAR             reduce using rule 78 (dot_import_path_identifier -> .)
    FUNC            reduce using rule 78 (dot_import_path_identifier -> .)
    PREFIX          reduce using rule 78 (dot_import_path_identifier -> .)
    POSTFIX         reduce using rule 78 (dot_import_path_identifier -> .)
    INFIX           reduce using rule 78 (dot_import_path_identifier -> .)
    DIV             reduce using rule 78 (dot_import_path_identifier -> .)
    EQUAL           reduce using rule 78 (dot_import_path_identifier -> .)
    SUB             reduce using rule 78 (dot_import_path_identifier -> .)
    ADD             reduce using rule 78 (dot_import_path_identifier -> .)
    EXCLAMATION     reduce using rule 78 (dot_import_path_identifier -> .)
    MUL             reduce using rule 78 (dot_import_path_identifier -> .)
    MOD             reduce using rule 78 (dot_import_path_identifier -> .)
    OR              reduce using rule 78 (dot_import_path_identifier -> .)
    LT              reduce using rule 78 (dot_import_path_identifier -> .)
    GT              reduce using rule 78 (dot_import_path_identifier -> .)
    CARET           reduce using rule 78 (dot_import_path_identifier -> .)
    TILDE           reduce using rule 78 (dot_import_path_identifier -> .)
    CONDOP          reduce using rule 78 (dot_import_path_identifier -> .)
    ANDAND          reduce using rule 78 (dot_import_path_identifier -> .)
    OROR            reduce using rule 78 (dot_import_path_identifier -> .)
    NOT             reduce using rule 78 (dot_import_path_identifier -> .)
    EQUALEQUAL      reduce using rule 78 (dot_import_path_identifier -> .)
    NOTEQUAL        reduce using rule 78 (dot_import_path_identifier -> .)
    LTE             reduce using rule 78 (dot_import_path_identifier -> .)
    GTE             reduce using rule 78 (dot_import_path_identifier -> .)
    IDENTIFIER      reduce using rule 78 (dot_import_path_identifier -> .)
    LPAREN          reduce using rule 78 (dot_import_path_identifier -> .)
    STRING_LITERAL  reduce using rule 78 (dot_import_path_identifier -> .)
    CHAR_CONST      reduce using rule 78 (dot_import_path_identifier -> .)
    FLOAT_CONST     reduce using rule 78 (dot_import_path_identifier -> .)
    INT_CONST       reduce using rule 78 (dot_import_path_identifier -> .)
    NIL_LITERAL     reduce using rule 78 (dot_import_path_identifier -> .)
    LBRACK          reduce using rule 78 (dot_import_path_identifier -> .)
    $end            reduce using rule 78 (dot_import_path_identifier -> .)
    RCURLY          reduce using rule 78 (dot_import_path_identifier -> .)
    CASE            reduce using rule 78 (dot_import_path_identifier -> .)
    DEFAULT         reduce using rule 78 (dot_import_path_identifier -> .)

  ! DOT             [ reduce using rule 78 (dot_import_path_identifier -> .) ]

    dot_import_path_identifier     shift and go to state 157

state 94

    (71) import_declaration -> IMPORT import_path .

    PRINT           reduce using rule 71 (import_declaration -> IMPORT import_path .)
    IMPORT          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    LET             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    STRUCT          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    FOR             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    WHILE           reduce using rule 71 (import_declaration -> IMPORT import_path .)
    REPEAT          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    IF              reduce using rule 71 (import_declaration -> IMPORT import_path .)
    SWITCH          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    BREAK           reduce using rule 71 (import_declaration -> IMPORT import_path .)
    CONTINUE        reduce using rule 71 (import_declaration -> IMPORT import_path .)
    RETURN          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    AND             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    VAR             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    FUNC            reduce using rule 71 (import_declaration -> IMPORT import_path .)
    PREFIX          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    POSTFIX         reduce using rule 71 (import_declaration -> IMPORT import_path .)
    INFIX           reduce using rule 71 (import_declaration -> IMPORT import_path .)
    DIV             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    EQUAL           reduce using rule 71 (import_declaration -> IMPORT import_path .)
    SUB             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    ADD             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    EXCLAMATION     reduce using rule 71 (import_declaration -> IMPORT import_path .)
    MUL             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    MOD             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    OR              reduce using rule 71 (import_declaration -> IMPORT import_path .)
    LT              reduce using rule 71 (import_declaration -> IMPORT import_path .)
    GT              reduce using rule 71 (import_declaration -> IMPORT import_path .)
    CARET           reduce using rule 71 (import_declaration -> IMPORT import_path .)
    TILDE           reduce using rule 71 (import_declaration -> IMPORT import_path .)
    CONDOP          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    ANDAND          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    OROR            reduce using rule 71 (import_declaration -> IMPORT import_path .)
    NOT             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    DOT             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    EQUALEQUAL      reduce using rule 71 (import_declaration -> IMPORT import_path .)
    NOTEQUAL        reduce using rule 71 (import_declaration -> IMPORT import_path .)
    LTE             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    GTE             reduce using rule 71 (import_declaration -> IMPORT import_path .)
    IDENTIFIER      reduce using rule 71 (import_declaration -> IMPORT import_path .)
    LPAREN          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    STRING_LITERAL  reduce using rule 71 (import_declaration -> IMPORT import_path .)
    CHAR_CONST      reduce using rule 71 (import_declaration -> IMPORT import_path .)
    FLOAT_CONST     reduce using rule 71 (import_declaration -> IMPORT import_path .)
    INT_CONST       reduce using rule 71 (import_declaration -> IMPORT import_path .)
    NIL_LITERAL     reduce using rule 71 (import_declaration -> IMPORT import_path .)
    LBRACK          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    CASE            reduce using rule 71 (import_declaration -> IMPORT import_path .)
    DEFAULT         reduce using rule 71 (import_declaration -> IMPORT import_path .)
    RCURLY          reduce using rule 71 (import_declaration -> IMPORT import_path .)
    $end            reduce using rule 71 (import_declaration -> IMPORT import_path .)


state 95

    (79) import_path_identifier -> declaration_identifier .

    DOT             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    PRINT           reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    IMPORT          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    LET             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    STRUCT          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    FOR             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    WHILE           reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    REPEAT          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    IF              reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    SWITCH          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    BREAK           reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    CONTINUE        reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    RETURN          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    AND             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    VAR             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    FUNC            reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    PREFIX          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    POSTFIX         reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    INFIX           reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    DIV             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    EQUAL           reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    SUB             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    ADD             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    EXCLAMATION     reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    MUL             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    MOD             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    OR              reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    LT              reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    GT              reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    CARET           reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    TILDE           reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    CONDOP          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    ANDAND          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    OROR            reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    NOT             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    EQUALEQUAL      reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    NOTEQUAL        reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    LTE             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    GTE             reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    IDENTIFIER      reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    LPAREN          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    STRING_LITERAL  reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    CHAR_CONST      reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    FLOAT_CONST     reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    INT_CONST       reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    NIL_LITERAL     reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    LBRACK          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    $end            reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    RCURLY          reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    CASE            reduce using rule 79 (import_path_identifier -> declaration_identifier .)
    DEFAULT         reduce using rule 79 (import_path_identifier -> declaration_identifier .)


state 96

    (75) import_kind -> FUNC .

    IDENTIFIER      reduce using rule 75 (import_kind -> FUNC .)
    DIV             reduce using rule 75 (import_kind -> FUNC .)
    EQUAL           reduce using rule 75 (import_kind -> FUNC .)
    SUB             reduce using rule 75 (import_kind -> FUNC .)
    ADD             reduce using rule 75 (import_kind -> FUNC .)
    EXCLAMATION     reduce using rule 75 (import_kind -> FUNC .)
    MUL             reduce using rule 75 (import_kind -> FUNC .)
    MOD             reduce using rule 75 (import_kind -> FUNC .)
    AND             reduce using rule 75 (import_kind -> FUNC .)
    OR              reduce using rule 75 (import_kind -> FUNC .)
    LT              reduce using rule 75 (import_kind -> FUNC .)
    GT              reduce using rule 75 (import_kind -> FUNC .)
    CARET           reduce using rule 75 (import_kind -> FUNC .)
    TILDE           reduce using rule 75 (import_kind -> FUNC .)
    CONDOP          reduce using rule 75 (import_kind -> FUNC .)
    ANDAND          reduce using rule 75 (import_kind -> FUNC .)
    OROR            reduce using rule 75 (import_kind -> FUNC .)
    NOT             reduce using rule 75 (import_kind -> FUNC .)
    DOT             reduce using rule 75 (import_kind -> FUNC .)
    EQUALEQUAL      reduce using rule 75 (import_kind -> FUNC .)
    NOTEQUAL        reduce using rule 75 (import_kind -> FUNC .)
    LTE             reduce using rule 75 (import_kind -> FUNC .)
    GTE             reduce using rule 75 (import_kind -> FUNC .)


state 97

    (74) import_kind -> VAR .

    IDENTIFIER      reduce using rule 74 (import_kind -> VAR .)
    DIV             reduce using rule 74 (import_kind -> VAR .)
    EQUAL           reduce using rule 74 (import_kind -> VAR .)
    SUB             reduce using rule 74 (import_kind -> VAR .)
    ADD             reduce using rule 74 (import_kind -> VAR .)
    EXCLAMATION     reduce using rule 74 (import_kind -> VAR .)
    MUL             reduce using rule 74 (import_kind -> VAR .)
    MOD             reduce using rule 74 (import_kind -> VAR .)
    AND             reduce using rule 74 (import_kind -> VAR .)
    OR              reduce using rule 74 (import_kind -> VAR .)
    LT              reduce using rule 74 (import_kind -> VAR .)
    GT              reduce using rule 74 (import_kind -> VAR .)
    CARET           reduce using rule 74 (import_kind -> VAR .)
    TILDE           reduce using rule 74 (import_kind -> VAR .)
    CONDOP          reduce using rule 74 (import_kind -> VAR .)
    ANDAND          reduce using rule 74 (import_kind -> VAR .)
    OROR            reduce using rule 74 (import_kind -> VAR .)
    NOT             reduce using rule 74 (import_kind -> VAR .)
    DOT             reduce using rule 74 (import_kind -> VAR .)
    EQUALEQUAL      reduce using rule 74 (import_kind -> VAR .)
    NOTEQUAL        reduce using rule 74 (import_kind -> VAR .)
    LTE             reduce using rule 74 (import_kind -> VAR .)
    GTE             reduce using rule 74 (import_kind -> VAR .)


state 98

    (232) operator -> AND .

    AND             reduce using rule 232 (operator -> AND .)
    DIV             reduce using rule 232 (operator -> AND .)
    EQUAL           reduce using rule 232 (operator -> AND .)
    SUB             reduce using rule 232 (operator -> AND .)
    ADD             reduce using rule 232 (operator -> AND .)
    EXCLAMATION     reduce using rule 232 (operator -> AND .)
    MUL             reduce using rule 232 (operator -> AND .)
    MOD             reduce using rule 232 (operator -> AND .)
    OR              reduce using rule 232 (operator -> AND .)
    LT              reduce using rule 232 (operator -> AND .)
    GT              reduce using rule 232 (operator -> AND .)
    CARET           reduce using rule 232 (operator -> AND .)
    TILDE           reduce using rule 232 (operator -> AND .)
    CONDOP          reduce using rule 232 (operator -> AND .)
    ANDAND          reduce using rule 232 (operator -> AND .)
    OROR            reduce using rule 232 (operator -> AND .)
    NOT             reduce using rule 232 (operator -> AND .)
    DOT             reduce using rule 232 (operator -> AND .)
    EQUALEQUAL      reduce using rule 232 (operator -> AND .)
    NOTEQUAL        reduce using rule 232 (operator -> AND .)
    LTE             reduce using rule 232 (operator -> AND .)
    GTE             reduce using rule 232 (operator -> AND .)
    IDENTIFIER      reduce using rule 232 (operator -> AND .)
    LPAREN          reduce using rule 232 (operator -> AND .)
    STRING_LITERAL  reduce using rule 232 (operator -> AND .)
    CHAR_CONST      reduce using rule 232 (operator -> AND .)
    FLOAT_CONST     reduce using rule 232 (operator -> AND .)
    INT_CONST       reduce using rule 232 (operator -> AND .)
    NIL_LITERAL     reduce using rule 232 (operator -> AND .)
    LBRACK          reduce using rule 232 (operator -> AND .)
    PRINT           reduce using rule 232 (operator -> AND .)
    IMPORT          reduce using rule 232 (operator -> AND .)
    LET             reduce using rule 232 (operator -> AND .)
    STRUCT          reduce using rule 232 (operator -> AND .)
    FOR             reduce using rule 232 (operator -> AND .)
    WHILE           reduce using rule 232 (operator -> AND .)
    REPEAT          reduce using rule 232 (operator -> AND .)
    IF              reduce using rule 232 (operator -> AND .)
    SWITCH          reduce using rule 232 (operator -> AND .)
    BREAK           reduce using rule 232 (operator -> AND .)
    CONTINUE        reduce using rule 232 (operator -> AND .)
    RETURN          reduce using rule 232 (operator -> AND .)
    VAR             reduce using rule 232 (operator -> AND .)
    FUNC            reduce using rule 232 (operator -> AND .)
    PREFIX          reduce using rule 232 (operator -> AND .)
    POSTFIX         reduce using rule 232 (operator -> AND .)
    INFIX           reduce using rule 232 (operator -> AND .)
    $end            reduce using rule 232 (operator -> AND .)
    RCURLY          reduce using rule 232 (operator -> AND .)
    CASE            reduce using rule 232 (operator -> AND .)
    DEFAULT         reduce using rule 232 (operator -> AND .)


state 99

    (73) import_kind -> STRUCT .

    IDENTIFIER      reduce using rule 73 (import_kind -> STRUCT .)
    DIV             reduce using rule 73 (import_kind -> STRUCT .)
    EQUAL           reduce using rule 73 (import_kind -> STRUCT .)
    SUB             reduce using rule 73 (import_kind -> STRUCT .)
    ADD             reduce using rule 73 (import_kind -> STRUCT .)
    EXCLAMATION     reduce using rule 73 (import_kind -> STRUCT .)
    MUL             reduce using rule 73 (import_kind -> STRUCT .)
    MOD             reduce using rule 73 (import_kind -> STRUCT .)
    AND             reduce using rule 73 (import_kind -> STRUCT .)
    OR              reduce using rule 73 (import_kind -> STRUCT .)
    LT              reduce using rule 73 (import_kind -> STRUCT .)
    GT              reduce using rule 73 (import_kind -> STRUCT .)
    CARET           reduce using rule 73 (import_kind -> STRUCT .)
    TILDE           reduce using rule 73 (import_kind -> STRUCT .)
    CONDOP          reduce using rule 73 (import_kind -> STRUCT .)
    ANDAND          reduce using rule 73 (import_kind -> STRUCT .)
    OROR            reduce using rule 73 (import_kind -> STRUCT .)
    NOT             reduce using rule 73 (import_kind -> STRUCT .)
    DOT             reduce using rule 73 (import_kind -> STRUCT .)
    EQUALEQUAL      reduce using rule 73 (import_kind -> STRUCT .)
    NOTEQUAL        reduce using rule 73 (import_kind -> STRUCT .)
    LTE             reduce using rule 73 (import_kind -> STRUCT .)
    GTE             reduce using rule 73 (import_kind -> STRUCT .)


state 100

    (58) return_statement -> RETURN expression .

    PRINT           reduce using rule 58 (return_statement -> RETURN expression .)
    IMPORT          reduce using rule 58 (return_statement -> RETURN expression .)
    LET             reduce using rule 58 (return_statement -> RETURN expression .)
    STRUCT          reduce using rule 58 (return_statement -> RETURN expression .)
    FOR             reduce using rule 58 (return_statement -> RETURN expression .)
    WHILE           reduce using rule 58 (return_statement -> RETURN expression .)
    REPEAT          reduce using rule 58 (return_statement -> RETURN expression .)
    IF              reduce using rule 58 (return_statement -> RETURN expression .)
    SWITCH          reduce using rule 58 (return_statement -> RETURN expression .)
    BREAK           reduce using rule 58 (return_statement -> RETURN expression .)
    CONTINUE        reduce using rule 58 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 58 (return_statement -> RETURN expression .)
    AND             reduce using rule 58 (return_statement -> RETURN expression .)
    VAR             reduce using rule 58 (return_statement -> RETURN expression .)
    FUNC            reduce using rule 58 (return_statement -> RETURN expression .)
    PREFIX          reduce using rule 58 (return_statement -> RETURN expression .)
    POSTFIX         reduce using rule 58 (return_statement -> RETURN expression .)
    INFIX           reduce using rule 58 (return_statement -> RETURN expression .)
    DIV             reduce using rule 58 (return_statement -> RETURN expression .)
    EQUAL           reduce using rule 58 (return_statement -> RETURN expression .)
    SUB             reduce using rule 58 (return_statement -> RETURN expression .)
    ADD             reduce using rule 58 (return_statement -> RETURN expression .)
    EXCLAMATION     reduce using rule 58 (return_statement -> RETURN expression .)
    MUL             reduce using rule 58 (return_statement -> RETURN expression .)
    MOD             reduce using rule 58 (return_statement -> RETURN expression .)
    OR              reduce using rule 58 (return_statement -> RETURN expression .)
    LT              reduce using rule 58 (return_statement -> RETURN expression .)
    GT              reduce using rule 58 (return_statement -> RETURN expression .)
    CARET           reduce using rule 58 (return_statement -> RETURN expression .)
    TILDE           reduce using rule 58 (return_statement -> RETURN expression .)
    CONDOP          reduce using rule 58 (return_statement -> RETURN expression .)
    ANDAND          reduce using rule 58 (return_statement -> RETURN expression .)
    OROR            reduce using rule 58 (return_statement -> RETURN expression .)
    NOT             reduce using rule 58 (return_statement -> RETURN expression .)
    DOT             reduce using rule 58 (return_statement -> RETURN expression .)
    EQUALEQUAL      reduce using rule 58 (return_statement -> RETURN expression .)
    NOTEQUAL        reduce using rule 58 (return_statement -> RETURN expression .)
    LTE             reduce using rule 58 (return_statement -> RETURN expression .)
    GTE             reduce using rule 58 (return_statement -> RETURN expression .)
    IDENTIFIER      reduce using rule 58 (return_statement -> RETURN expression .)
    LPAREN          reduce using rule 58 (return_statement -> RETURN expression .)
    STRING_LITERAL  reduce using rule 58 (return_statement -> RETURN expression .)
    CHAR_CONST      reduce using rule 58 (return_statement -> RETURN expression .)
    FLOAT_CONST     reduce using rule 58 (return_statement -> RETURN expression .)
    INT_CONST       reduce using rule 58 (return_statement -> RETURN expression .)
    NIL_LITERAL     reduce using rule 58 (return_statement -> RETURN expression .)
    LBRACK          reduce using rule 58 (return_statement -> RETURN expression .)
    CASE            reduce using rule 58 (return_statement -> RETURN expression .)
    DEFAULT         reduce using rule 58 (return_statement -> RETURN expression .)
    RCURLY          reduce using rule 58 (return_statement -> RETURN expression .)
    $end            reduce using rule 58 (return_statement -> RETURN expression .)


state 101

    (85) pattern_initializer -> pattern . initializer
    (86) pattern_initializer -> pattern .
    (87) initializer -> . EQUAL expression

  ! shift/reduce conflict for EQUAL resolved as shift
    COMMA           reduce using rule 86 (pattern_initializer -> pattern .)
    PRINT           reduce using rule 86 (pattern_initializer -> pattern .)
    IMPORT          reduce using rule 86 (pattern_initializer -> pattern .)
    LET             reduce using rule 86 (pattern_initializer -> pattern .)
    STRUCT          reduce using rule 86 (pattern_initializer -> pattern .)
    FOR             reduce using rule 86 (pattern_initializer -> pattern .)
    WHILE           reduce using rule 86 (pattern_initializer -> pattern .)
    REPEAT          reduce using rule 86 (pattern_initializer -> pattern .)
    IF              reduce using rule 86 (pattern_initializer -> pattern .)
    SWITCH          reduce using rule 86 (pattern_initializer -> pattern .)
    BREAK           reduce using rule 86 (pattern_initializer -> pattern .)
    CONTINUE        reduce using rule 86 (pattern_initializer -> pattern .)
    RETURN          reduce using rule 86 (pattern_initializer -> pattern .)
    AND             reduce using rule 86 (pattern_initializer -> pattern .)
    VAR             reduce using rule 86 (pattern_initializer -> pattern .)
    FUNC            reduce using rule 86 (pattern_initializer -> pattern .)
    PREFIX          reduce using rule 86 (pattern_initializer -> pattern .)
    POSTFIX         reduce using rule 86 (pattern_initializer -> pattern .)
    INFIX           reduce using rule 86 (pattern_initializer -> pattern .)
    DIV             reduce using rule 86 (pattern_initializer -> pattern .)
    SUB             reduce using rule 86 (pattern_initializer -> pattern .)
    ADD             reduce using rule 86 (pattern_initializer -> pattern .)
    EXCLAMATION     reduce using rule 86 (pattern_initializer -> pattern .)
    MUL             reduce using rule 86 (pattern_initializer -> pattern .)
    MOD             reduce using rule 86 (pattern_initializer -> pattern .)
    OR              reduce using rule 86 (pattern_initializer -> pattern .)
    LT              reduce using rule 86 (pattern_initializer -> pattern .)
    GT              reduce using rule 86 (pattern_initializer -> pattern .)
    CARET           reduce using rule 86 (pattern_initializer -> pattern .)
    TILDE           reduce using rule 86 (pattern_initializer -> pattern .)
    CONDOP          reduce using rule 86 (pattern_initializer -> pattern .)
    ANDAND          reduce using rule 86 (pattern_initializer -> pattern .)
    OROR            reduce using rule 86 (pattern_initializer -> pattern .)
    NOT             reduce using rule 86 (pattern_initializer -> pattern .)
    DOT             reduce using rule 86 (pattern_initializer -> pattern .)
    EQUALEQUAL      reduce using rule 86 (pattern_initializer -> pattern .)
    NOTEQUAL        reduce using rule 86 (pattern_initializer -> pattern .)
    LTE             reduce using rule 86 (pattern_initializer -> pattern .)
    GTE             reduce using rule 86 (pattern_initializer -> pattern .)
    IDENTIFIER      reduce using rule 86 (pattern_initializer -> pattern .)
    LPAREN          reduce using rule 86 (pattern_initializer -> pattern .)
    STRING_LITERAL  reduce using rule 86 (pattern_initializer -> pattern .)
    CHAR_CONST      reduce using rule 86 (pattern_initializer -> pattern .)
    FLOAT_CONST     reduce using rule 86 (pattern_initializer -> pattern .)
    INT_CONST       reduce using rule 86 (pattern_initializer -> pattern .)
    NIL_LITERAL     reduce using rule 86 (pattern_initializer -> pattern .)
    LBRACK          reduce using rule 86 (pattern_initializer -> pattern .)
    $end            reduce using rule 86 (pattern_initializer -> pattern .)
    RCURLY          reduce using rule 86 (pattern_initializer -> pattern .)
    CASE            reduce using rule 86 (pattern_initializer -> pattern .)
    DEFAULT         reduce using rule 86 (pattern_initializer -> pattern .)
    SEMICOLON       reduce using rule 86 (pattern_initializer -> pattern .)
    EQUAL           shift and go to state 159

  ! EQUAL           [ reduce using rule 86 (pattern_initializer -> pattern .) ]

    initializer                    shift and go to state 160

state 102

    (138) pattern -> expression_pattern .

    COMMA           reduce using rule 138 (pattern -> expression_pattern .)
    WHERE           reduce using rule 138 (pattern -> expression_pattern .)
    COLON           reduce using rule 138 (pattern -> expression_pattern .)
    EQUAL           reduce using rule 138 (pattern -> expression_pattern .)
    PRINT           reduce using rule 138 (pattern -> expression_pattern .)
    IMPORT          reduce using rule 138 (pattern -> expression_pattern .)
    LET             reduce using rule 138 (pattern -> expression_pattern .)
    STRUCT          reduce using rule 138 (pattern -> expression_pattern .)
    FOR             reduce using rule 138 (pattern -> expression_pattern .)
    WHILE           reduce using rule 138 (pattern -> expression_pattern .)
    REPEAT          reduce using rule 138 (pattern -> expression_pattern .)
    IF              reduce using rule 138 (pattern -> expression_pattern .)
    SWITCH          reduce using rule 138 (pattern -> expression_pattern .)
    BREAK           reduce using rule 138 (pattern -> expression_pattern .)
    CONTINUE        reduce using rule 138 (pattern -> expression_pattern .)
    RETURN          reduce using rule 138 (pattern -> expression_pattern .)
    AND             reduce using rule 138 (pattern -> expression_pattern .)
    VAR             reduce using rule 138 (pattern -> expression_pattern .)
    FUNC            reduce using rule 138 (pattern -> expression_pattern .)
    PREFIX          reduce using rule 138 (pattern -> expression_pattern .)
    POSTFIX         reduce using rule 138 (pattern -> expression_pattern .)
    INFIX           reduce using rule 138 (pattern -> expression_pattern .)
    DIV             reduce using rule 138 (pattern -> expression_pattern .)
    SUB             reduce using rule 138 (pattern -> expression_pattern .)
    ADD             reduce using rule 138 (pattern -> expression_pattern .)
    EXCLAMATION     reduce using rule 138 (pattern -> expression_pattern .)
    MUL             reduce using rule 138 (pattern -> expression_pattern .)
    MOD             reduce using rule 138 (pattern -> expression_pattern .)
    OR              reduce using rule 138 (pattern -> expression_pattern .)
    LT              reduce using rule 138 (pattern -> expression_pattern .)
    GT              reduce using rule 138 (pattern -> expression_pattern .)
    CARET           reduce using rule 138 (pattern -> expression_pattern .)
    TILDE           reduce using rule 138 (pattern -> expression_pattern .)
    CONDOP          reduce using rule 138 (pattern -> expression_pattern .)
    ANDAND          reduce using rule 138 (pattern -> expression_pattern .)
    OROR            reduce using rule 138 (pattern -> expression_pattern .)
    NOT             reduce using rule 138 (pattern -> expression_pattern .)
    DOT             reduce using rule 138 (pattern -> expression_pattern .)
    EQUALEQUAL      reduce using rule 138 (pattern -> expression_pattern .)
    NOTEQUAL        reduce using rule 138 (pattern -> expression_pattern .)
    LTE             reduce using rule 138 (pattern -> expression_pattern .)
    GTE             reduce using rule 138 (pattern -> expression_pattern .)
    IDENTIFIER      reduce using rule 138 (pattern -> expression_pattern .)
    LPAREN          reduce using rule 138 (pattern -> expression_pattern .)
    STRING_LITERAL  reduce using rule 138 (pattern -> expression_pattern .)
    CHAR_CONST      reduce using rule 138 (pattern -> expression_pattern .)
    FLOAT_CONST     reduce using rule 138 (pattern -> expression_pattern .)
    INT_CONST       reduce using rule 138 (pattern -> expression_pattern .)
    NIL_LITERAL     reduce using rule 138 (pattern -> expression_pattern .)
    LBRACK          reduce using rule 138 (pattern -> expression_pattern .)
    $end            reduce using rule 138 (pattern -> expression_pattern .)
    RCURLY          reduce using rule 138 (pattern -> expression_pattern .)
    CASE            reduce using rule 138 (pattern -> expression_pattern .)
    DEFAULT         reduce using rule 138 (pattern -> expression_pattern .)
    SEMICOLON       reduce using rule 138 (pattern -> expression_pattern .)


state 103

    (90) variable_declaration -> variable_declaration_head pattern_initializer_list .

    PRINT           reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    IMPORT          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    LET             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    STRUCT          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    FOR             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    WHILE           reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    REPEAT          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    IF              reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    SWITCH          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    BREAK           reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    CONTINUE        reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    RETURN          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    AND             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    VAR             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    FUNC            reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    PREFIX          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    POSTFIX         reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    INFIX           reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    DIV             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    EQUAL           reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    SUB             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    ADD             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    EXCLAMATION     reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    MUL             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    MOD             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    OR              reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    LT              reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    GT              reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    CARET           reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    TILDE           reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    CONDOP          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    ANDAND          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    OROR            reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    NOT             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    DOT             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    EQUALEQUAL      reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    NOTEQUAL        reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    LTE             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    GTE             reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    IDENTIFIER      reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    LPAREN          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    STRING_LITERAL  reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    CHAR_CONST      reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    FLOAT_CONST     reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    INT_CONST       reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    NIL_LITERAL     reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    LBRACK          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    $end            reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    RCURLY          reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    CASE            reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    DEFAULT         reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)
    SEMICOLON       reduce using rule 90 (variable_declaration -> variable_declaration_head pattern_initializer_list .)


state 104

    (88) variable_declaration -> variable_declaration_head variable_name . type_annotation code_block
    (89) variable_declaration -> variable_declaration_head variable_name . type_annotation initializer
    (196) type_annotation -> . COLON INOUT type
    (197) type_annotation -> . COLON type

    COLON           shift and go to state 162

    type_annotation                shift and go to state 161

state 105

    (92) variable_name -> declaration_identifier .
    (139) identifier_pattern -> declaration_identifier .
    (158) primary_expression -> declaration_identifier .

  ! reduce/reduce conflict for COLON resolved using rule 92 (variable_name -> declaration_identifier .)
  ! reduce/reduce conflict for DOT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LBRACK resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for GT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for SUB resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for ADD resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for MUL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for AND resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for OR resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CARET resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for TILDE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CONDOP resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for ANDAND resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for OROR resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for NOT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for PRINT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LET resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for STRUCT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for FOR resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for REPEAT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for IF resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for SWITCH resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for VAR resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for FUNC resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for PREFIX resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for POSTFIX resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for INFIX resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for NIL_LITERAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for $end resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for RCURLY resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CASE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 139 (identifier_pattern -> declaration_identifier .)
    COLON           reduce using rule 92 (variable_name -> declaration_identifier .)
    EQUAL           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    COMMA           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    PRINT           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    IMPORT          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LET             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    STRUCT          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    FOR             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    WHILE           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    REPEAT          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    IF              reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    SWITCH          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    BREAK           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CONTINUE        reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    RETURN          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    AND             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    VAR             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    FUNC            reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    PREFIX          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    POSTFIX         reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    INFIX           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    DIV             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    SUB             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    ADD             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    EXCLAMATION     reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    MUL             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    MOD             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    OR              reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LT              reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    GT              reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CARET           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    TILDE           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CONDOP          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    ANDAND          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    OROR            reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    NOT             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    DOT             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    EQUALEQUAL      reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    NOTEQUAL        reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LTE             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    GTE             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    IDENTIFIER      reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LPAREN          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    STRING_LITERAL  reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CHAR_CONST      reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    FLOAT_CONST     reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    INT_CONST       reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    NIL_LITERAL     reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LBRACK          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    $end            reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    RCURLY          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CASE            reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    DEFAULT         reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    SEMICOLON       reduce using rule 139 (identifier_pattern -> declaration_identifier .)

  ! COLON           [ reduce using rule 139 (identifier_pattern -> declaration_identifier .) ]
  ! DOT             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LPAREN          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LBRACK          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! EQUAL           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! EQUALEQUAL      [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! NOTEQUAL        [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LTE             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! GTE             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LT              [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! GT              [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! DIV             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! SUB             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! ADD             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! EXCLAMATION     [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! MUL             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! MOD             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! AND             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! OR              [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CARET           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! TILDE           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CONDOP          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! ANDAND          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! OROR            [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! NOT             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! COMMA           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! PRINT           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! IMPORT          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LET             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! STRUCT          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! FOR             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! WHILE           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! REPEAT          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! IF              [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! SWITCH          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! BREAK           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CONTINUE        [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! RETURN          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! VAR             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! FUNC            [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! PREFIX          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! POSTFIX         [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! INFIX           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! IDENTIFIER      [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! STRING_LITERAL  [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CHAR_CONST      [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! FLOAT_CONST     [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! INT_CONST       [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! NIL_LITERAL     [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! $end            [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! RCURLY          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CASE            [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! DEFAULT         [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! SEMICOLON       [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]


state 106

    (82) pattern_initializer_list -> pattern_initializer . p_com_pat_init_star
    (83) p_com_pat_init_star -> . COMMA pattern_initializer p_com_pat_init_star
    (84) p_com_pat_init_star -> .

    COMMA           shift and go to state 163
    PRINT           reduce using rule 84 (p_com_pat_init_star -> .)
    IMPORT          reduce using rule 84 (p_com_pat_init_star -> .)
    LET             reduce using rule 84 (p_com_pat_init_star -> .)
    STRUCT          reduce using rule 84 (p_com_pat_init_star -> .)
    FOR             reduce using rule 84 (p_com_pat_init_star -> .)
    WHILE           reduce using rule 84 (p_com_pat_init_star -> .)
    REPEAT          reduce using rule 84 (p_com_pat_init_star -> .)
    IF              reduce using rule 84 (p_com_pat_init_star -> .)
    SWITCH          reduce using rule 84 (p_com_pat_init_star -> .)
    BREAK           reduce using rule 84 (p_com_pat_init_star -> .)
    CONTINUE        reduce using rule 84 (p_com_pat_init_star -> .)
    RETURN          reduce using rule 84 (p_com_pat_init_star -> .)
    AND             reduce using rule 84 (p_com_pat_init_star -> .)
    VAR             reduce using rule 84 (p_com_pat_init_star -> .)
    FUNC            reduce using rule 84 (p_com_pat_init_star -> .)
    PREFIX          reduce using rule 84 (p_com_pat_init_star -> .)
    POSTFIX         reduce using rule 84 (p_com_pat_init_star -> .)
    INFIX           reduce using rule 84 (p_com_pat_init_star -> .)
    DIV             reduce using rule 84 (p_com_pat_init_star -> .)
    EQUAL           reduce using rule 84 (p_com_pat_init_star -> .)
    SUB             reduce using rule 84 (p_com_pat_init_star -> .)
    ADD             reduce using rule 84 (p_com_pat_init_star -> .)
    EXCLAMATION     reduce using rule 84 (p_com_pat_init_star -> .)
    MUL             reduce using rule 84 (p_com_pat_init_star -> .)
    MOD             reduce using rule 84 (p_com_pat_init_star -> .)
    OR              reduce using rule 84 (p_com_pat_init_star -> .)
    LT              reduce using rule 84 (p_com_pat_init_star -> .)
    GT              reduce using rule 84 (p_com_pat_init_star -> .)
    CARET           reduce using rule 84 (p_com_pat_init_star -> .)
    TILDE           reduce using rule 84 (p_com_pat_init_star -> .)
    CONDOP          reduce using rule 84 (p_com_pat_init_star -> .)
    ANDAND          reduce using rule 84 (p_com_pat_init_star -> .)
    OROR            reduce using rule 84 (p_com_pat_init_star -> .)
    NOT             reduce using rule 84 (p_com_pat_init_star -> .)
    DOT             reduce using rule 84 (p_com_pat_init_star -> .)
    EQUALEQUAL      reduce using rule 84 (p_com_pat_init_star -> .)
    NOTEQUAL        reduce using rule 84 (p_com_pat_init_star -> .)
    LTE             reduce using rule 84 (p_com_pat_init_star -> .)
    GTE             reduce using rule 84 (p_com_pat_init_star -> .)
    IDENTIFIER      reduce using rule 84 (p_com_pat_init_star -> .)
    LPAREN          reduce using rule 84 (p_com_pat_init_star -> .)
    STRING_LITERAL  reduce using rule 84 (p_com_pat_init_star -> .)
    CHAR_CONST      reduce using rule 84 (p_com_pat_init_star -> .)
    FLOAT_CONST     reduce using rule 84 (p_com_pat_init_star -> .)
    INT_CONST       reduce using rule 84 (p_com_pat_init_star -> .)
    NIL_LITERAL     reduce using rule 84 (p_com_pat_init_star -> .)
    LBRACK          reduce using rule 84 (p_com_pat_init_star -> .)
    $end            reduce using rule 84 (p_com_pat_init_star -> .)
    RCURLY          reduce using rule 84 (p_com_pat_init_star -> .)
    CASE            reduce using rule 84 (p_com_pat_init_star -> .)
    DEFAULT         reduce using rule 84 (p_com_pat_init_star -> .)
    SEMICOLON       reduce using rule 84 (p_com_pat_init_star -> .)

    p_com_pat_init_star            shift and go to state 164

state 107

    (135) pattern -> identifier_pattern . type_annotation
    (136) pattern -> identifier_pattern .
    (196) type_annotation -> . COLON INOUT type
    (197) type_annotation -> . COLON type

  ! shift/reduce conflict for COLON resolved as shift
    COMMA           reduce using rule 136 (pattern -> identifier_pattern .)
    WHERE           reduce using rule 136 (pattern -> identifier_pattern .)
    EQUAL           reduce using rule 136 (pattern -> identifier_pattern .)
    PRINT           reduce using rule 136 (pattern -> identifier_pattern .)
    IMPORT          reduce using rule 136 (pattern -> identifier_pattern .)
    LET             reduce using rule 136 (pattern -> identifier_pattern .)
    STRUCT          reduce using rule 136 (pattern -> identifier_pattern .)
    FOR             reduce using rule 136 (pattern -> identifier_pattern .)
    WHILE           reduce using rule 136 (pattern -> identifier_pattern .)
    REPEAT          reduce using rule 136 (pattern -> identifier_pattern .)
    IF              reduce using rule 136 (pattern -> identifier_pattern .)
    SWITCH          reduce using rule 136 (pattern -> identifier_pattern .)
    BREAK           reduce using rule 136 (pattern -> identifier_pattern .)
    CONTINUE        reduce using rule 136 (pattern -> identifier_pattern .)
    RETURN          reduce using rule 136 (pattern -> identifier_pattern .)
    AND             reduce using rule 136 (pattern -> identifier_pattern .)
    VAR             reduce using rule 136 (pattern -> identifier_pattern .)
    FUNC            reduce using rule 136 (pattern -> identifier_pattern .)
    PREFIX          reduce using rule 136 (pattern -> identifier_pattern .)
    POSTFIX         reduce using rule 136 (pattern -> identifier_pattern .)
    INFIX           reduce using rule 136 (pattern -> identifier_pattern .)
    DIV             reduce using rule 136 (pattern -> identifier_pattern .)
    SUB             reduce using rule 136 (pattern -> identifier_pattern .)
    ADD             reduce using rule 136 (pattern -> identifier_pattern .)
    EXCLAMATION     reduce using rule 136 (pattern -> identifier_pattern .)
    MUL             reduce using rule 136 (pattern -> identifier_pattern .)
    MOD             reduce using rule 136 (pattern -> identifier_pattern .)
    OR              reduce using rule 136 (pattern -> identifier_pattern .)
    LT              reduce using rule 136 (pattern -> identifier_pattern .)
    GT              reduce using rule 136 (pattern -> identifier_pattern .)
    CARET           reduce using rule 136 (pattern -> identifier_pattern .)
    TILDE           reduce using rule 136 (pattern -> identifier_pattern .)
    CONDOP          reduce using rule 136 (pattern -> identifier_pattern .)
    ANDAND          reduce using rule 136 (pattern -> identifier_pattern .)
    OROR            reduce using rule 136 (pattern -> identifier_pattern .)
    NOT             reduce using rule 136 (pattern -> identifier_pattern .)
    DOT             reduce using rule 136 (pattern -> identifier_pattern .)
    EQUALEQUAL      reduce using rule 136 (pattern -> identifier_pattern .)
    NOTEQUAL        reduce using rule 136 (pattern -> identifier_pattern .)
    LTE             reduce using rule 136 (pattern -> identifier_pattern .)
    GTE             reduce using rule 136 (pattern -> identifier_pattern .)
    IDENTIFIER      reduce using rule 136 (pattern -> identifier_pattern .)
    LPAREN          reduce using rule 136 (pattern -> identifier_pattern .)
    STRING_LITERAL  reduce using rule 136 (pattern -> identifier_pattern .)
    CHAR_CONST      reduce using rule 136 (pattern -> identifier_pattern .)
    FLOAT_CONST     reduce using rule 136 (pattern -> identifier_pattern .)
    INT_CONST       reduce using rule 136 (pattern -> identifier_pattern .)
    NIL_LITERAL     reduce using rule 136 (pattern -> identifier_pattern .)
    LBRACK          reduce using rule 136 (pattern -> identifier_pattern .)
    $end            reduce using rule 136 (pattern -> identifier_pattern .)
    RCURLY          reduce using rule 136 (pattern -> identifier_pattern .)
    CASE            reduce using rule 136 (pattern -> identifier_pattern .)
    DEFAULT         reduce using rule 136 (pattern -> identifier_pattern .)
    SEMICOLON       reduce using rule 136 (pattern -> identifier_pattern .)
    COLON           shift and go to state 162

  ! COLON           [ reduce using rule 136 (pattern -> identifier_pattern .) ]

    type_annotation                shift and go to state 165

state 108

    (140) value_binding_pattern -> VAR . pattern
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern                        shift and go to state 166
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 109

    (137) pattern -> value_binding_pattern .

    COMMA           reduce using rule 137 (pattern -> value_binding_pattern .)
    WHERE           reduce using rule 137 (pattern -> value_binding_pattern .)
    COLON           reduce using rule 137 (pattern -> value_binding_pattern .)
    EQUAL           reduce using rule 137 (pattern -> value_binding_pattern .)
    PRINT           reduce using rule 137 (pattern -> value_binding_pattern .)
    IMPORT          reduce using rule 137 (pattern -> value_binding_pattern .)
    LET             reduce using rule 137 (pattern -> value_binding_pattern .)
    STRUCT          reduce using rule 137 (pattern -> value_binding_pattern .)
    FOR             reduce using rule 137 (pattern -> value_binding_pattern .)
    WHILE           reduce using rule 137 (pattern -> value_binding_pattern .)
    REPEAT          reduce using rule 137 (pattern -> value_binding_pattern .)
    IF              reduce using rule 137 (pattern -> value_binding_pattern .)
    SWITCH          reduce using rule 137 (pattern -> value_binding_pattern .)
    BREAK           reduce using rule 137 (pattern -> value_binding_pattern .)
    CONTINUE        reduce using rule 137 (pattern -> value_binding_pattern .)
    RETURN          reduce using rule 137 (pattern -> value_binding_pattern .)
    AND             reduce using rule 137 (pattern -> value_binding_pattern .)
    VAR             reduce using rule 137 (pattern -> value_binding_pattern .)
    FUNC            reduce using rule 137 (pattern -> value_binding_pattern .)
    PREFIX          reduce using rule 137 (pattern -> value_binding_pattern .)
    POSTFIX         reduce using rule 137 (pattern -> value_binding_pattern .)
    INFIX           reduce using rule 137 (pattern -> value_binding_pattern .)
    DIV             reduce using rule 137 (pattern -> value_binding_pattern .)
    SUB             reduce using rule 137 (pattern -> value_binding_pattern .)
    ADD             reduce using rule 137 (pattern -> value_binding_pattern .)
    EXCLAMATION     reduce using rule 137 (pattern -> value_binding_pattern .)
    MUL             reduce using rule 137 (pattern -> value_binding_pattern .)
    MOD             reduce using rule 137 (pattern -> value_binding_pattern .)
    OR              reduce using rule 137 (pattern -> value_binding_pattern .)
    LT              reduce using rule 137 (pattern -> value_binding_pattern .)
    GT              reduce using rule 137 (pattern -> value_binding_pattern .)
    CARET           reduce using rule 137 (pattern -> value_binding_pattern .)
    TILDE           reduce using rule 137 (pattern -> value_binding_pattern .)
    CONDOP          reduce using rule 137 (pattern -> value_binding_pattern .)
    ANDAND          reduce using rule 137 (pattern -> value_binding_pattern .)
    OROR            reduce using rule 137 (pattern -> value_binding_pattern .)
    NOT             reduce using rule 137 (pattern -> value_binding_pattern .)
    DOT             reduce using rule 137 (pattern -> value_binding_pattern .)
    EQUALEQUAL      reduce using rule 137 (pattern -> value_binding_pattern .)
    NOTEQUAL        reduce using rule 137 (pattern -> value_binding_pattern .)
    LTE             reduce using rule 137 (pattern -> value_binding_pattern .)
    GTE             reduce using rule 137 (pattern -> value_binding_pattern .)
    IDENTIFIER      reduce using rule 137 (pattern -> value_binding_pattern .)
    LPAREN          reduce using rule 137 (pattern -> value_binding_pattern .)
    STRING_LITERAL  reduce using rule 137 (pattern -> value_binding_pattern .)
    CHAR_CONST      reduce using rule 137 (pattern -> value_binding_pattern .)
    FLOAT_CONST     reduce using rule 137 (pattern -> value_binding_pattern .)
    INT_CONST       reduce using rule 137 (pattern -> value_binding_pattern .)
    NIL_LITERAL     reduce using rule 137 (pattern -> value_binding_pattern .)
    LBRACK          reduce using rule 137 (pattern -> value_binding_pattern .)
    $end            reduce using rule 137 (pattern -> value_binding_pattern .)
    RCURLY          reduce using rule 137 (pattern -> value_binding_pattern .)
    CASE            reduce using rule 137 (pattern -> value_binding_pattern .)
    DEFAULT         reduce using rule 137 (pattern -> value_binding_pattern .)
    SEMICOLON       reduce using rule 137 (pattern -> value_binding_pattern .)


state 110

    (141) value_binding_pattern -> LET . pattern
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern                        shift and go to state 167
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 111

    (142) expression_pattern -> expression .

    COMMA           reduce using rule 142 (expression_pattern -> expression .)
    WHERE           reduce using rule 142 (expression_pattern -> expression .)
    COLON           reduce using rule 142 (expression_pattern -> expression .)
    EQUAL           reduce using rule 142 (expression_pattern -> expression .)
    PRINT           reduce using rule 142 (expression_pattern -> expression .)
    IMPORT          reduce using rule 142 (expression_pattern -> expression .)
    LET             reduce using rule 142 (expression_pattern -> expression .)
    STRUCT          reduce using rule 142 (expression_pattern -> expression .)
    FOR             reduce using rule 142 (expression_pattern -> expression .)
    WHILE           reduce using rule 142 (expression_pattern -> expression .)
    REPEAT          reduce using rule 142 (expression_pattern -> expression .)
    IF              reduce using rule 142 (expression_pattern -> expression .)
    SWITCH          reduce using rule 142 (expression_pattern -> expression .)
    BREAK           reduce using rule 142 (expression_pattern -> expression .)
    CONTINUE        reduce using rule 142 (expression_pattern -> expression .)
    RETURN          reduce using rule 142 (expression_pattern -> expression .)
    AND             reduce using rule 142 (expression_pattern -> expression .)
    VAR             reduce using rule 142 (expression_pattern -> expression .)
    FUNC            reduce using rule 142 (expression_pattern -> expression .)
    PREFIX          reduce using rule 142 (expression_pattern -> expression .)
    POSTFIX         reduce using rule 142 (expression_pattern -> expression .)
    INFIX           reduce using rule 142 (expression_pattern -> expression .)
    DIV             reduce using rule 142 (expression_pattern -> expression .)
    SUB             reduce using rule 142 (expression_pattern -> expression .)
    ADD             reduce using rule 142 (expression_pattern -> expression .)
    EXCLAMATION     reduce using rule 142 (expression_pattern -> expression .)
    MUL             reduce using rule 142 (expression_pattern -> expression .)
    MOD             reduce using rule 142 (expression_pattern -> expression .)
    OR              reduce using rule 142 (expression_pattern -> expression .)
    LT              reduce using rule 142 (expression_pattern -> expression .)
    GT              reduce using rule 142 (expression_pattern -> expression .)
    CARET           reduce using rule 142 (expression_pattern -> expression .)
    TILDE           reduce using rule 142 (expression_pattern -> expression .)
    CONDOP          reduce using rule 142 (expression_pattern -> expression .)
    ANDAND          reduce using rule 142 (expression_pattern -> expression .)
    OROR            reduce using rule 142 (expression_pattern -> expression .)
    NOT             reduce using rule 142 (expression_pattern -> expression .)
    DOT             reduce using rule 142 (expression_pattern -> expression .)
    EQUALEQUAL      reduce using rule 142 (expression_pattern -> expression .)
    NOTEQUAL        reduce using rule 142 (expression_pattern -> expression .)
    LTE             reduce using rule 142 (expression_pattern -> expression .)
    GTE             reduce using rule 142 (expression_pattern -> expression .)
    IDENTIFIER      reduce using rule 142 (expression_pattern -> expression .)
    LPAREN          reduce using rule 142 (expression_pattern -> expression .)
    STRING_LITERAL  reduce using rule 142 (expression_pattern -> expression .)
    CHAR_CONST      reduce using rule 142 (expression_pattern -> expression .)
    FLOAT_CONST     reduce using rule 142 (expression_pattern -> expression .)
    INT_CONST       reduce using rule 142 (expression_pattern -> expression .)
    NIL_LITERAL     reduce using rule 142 (expression_pattern -> expression .)
    LBRACK          reduce using rule 142 (expression_pattern -> expression .)
    $end            reduce using rule 142 (expression_pattern -> expression .)
    RCURLY          reduce using rule 142 (expression_pattern -> expression .)
    CASE            reduce using rule 142 (expression_pattern -> expression .)
    DEFAULT         reduce using rule 142 (expression_pattern -> expression .)
    SEMICOLON       reduce using rule 142 (expression_pattern -> expression .)


state 112

    (10) print_statement -> PRINT LPAREN . print_arg_list RPAREN
    (11) print_arg_list -> . print_arg COMMA print_arg_list
    (12) print_arg_list -> . print_arg
    (13) print_arg -> . identifier
    (14) print_arg -> . literal
    (15) print_arg -> . expression
    (219) identifier -> . IDENTIFIER
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    IDENTIFIER      shift and go to state 170
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    LBRACK          shift and go to state 31

    print_arg_list                 shift and go to state 168
    literal_expression             shift and go to state 28
    prefix_expression              shift and go to state 64
    print_arg                      shift and go to state 171
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 169
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    identifier                     shift and go to state 172
    expression                     shift and go to state 173
    parenthesized_expression       shift and go to state 53

state 113

    (68) code_block -> LCURLY . statements RCURLY
    (69) code_block -> LCURLY . RCURLY
    (2) statements -> . statement statements
    (3) statements -> .
    (4) statement -> . expression
    (5) statement -> . declaration
    (6) statement -> . loop_statement
    (7) statement -> . branch_statement
    (8) statement -> . control_transfer_statement
    (9) statement -> . print_statement
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (60) declaration -> . import_declaration
    (61) declaration -> . constant_declaration
    (62) declaration -> . variable_declaration
    (63) declaration -> . function_declaration
    (64) declaration -> . struct_declaration
    (65) declaration -> . operator_declaration
    (16) loop_statement -> . for_statement
    (17) loop_statement -> . while_statement
    (18) loop_statement -> . repeat_while_statement
    (33) branch_statement -> . if_statement
    (34) branch_statement -> . switch_statement
    (53) control_transfer_statement -> . break_statement
    (54) control_transfer_statement -> . continue_statement
    (55) control_transfer_statement -> . return_statement
    (10) print_statement -> . PRINT LPAREN print_arg_list RPAREN
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (70) import_declaration -> . IMPORT import_kind import_path
    (71) import_declaration -> . IMPORT import_path
    (81) constant_declaration -> . LET pattern_initializer_list
    (88) variable_declaration -> . variable_declaration_head variable_name type_annotation code_block
    (89) variable_declaration -> . variable_declaration_head variable_name type_annotation initializer
    (90) variable_declaration -> . variable_declaration_head pattern_initializer_list
    (93) function_declaration -> . function_head function_name function_signature function_body
    (94) function_declaration -> . function_head function_name function_signature
    (120) struct_declaration -> . STRUCT struct_name struct_body
    (126) operator_declaration -> . prefix_operator_declaration
    (127) operator_declaration -> . postfix_operator_declaration
    (128) operator_declaration -> . infix_operator_declaration
    (19) for_statement -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block
    (22) while_statement -> . WHILE condition_list code_block
    (32) repeat_while_statement -> . REPEAT code_block WHILE expression
    (35) if_statement -> . IF condition_list code_block else_clause
    (36) if_statement -> . IF condition_list code_block
    (39) switch_statement -> . SWITCH expression LCURLY switch_cases RCURLY
    (40) switch_statement -> . SWITCH expression LCURLY RCURLY
    (56) break_statement -> . BREAK
    (57) continue_statement -> . CONTINUE
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (91) variable_declaration_head -> . VAR
    (95) function_head -> . FUNC
    (129) prefix_operator_declaration -> . PREFIX OPERATOR operator
    (130) postfix_operator_declaration -> . POSTFIX OPERATOR operator
    (131) infix_operator_declaration -> . INFIX OPERATOR operator
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

  ! shift/reduce conflict for RCURLY resolved as shift
    RCURLY          shift and go to state 175
    PRINT           shift and go to state 20
    IMPORT          shift and go to state 8
    LET             shift and go to state 68
    STRUCT          shift and go to state 86
    FOR             shift and go to state 25
    WHILE           shift and go to state 41
    REPEAT          shift and go to state 24
    IF              shift and go to state 85
    SWITCH          shift and go to state 50
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 32
    RETURN          shift and go to state 16
    AND             shift and go to state 27
    VAR             shift and go to state 12
    FUNC            shift and go to state 26
    PREFIX          shift and go to state 71
    POSTFIX         shift and go to state 4
    INFIX           shift and go to state 34
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

  ! RCURLY          [ reduce using rule 3 (statements -> .) ]

    statements                     shift and go to state 174
    loop_statement                 shift and go to state 3
    break_statement                shift and go to state 17
    operator                       shift and go to state 18
    variable_declaration_head      shift and go to state 19
    prefix_operator                shift and go to state 6
    print_statement                shift and go to state 42
    branch_statement               shift and go to state 44
    variable_declaration           shift and go to state 45
    switch_statement               shift and go to state 21
    prefix_operator_declaration    shift and go to state 55
    function_head                  shift and go to state 75
    postfix_expression             shift and go to state 76
    return_statement               shift and go to state 77
    while_statement                shift and go to state 48
    continue_statement             shift and go to state 22
    statement                      shift and go to state 51
    declaration_identifier         shift and go to state 23
    constant_declaration           shift and go to state 80
    if_statement                   shift and go to state 81
    for_statement                  shift and go to state 9
    postfix_operator_declaration   shift and go to state 54
    struct_declaration             shift and go to state 11
    literal                        shift and go to state 82
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    declaration                    shift and go to state 59
    import_declaration             shift and go to state 5
    literal_expression             shift and go to state 28
    operator_declaration           shift and go to state 60
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    function_declaration           shift and go to state 29
    conditional_operator           shift and go to state 79
    in_out_expression              shift and go to state 30
    infix_operator_declaration     shift and go to state 13
    control_transfer_statement     shift and go to state 87
    repeat_while_statement         shift and go to state 69
    expression                     shift and go to state 35

state 114

    (32) repeat_while_statement -> REPEAT code_block . WHILE expression

    WHILE           shift and go to state 176


state 115

    (19) for_statement -> FOR LPAREN . for_init SEMICOLON expression SEMICOLON expression RPAREN code_block
    (20) for_init -> . variable_declaration
    (21) for_init -> . expression_list
    (88) variable_declaration -> . variable_declaration_head variable_name type_annotation code_block
    (89) variable_declaration -> . variable_declaration_head variable_name type_annotation initializer
    (90) variable_declaration -> . variable_declaration_head pattern_initializer_list
    (145) expression_list -> . expression commaexp
    (91) variable_declaration_head -> . VAR
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 12
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    for_init                       shift and go to state 177
    variable_declaration_head      shift and go to state 19
    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    variable_declaration           shift and go to state 178
    postfix_expression             shift and go to state 76
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 23
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    expression_list                shift and go to state 179
    in_out_expression              shift and go to state 30
    expression                     shift and go to state 180

state 116

    (151) in_out_expression -> AND declaration_identifier .

    EQUAL           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    EQUALEQUAL      reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    NOTEQUAL        reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    LTE             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    GTE             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    LT              reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    GT              reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    DIV             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    SUB             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    ADD             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    EXCLAMATION     reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    MUL             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    MOD             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    AND             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    OR              reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    CARET           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    TILDE           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    CONDOP          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    ANDAND          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    OROR            reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    NOT             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    DOT             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    PRINT           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    IMPORT          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    LET             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    STRUCT          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    FOR             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    WHILE           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    REPEAT          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    IF              reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    SWITCH          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    BREAK           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    CONTINUE        reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    RETURN          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    VAR             reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    FUNC            reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    PREFIX          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    POSTFIX         reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    INFIX           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    IDENTIFIER      reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    LPAREN          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    STRING_LITERAL  reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    CHAR_CONST      reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    FLOAT_CONST     reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    INT_CONST       reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    NIL_LITERAL     reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    LBRACK          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    $end            reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    RCURLY          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    CASE            reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    DEFAULT         reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    COMMA           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    LCURLY          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    WHERE           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    COLON           reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    RPAREN          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    SEMICOLON       reduce using rule 151 (in_out_expression -> AND declaration_identifier .)
    RBRACK          reduce using rule 151 (in_out_expression -> AND declaration_identifier .)


state 117

    (165) array_literal_items -> array_literal_item . COMMA
    (166) array_literal_items -> array_literal_item .
    (167) array_literal_items -> array_literal_item . COMMA array_literal_items

    COMMA           shift and go to state 181
    RBRACK          reduce using rule 166 (array_literal_items -> array_literal_item .)


state 118

    (163) array_literal -> LBRACK array_literal_items . RBRACK

    RBRACK          shift and go to state 182


state 119

    (164) array_literal -> LBRACK RBRACK .

    DOT             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    LPAREN          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    LBRACK          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    EQUAL           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    EQUALEQUAL      reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    NOTEQUAL        reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    LTE             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    GTE             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    LT              reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    GT              reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    DIV             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    SUB             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    ADD             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    EXCLAMATION     reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    MUL             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    MOD             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    AND             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    OR              reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    CARET           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    TILDE           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    CONDOP          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    ANDAND          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    OROR            reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    NOT             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    COMMA           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    WHERE           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    COLON           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    RPAREN          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    PRINT           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    IMPORT          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    LET             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    STRUCT          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    FOR             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    WHILE           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    REPEAT          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    IF              reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    SWITCH          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    BREAK           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    CONTINUE        reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    RETURN          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    VAR             reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    FUNC            reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    PREFIX          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    POSTFIX         reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    INFIX           reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    IDENTIFIER      reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    STRING_LITERAL  reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    CHAR_CONST      reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    FLOAT_CONST     reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    INT_CONST       reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    NIL_LITERAL     reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    CASE            reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    DEFAULT         reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    RCURLY          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    $end            reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    SEMICOLON       reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    RBRACK          reduce using rule 164 (array_literal -> LBRACK RBRACK .)
    LCURLY          reduce using rule 164 (array_literal -> LBRACK RBRACK .)


state 120

    (168) array_literal_item -> expression .

    COMMA           reduce using rule 168 (array_literal_item -> expression .)
    RBRACK          reduce using rule 168 (array_literal_item -> expression .)


state 121

    (131) infix_operator_declaration -> INFIX OPERATOR . operator
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT

    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74

    operator                       shift and go to state 183
    conditional_operator           shift and go to state 79

state 122

    (28) condition -> optional_binding_condition .

    COMMA           reduce using rule 28 (condition -> optional_binding_condition .)
    LCURLY          reduce using rule 28 (condition -> optional_binding_condition .)


state 123

    (22) while_statement -> WHILE condition_list . code_block
    (68) code_block -> . LCURLY statements RCURLY
    (69) code_block -> . LCURLY RCURLY

    LCURLY          shift and go to state 113

    code_block                     shift and go to state 184

state 124

    (27) condition -> case_condition .

    COMMA           reduce using rule 27 (condition -> case_condition .)
    LCURLY          reduce using rule 27 (condition -> case_condition .)


state 125

    (29) case_condition -> CASE . pattern initializer
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern                        shift and go to state 185
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 126

    (31) optional_binding_condition -> VAR . pattern initializer
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern                        shift and go to state 186
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 127

    (23) condition_list -> condition . commacond
    (24) commacond -> . COMMA condition commacond
    (25) commacond -> .

    COMMA           shift and go to state 187
    LCURLY          reduce using rule 25 (commacond -> .)

    commacond                      shift and go to state 188

state 128

    (30) optional_binding_condition -> LET . pattern initializer
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern                        shift and go to state 189
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 129

    (26) condition -> expression .

    COMMA           reduce using rule 26 (condition -> expression .)
    LCURLY          reduce using rule 26 (condition -> expression .)


state 130

    (39) switch_statement -> SWITCH expression . LCURLY switch_cases RCURLY
    (40) switch_statement -> SWITCH expression . LCURLY RCURLY

    LCURLY          shift and go to state 190


state 131

    (2) statements -> statement statements .

    RCURLY          reduce using rule 2 (statements -> statement statements .)
    CASE            reduce using rule 2 (statements -> statement statements .)
    DEFAULT         reduce using rule 2 (statements -> statement statements .)
    $end            reduce using rule 2 (statements -> statement statements .)


state 132

    (153) binary_expression -> EQUAL . prefix_expression
    (226) operator -> EQUAL .
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             reduce using rule 226 (operator -> EQUAL .)
    EQUAL           reduce using rule 226 (operator -> EQUAL .)
    EXCLAMATION     reduce using rule 226 (operator -> EQUAL .)
    OR              reduce using rule 226 (operator -> EQUAL .)
    CARET           reduce using rule 226 (operator -> EQUAL .)
    CONDOP          reduce using rule 226 (operator -> EQUAL .)
    ANDAND          reduce using rule 226 (operator -> EQUAL .)
    OROR            reduce using rule 226 (operator -> EQUAL .)
    NOT             reduce using rule 226 (operator -> EQUAL .)
    DOT             reduce using rule 226 (operator -> EQUAL .)
    EQUALEQUAL      reduce using rule 226 (operator -> EQUAL .)
    NOTEQUAL        reduce using rule 226 (operator -> EQUAL .)
    IDENTIFIER      reduce using rule 226 (operator -> EQUAL .)
    LPAREN          reduce using rule 226 (operator -> EQUAL .)
    STRING_LITERAL  reduce using rule 226 (operator -> EQUAL .)
    CHAR_CONST      reduce using rule 226 (operator -> EQUAL .)
    FLOAT_CONST     reduce using rule 226 (operator -> EQUAL .)
    INT_CONST       reduce using rule 226 (operator -> EQUAL .)
    NIL_LITERAL     reduce using rule 226 (operator -> EQUAL .)
    LBRACK          reduce using rule 226 (operator -> EQUAL .)
    DIV             shift and go to state 73
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    LT              shift and go to state 78
    GT              shift and go to state 10
    TILDE           shift and go to state 56
    LTE             shift and go to state 2
    GTE             shift and go to state 74

  ! DIV             [ reduce using rule 226 (operator -> EQUAL .) ]
  ! SUB             [ reduce using rule 226 (operator -> EQUAL .) ]
  ! ADD             [ reduce using rule 226 (operator -> EQUAL .) ]
  ! MUL             [ reduce using rule 226 (operator -> EQUAL .) ]
  ! MOD             [ reduce using rule 226 (operator -> EQUAL .) ]
  ! LT              [ reduce using rule 226 (operator -> EQUAL .) ]
  ! GT              [ reduce using rule 226 (operator -> EQUAL .) ]
  ! TILDE           [ reduce using rule 226 (operator -> EQUAL .) ]
  ! LTE             [ reduce using rule 226 (operator -> EQUAL .) ]
  ! GTE             [ reduce using rule 226 (operator -> EQUAL .) ]
  ! AND             [ shift and go to state 27 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! EXCLAMATION     [ shift and go to state 37 ]
  ! OR              [ shift and go to state 14 ]
  ! CARET           [ shift and go to state 15 ]
  ! CONDOP          [ shift and go to state 65 ]
  ! ANDAND          [ shift and go to state 62 ]
  ! OROR            [ shift and go to state 38 ]
  ! NOT             [ shift and go to state 33 ]
  ! DOT             [ shift and go to state 46 ]
  ! EQUALEQUAL      [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 1 ]
  ! IDENTIFIER      [ shift and go to state 63 ]
  ! LPAREN          [ shift and go to state 84 ]
  ! STRING_LITERAL  [ shift and go to state 61 ]
  ! CHAR_CONST      [ shift and go to state 66 ]
  ! FLOAT_CONST     [ shift and go to state 7 ]
  ! INT_CONST       [ shift and go to state 47 ]
  ! NIL_LITERAL     [ shift and go to state 72 ]
  ! LBRACK          [ shift and go to state 31 ]

    prefix_expression              shift and go to state 191
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    parenthesized_expression       shift and go to state 53

state 133

    (223) binary_operator -> operator .

    AND             reduce using rule 223 (binary_operator -> operator .)
    DIV             reduce using rule 223 (binary_operator -> operator .)
    EQUAL           reduce using rule 223 (binary_operator -> operator .)
    SUB             reduce using rule 223 (binary_operator -> operator .)
    ADD             reduce using rule 223 (binary_operator -> operator .)
    EXCLAMATION     reduce using rule 223 (binary_operator -> operator .)
    MUL             reduce using rule 223 (binary_operator -> operator .)
    MOD             reduce using rule 223 (binary_operator -> operator .)
    OR              reduce using rule 223 (binary_operator -> operator .)
    LT              reduce using rule 223 (binary_operator -> operator .)
    GT              reduce using rule 223 (binary_operator -> operator .)
    CARET           reduce using rule 223 (binary_operator -> operator .)
    TILDE           reduce using rule 223 (binary_operator -> operator .)
    CONDOP          reduce using rule 223 (binary_operator -> operator .)
    ANDAND          reduce using rule 223 (binary_operator -> operator .)
    OROR            reduce using rule 223 (binary_operator -> operator .)
    NOT             reduce using rule 223 (binary_operator -> operator .)
    DOT             reduce using rule 223 (binary_operator -> operator .)
    EQUALEQUAL      reduce using rule 223 (binary_operator -> operator .)
    NOTEQUAL        reduce using rule 223 (binary_operator -> operator .)
    LTE             reduce using rule 223 (binary_operator -> operator .)
    GTE             reduce using rule 223 (binary_operator -> operator .)
    IDENTIFIER      reduce using rule 223 (binary_operator -> operator .)
    LPAREN          reduce using rule 223 (binary_operator -> operator .)
    STRING_LITERAL  reduce using rule 223 (binary_operator -> operator .)
    CHAR_CONST      reduce using rule 223 (binary_operator -> operator .)
    FLOAT_CONST     reduce using rule 223 (binary_operator -> operator .)
    INT_CONST       reduce using rule 223 (binary_operator -> operator .)
    NIL_LITERAL     reduce using rule 223 (binary_operator -> operator .)
    LBRACK          reduce using rule 223 (binary_operator -> operator .)


state 134

    (155) binary_expressions -> binary_expression_plus .

    PRINT           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    IMPORT          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    LET             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    STRUCT          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    FOR             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    WHILE           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    REPEAT          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    IF              reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    SWITCH          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    BREAK           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    CONTINUE        reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    RETURN          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    AND             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    VAR             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    FUNC            reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    PREFIX          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    POSTFIX         reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    INFIX           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    DIV             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    EQUAL           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    SUB             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    ADD             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    EXCLAMATION     reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    MUL             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    MOD             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    OR              reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    LT              reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    GT              reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    CARET           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    TILDE           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    CONDOP          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    ANDAND          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    OROR            reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    NOT             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    DOT             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    EQUALEQUAL      reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    NOTEQUAL        reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    LTE             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    GTE             reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    IDENTIFIER      reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    LPAREN          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    STRING_LITERAL  reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    CHAR_CONST      reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    FLOAT_CONST     reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    INT_CONST       reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    NIL_LITERAL     reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    LBRACK          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    $end            reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    RCURLY          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    CASE            reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    DEFAULT         reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    COMMA           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    SEMICOLON       reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    RBRACK          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    LCURLY          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    RPAREN          reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    WHERE           reduce using rule 155 (binary_expressions -> binary_expression_plus .)
    COLON           reduce using rule 155 (binary_expressions -> binary_expression_plus .)


state 135

    (248) conditional_operator -> LT .
    (234) operator -> LT .

  ! reduce/reduce conflict for AND resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for DIV resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for EQUAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for SUB resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for ADD resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for MUL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for MOD resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for OR resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for GT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for CARET resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for TILDE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for CONDOP resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for ANDAND resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for OROR resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for NOT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for DOT resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LTE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for GTE resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for NIL_LITERAL resolved using rule 234 (operator -> LT .)
  ! reduce/reduce conflict for LBRACK resolved using rule 234 (operator -> LT .)
    AND             reduce using rule 234 (operator -> LT .)
    DIV             reduce using rule 234 (operator -> LT .)
    EQUAL           reduce using rule 234 (operator -> LT .)
    SUB             reduce using rule 234 (operator -> LT .)
    ADD             reduce using rule 234 (operator -> LT .)
    EXCLAMATION     reduce using rule 234 (operator -> LT .)
    MUL             reduce using rule 234 (operator -> LT .)
    MOD             reduce using rule 234 (operator -> LT .)
    OR              reduce using rule 234 (operator -> LT .)
    LT              reduce using rule 234 (operator -> LT .)
    GT              reduce using rule 234 (operator -> LT .)
    CARET           reduce using rule 234 (operator -> LT .)
    TILDE           reduce using rule 234 (operator -> LT .)
    CONDOP          reduce using rule 234 (operator -> LT .)
    ANDAND          reduce using rule 234 (operator -> LT .)
    OROR            reduce using rule 234 (operator -> LT .)
    NOT             reduce using rule 234 (operator -> LT .)
    DOT             reduce using rule 234 (operator -> LT .)
    EQUALEQUAL      reduce using rule 234 (operator -> LT .)
    NOTEQUAL        reduce using rule 234 (operator -> LT .)
    LTE             reduce using rule 234 (operator -> LT .)
    GTE             reduce using rule 234 (operator -> LT .)
    IDENTIFIER      reduce using rule 234 (operator -> LT .)
    LPAREN          reduce using rule 234 (operator -> LT .)
    STRING_LITERAL  reduce using rule 234 (operator -> LT .)
    CHAR_CONST      reduce using rule 234 (operator -> LT .)
    FLOAT_CONST     reduce using rule 234 (operator -> LT .)
    INT_CONST       reduce using rule 234 (operator -> LT .)
    NIL_LITERAL     reduce using rule 234 (operator -> LT .)
    LBRACK          reduce using rule 234 (operator -> LT .)

  ! AND             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! DIV             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! EQUAL           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! SUB             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! ADD             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! EXCLAMATION     [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! MUL             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! MOD             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! OR              [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LT              [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! GT              [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! CARET           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! TILDE           [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! CONDOP          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! ANDAND          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! OROR            [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! NOT             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! DOT             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! EQUALEQUAL      [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! NOTEQUAL        [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LTE             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! GTE             [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! IDENTIFIER      [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LPAREN          [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! STRING_LITERAL  [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! CHAR_CONST      [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! FLOAT_CONST     [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! INT_CONST       [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! NIL_LITERAL     [ reduce using rule 248 (conditional_operator -> LT .) ]
  ! LBRACK          [ reduce using rule 248 (conditional_operator -> LT .) ]


state 136

    (154) binary_expression -> conditional_operator . prefix_expression
    (239) operator -> conditional_operator .
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
  ! shift/reduce conflict for CONDOP resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for NIL_LITERAL resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

  ! AND             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! DIV             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! EQUAL           [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! SUB             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! ADD             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! EXCLAMATION     [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! MUL             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! MOD             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! OR              [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! LT              [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! GT              [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! CARET           [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! TILDE           [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! CONDOP          [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! ANDAND          [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! OROR            [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! NOT             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! DOT             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! EQUALEQUAL      [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! NOTEQUAL        [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! LTE             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! GTE             [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! IDENTIFIER      [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! LPAREN          [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! STRING_LITERAL  [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! CHAR_CONST      [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! FLOAT_CONST     [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! INT_CONST       [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! NIL_LITERAL     [ reduce using rule 239 (operator -> conditional_operator .) ]
  ! LBRACK          [ reduce using rule 239 (operator -> conditional_operator .) ]

    prefix_expression              shift and go to state 192
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    parenthesized_expression       shift and go to state 53

state 137

    (143) expression -> prefix_expression binary_expressions .

    PRINT           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    IMPORT          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    LET             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    STRUCT          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    FOR             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    WHILE           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    REPEAT          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    IF              reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    SWITCH          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    BREAK           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    CONTINUE        reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    RETURN          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    AND             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    VAR             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    FUNC            reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    PREFIX          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    POSTFIX         reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    INFIX           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    DIV             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    EQUAL           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    SUB             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    ADD             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    EXCLAMATION     reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    MUL             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    MOD             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    OR              reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    LT              reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    GT              reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    CARET           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    TILDE           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    CONDOP          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    ANDAND          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    OROR            reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    NOT             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    DOT             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    EQUALEQUAL      reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    NOTEQUAL        reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    LTE             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    GTE             reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    IDENTIFIER      reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    LPAREN          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    STRING_LITERAL  reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    CHAR_CONST      reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    FLOAT_CONST     reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    INT_CONST       reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    NIL_LITERAL     reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    LBRACK          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    $end            reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    COMMA           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    SEMICOLON       reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    RPAREN          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    LCURLY          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    RCURLY          reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    CASE            reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    DEFAULT         reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    WHERE           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    COLON           reduce using rule 143 (expression -> prefix_expression binary_expressions .)
    RBRACK          reduce using rule 143 (expression -> prefix_expression binary_expressions .)


state 138

    (249) conditional_operator -> GT .
    (235) operator -> GT .

  ! reduce/reduce conflict for AND resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for DIV resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for EQUAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for SUB resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for ADD resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for MUL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for MOD resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for OR resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for GT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for CARET resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for TILDE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for CONDOP resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for ANDAND resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for OROR resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for NOT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for DOT resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LTE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for GTE resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for NIL_LITERAL resolved using rule 235 (operator -> GT .)
  ! reduce/reduce conflict for LBRACK resolved using rule 235 (operator -> GT .)
    AND             reduce using rule 235 (operator -> GT .)
    DIV             reduce using rule 235 (operator -> GT .)
    EQUAL           reduce using rule 235 (operator -> GT .)
    SUB             reduce using rule 235 (operator -> GT .)
    ADD             reduce using rule 235 (operator -> GT .)
    EXCLAMATION     reduce using rule 235 (operator -> GT .)
    MUL             reduce using rule 235 (operator -> GT .)
    MOD             reduce using rule 235 (operator -> GT .)
    OR              reduce using rule 235 (operator -> GT .)
    LT              reduce using rule 235 (operator -> GT .)
    GT              reduce using rule 235 (operator -> GT .)
    CARET           reduce using rule 235 (operator -> GT .)
    TILDE           reduce using rule 235 (operator -> GT .)
    CONDOP          reduce using rule 235 (operator -> GT .)
    ANDAND          reduce using rule 235 (operator -> GT .)
    OROR            reduce using rule 235 (operator -> GT .)
    NOT             reduce using rule 235 (operator -> GT .)
    DOT             reduce using rule 235 (operator -> GT .)
    EQUALEQUAL      reduce using rule 235 (operator -> GT .)
    NOTEQUAL        reduce using rule 235 (operator -> GT .)
    LTE             reduce using rule 235 (operator -> GT .)
    GTE             reduce using rule 235 (operator -> GT .)
    IDENTIFIER      reduce using rule 235 (operator -> GT .)
    LPAREN          reduce using rule 235 (operator -> GT .)
    STRING_LITERAL  reduce using rule 235 (operator -> GT .)
    CHAR_CONST      reduce using rule 235 (operator -> GT .)
    FLOAT_CONST     reduce using rule 235 (operator -> GT .)
    INT_CONST       reduce using rule 235 (operator -> GT .)
    NIL_LITERAL     reduce using rule 235 (operator -> GT .)
    LBRACK          reduce using rule 235 (operator -> GT .)

  ! AND             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! DIV             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! EQUAL           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! SUB             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! ADD             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! EXCLAMATION     [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! MUL             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! MOD             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! OR              [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LT              [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! GT              [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! CARET           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! TILDE           [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! CONDOP          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! ANDAND          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! OROR            [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! NOT             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! DOT             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! EQUALEQUAL      [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! NOTEQUAL        [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LTE             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! GTE             [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! IDENTIFIER      [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LPAREN          [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! STRING_LITERAL  [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! CHAR_CONST      [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! FLOAT_CONST     [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! INT_CONST       [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! NIL_LITERAL     [ reduce using rule 249 (conditional_operator -> GT .) ]
  ! LBRACK          [ reduce using rule 249 (conditional_operator -> GT .) ]


state 139

    (156) binary_expression_plus -> binary_expression . binary_expression_plus
    (157) binary_expression_plus -> binary_expression .
    (156) binary_expression_plus -> . binary_expression binary_expression_plus
    (157) binary_expression_plus -> . binary_expression
    (152) binary_expression -> . binary_operator prefix_expression
    (153) binary_expression -> . EQUAL prefix_expression
    (154) binary_expression -> . conditional_operator prefix_expression
    (223) binary_operator -> . operator
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUALEQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
  ! shift/reduce conflict for CONDOP resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    PRINT           reduce using rule 157 (binary_expression_plus -> binary_expression .)
    IMPORT          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    LET             reduce using rule 157 (binary_expression_plus -> binary_expression .)
    STRUCT          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    FOR             reduce using rule 157 (binary_expression_plus -> binary_expression .)
    WHILE           reduce using rule 157 (binary_expression_plus -> binary_expression .)
    REPEAT          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    IF              reduce using rule 157 (binary_expression_plus -> binary_expression .)
    SWITCH          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    BREAK           reduce using rule 157 (binary_expression_plus -> binary_expression .)
    CONTINUE        reduce using rule 157 (binary_expression_plus -> binary_expression .)
    RETURN          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    VAR             reduce using rule 157 (binary_expression_plus -> binary_expression .)
    FUNC            reduce using rule 157 (binary_expression_plus -> binary_expression .)
    PREFIX          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    POSTFIX         reduce using rule 157 (binary_expression_plus -> binary_expression .)
    INFIX           reduce using rule 157 (binary_expression_plus -> binary_expression .)
    IDENTIFIER      reduce using rule 157 (binary_expression_plus -> binary_expression .)
    LPAREN          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    STRING_LITERAL  reduce using rule 157 (binary_expression_plus -> binary_expression .)
    CHAR_CONST      reduce using rule 157 (binary_expression_plus -> binary_expression .)
    FLOAT_CONST     reduce using rule 157 (binary_expression_plus -> binary_expression .)
    INT_CONST       reduce using rule 157 (binary_expression_plus -> binary_expression .)
    NIL_LITERAL     reduce using rule 157 (binary_expression_plus -> binary_expression .)
    LBRACK          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    $end            reduce using rule 157 (binary_expression_plus -> binary_expression .)
    RCURLY          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    CASE            reduce using rule 157 (binary_expression_plus -> binary_expression .)
    DEFAULT         reduce using rule 157 (binary_expression_plus -> binary_expression .)
    COMMA           reduce using rule 157 (binary_expression_plus -> binary_expression .)
    SEMICOLON       reduce using rule 157 (binary_expression_plus -> binary_expression .)
    RBRACK          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    LCURLY          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    RPAREN          reduce using rule 157 (binary_expression_plus -> binary_expression .)
    WHERE           reduce using rule 157 (binary_expression_plus -> binary_expression .)
    COLON           reduce using rule 157 (binary_expression_plus -> binary_expression .)
    EQUAL           shift and go to state 132
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LT              shift and go to state 135
    GT              shift and go to state 138
    DIV             shift and go to state 73
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46

  ! AND             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! DIV             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! EQUAL           [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! SUB             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! ADD             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! EXCLAMATION     [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! MUL             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! MOD             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! OR              [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! LT              [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! GT              [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! CARET           [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! TILDE           [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! CONDOP          [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! ANDAND          [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! OROR            [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! NOT             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! DOT             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! EQUALEQUAL      [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! NOTEQUAL        [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! LTE             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]
  ! GTE             [ reduce using rule 157 (binary_expression_plus -> binary_expression .) ]

    binary_expression              shift and go to state 139
    conditional_operator           shift and go to state 136
    binary_operator                shift and go to state 140
    operator                       shift and go to state 133
    binary_expression_plus         shift and go to state 193

state 140

    (152) binary_expression -> binary_operator . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 194
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    parenthesized_expression       shift and go to state 53
    primary_expression             shift and go to state 58

state 141

    (81) constant_declaration -> LET pattern_initializer_list .

    PRINT           reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    IMPORT          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    LET             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    STRUCT          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    FOR             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    WHILE           reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    REPEAT          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    IF              reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    SWITCH          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    BREAK           reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    CONTINUE        reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    RETURN          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    AND             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    VAR             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    FUNC            reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    PREFIX          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    POSTFIX         reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    INFIX           reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    DIV             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    EQUAL           reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    SUB             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    ADD             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    EXCLAMATION     reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    MUL             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    MOD             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    OR              reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    LT              reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    GT              reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    CARET           reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    TILDE           reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    CONDOP          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    ANDAND          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    OROR            reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    NOT             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    DOT             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    EQUALEQUAL      reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    NOTEQUAL        reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    LTE             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    GTE             reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    IDENTIFIER      reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    LPAREN          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    STRING_LITERAL  reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    CHAR_CONST      reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    FLOAT_CONST     reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    INT_CONST       reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    NIL_LITERAL     reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    LBRACK          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    RCURLY          reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    CASE            reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    DEFAULT         reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)
    $end            reduce using rule 81 (constant_declaration -> LET pattern_initializer_list .)


state 142

    (139) identifier_pattern -> declaration_identifier .
    (158) primary_expression -> declaration_identifier .

  ! reduce/reduce conflict for DOT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LBRACK resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for GT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for DIV resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for SUB resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for ADD resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for MUL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for AND resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for OR resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CARET resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for TILDE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CONDOP resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for ANDAND resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for OROR resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for NOT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for COLON resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for PRINT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for LET resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for STRUCT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for FOR resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for REPEAT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for IF resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for SWITCH resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for VAR resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for FUNC resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for PREFIX resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for POSTFIX resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for INFIX resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for FLOAT_CONST resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for INT_CONST resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for NIL_LITERAL resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for $end resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for RCURLY resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for CASE resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 139 (identifier_pattern -> declaration_identifier .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 139 (identifier_pattern -> declaration_identifier .)
    COLON           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    EQUAL           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    COMMA           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    PRINT           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    IMPORT          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LET             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    STRUCT          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    FOR             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    WHILE           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    REPEAT          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    IF              reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    SWITCH          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    BREAK           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CONTINUE        reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    RETURN          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    AND             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    VAR             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    FUNC            reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    PREFIX          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    POSTFIX         reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    INFIX           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    DIV             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    SUB             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    ADD             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    EXCLAMATION     reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    MUL             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    MOD             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    OR              reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LT              reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    GT              reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CARET           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    TILDE           reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CONDOP          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    ANDAND          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    OROR            reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    NOT             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    DOT             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    EQUALEQUAL      reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    NOTEQUAL        reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LTE             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    GTE             reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    IDENTIFIER      reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LPAREN          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    STRING_LITERAL  reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CHAR_CONST      reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    FLOAT_CONST     reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    INT_CONST       reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    NIL_LITERAL     reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    LBRACK          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    $end            reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    RCURLY          reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    CASE            reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    DEFAULT         reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    SEMICOLON       reduce using rule 139 (identifier_pattern -> declaration_identifier .)
    WHERE           reduce using rule 139 (identifier_pattern -> declaration_identifier .)

  ! DOT             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LPAREN          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LBRACK          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! EQUAL           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! EQUALEQUAL      [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! NOTEQUAL        [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LTE             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! GTE             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LT              [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! GT              [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! DIV             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! SUB             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! ADD             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! EXCLAMATION     [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! MUL             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! MOD             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! AND             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! OR              [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CARET           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! TILDE           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CONDOP          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! ANDAND          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! OROR            [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! NOT             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! COMMA           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! WHERE           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! COLON           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! PRINT           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! IMPORT          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! LET             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! STRUCT          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! FOR             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! WHILE           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! REPEAT          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! IF              [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! SWITCH          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! BREAK           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CONTINUE        [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! RETURN          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! VAR             [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! FUNC            [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! PREFIX          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! POSTFIX         [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! INFIX           [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! IDENTIFIER      [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! STRING_LITERAL  [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CHAR_CONST      [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! FLOAT_CONST     [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! INT_CONST       [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! NIL_LITERAL     [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! $end            [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! RCURLY          [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! CASE            [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! DEFAULT         [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]
  ! SEMICOLON       [ reduce using rule 158 (primary_expression -> declaration_identifier .) ]


state 143

    (129) prefix_operator_declaration -> PREFIX OPERATOR . operator
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT

    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74

    operator                       shift and go to state 195
    conditional_operator           shift and go to state 79

state 144

    (97) function_name -> operator .

    LPAREN          reduce using rule 97 (function_name -> operator .)


state 145

    (96) function_name -> declaration_identifier .

    LPAREN          reduce using rule 96 (function_name -> declaration_identifier .)


state 146

    (93) function_declaration -> function_head function_name . function_signature function_body
    (94) function_declaration -> function_head function_name . function_signature
    (98) function_signature -> . parameter_clause THROWS function_result
    (99) function_signature -> . parameter_clause
    (100) function_signature -> . parameter_clause THROWS
    (101) function_signature -> . parameter_clause function_result
    (102) function_signature -> . parameter_clause RETHROWS function_result
    (103) function_signature -> . parameter_clause RETHROWS
    (106) parameter_clause -> . LPAREN RPAREN
    (107) parameter_clause -> . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 197

    function_signature             shift and go to state 196
    parameter_clause               shift and go to state 198

state 147

    (171) postfix_expression -> postfix_expression function_call_argument_clause .

    DOT             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    LPAREN          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    LBRACK          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    EQUAL           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    EQUALEQUAL      reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    NOTEQUAL        reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    LTE             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    GTE             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    LT              reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    GT              reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    DIV             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    SUB             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    ADD             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    EXCLAMATION     reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    MUL             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    MOD             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    AND             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    OR              reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    CARET           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    TILDE           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    CONDOP          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    ANDAND          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    OROR            reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    NOT             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    RPAREN          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    PRINT           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    IMPORT          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    LET             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    STRUCT          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    FOR             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    WHILE           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    REPEAT          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    IF              reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    SWITCH          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    BREAK           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    CONTINUE        reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    RETURN          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    VAR             reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    FUNC            reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    PREFIX          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    POSTFIX         reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    INFIX           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    IDENTIFIER      reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    STRING_LITERAL  reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    CHAR_CONST      reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    FLOAT_CONST     reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    INT_CONST       reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    NIL_LITERAL     reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    $end            reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    RCURLY          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    CASE            reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    DEFAULT         reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    COMMA           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    SEMICOLON       reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    RBRACK          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    LCURLY          reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    WHERE           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)
    COLON           reduce using rule 171 (postfix_expression -> postfix_expression function_call_argument_clause .)


state 148

    (179) postfix_expression -> postfix_expression LBRACK . expression_list RBRACK
    (145) expression_list -> . expression commaexp
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    expression_list                shift and go to state 199
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 180
    parenthesized_expression       shift and go to state 53

state 149

    (177) postfix_expression -> postfix_expression LPAREN . argument_names RPAREN
    (180) function_call_argument_clause -> LPAREN . RPAREN
    (181) function_call_argument_clause -> LPAREN . function_call_argument_list RPAREN
    (189) argument_names -> . argument_name argument_name_star
    (182) function_call_argument_list -> . function_call_argument COMMAfunction_call_argument_star
    (192) argument_name -> . label_identifier COLON
    (185) function_call_argument -> . expression
    (186) function_call_argument -> . label_identifier COLON expression
    (187) function_call_argument -> . operator
    (188) function_call_argument -> . label_identifier COLON operator
    (221) label_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    RPAREN          shift and go to state 201
    IDENTIFIER      shift and go to state 203
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 206
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 200
    postfix_expression             shift and go to state 76
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 23
    function_call_argument         shift and go to state 204
    function_call_argument_list    shift and go to state 205
    label_identifier               shift and go to state 202
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    argument_name                  shift and go to state 207
    in_out_expression              shift and go to state 30
    argument_names                 shift and go to state 208
    expression                     shift and go to state 209

state 150

    (172) postfix_expression -> postfix_expression DOT . INIT
    (173) postfix_expression -> postfix_expression DOT . INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> postfix_expression DOT . INT_CONST
    (175) postfix_expression -> postfix_expression DOT . declaration_identifier
    (176) postfix_expression -> postfix_expression DOT . declaration_identifier LPAREN argument_names RPAREN
    (178) postfix_expression -> postfix_expression DOT . SELF
    (220) declaration_identifier -> . IDENTIFIER

    INIT            shift and go to state 212
    INT_CONST       shift and go to state 210
    SELF            shift and go to state 211
    IDENTIFIER      shift and go to state 63

    declaration_identifier         shift and go to state 213

state 151

    (169) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 214


state 152

    (35) if_statement -> IF condition_list . code_block else_clause
    (36) if_statement -> IF condition_list . code_block
    (68) code_block -> . LCURLY statements RCURLY
    (69) code_block -> . LCURLY RCURLY

    LCURLY          shift and go to state 113

    code_block                     shift and go to state 215

state 153

    (120) struct_declaration -> STRUCT struct_name . struct_body
    (122) struct_body -> . LCURLY struct_member_star RCURLY

    LCURLY          shift and go to state 217

    struct_body                    shift and go to state 216

state 154

    (121) struct_name -> declaration_identifier .

    LCURLY          reduce using rule 121 (struct_name -> declaration_identifier .)


state 155

    (130) postfix_operator_declaration -> POSTFIX OPERATOR operator .

    PRINT           reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    IMPORT          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    LET             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    STRUCT          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    FOR             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    WHILE           reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    REPEAT          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    IF              reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    SWITCH          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    BREAK           reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    CONTINUE        reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    RETURN          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    AND             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    VAR             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    FUNC            reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    PREFIX          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    POSTFIX         reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    INFIX           reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    DIV             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    EQUAL           reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    SUB             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    ADD             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    EXCLAMATION     reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    MUL             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    MOD             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    OR              reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    LT              reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    GT              reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    CARET           reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    TILDE           reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    CONDOP          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    ANDAND          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    OROR            reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    NOT             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    DOT             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    EQUALEQUAL      reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    NOTEQUAL        reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    LTE             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    GTE             reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    IDENTIFIER      reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    LPAREN          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    STRING_LITERAL  reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    CHAR_CONST      reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    FLOAT_CONST     reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    INT_CONST       reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    NIL_LITERAL     reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    LBRACK          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    CASE            reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    DEFAULT         reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    RCURLY          reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)
    $end            reduce using rule 130 (postfix_operator_declaration -> POSTFIX OPERATOR operator .)


state 156

    (70) import_declaration -> IMPORT import_kind import_path .

    PRINT           reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    IMPORT          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    LET             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    STRUCT          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    FOR             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    WHILE           reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    REPEAT          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    IF              reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    SWITCH          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    BREAK           reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    CONTINUE        reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    RETURN          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    AND             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    VAR             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    FUNC            reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    PREFIX          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    POSTFIX         reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    INFIX           reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    DIV             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    EQUAL           reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    SUB             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    ADD             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    EXCLAMATION     reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    MUL             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    MOD             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    OR              reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    LT              reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    GT              reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    CARET           reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    TILDE           reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    CONDOP          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    ANDAND          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    OROR            reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    NOT             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    DOT             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    EQUALEQUAL      reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    NOTEQUAL        reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    LTE             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    GTE             reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    IDENTIFIER      reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    LPAREN          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    STRING_LITERAL  reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    CHAR_CONST      reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    FLOAT_CONST     reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    INT_CONST       reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    NIL_LITERAL     reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    LBRACK          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    CASE            reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    DEFAULT         reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    RCURLY          reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)
    $end            reduce using rule 70 (import_declaration -> IMPORT import_kind import_path .)


state 157

    (76) import_path -> import_path_identifier dot_import_path_identifier .

    PRINT           reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    IMPORT          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    LET             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    STRUCT          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    FOR             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    WHILE           reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    REPEAT          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    IF              reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    SWITCH          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    BREAK           reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    CONTINUE        reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    RETURN          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    AND             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    VAR             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    FUNC            reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    PREFIX          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    POSTFIX         reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    INFIX           reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    DIV             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    EQUAL           reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    SUB             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    ADD             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    EXCLAMATION     reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    MUL             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    MOD             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    OR              reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    LT              reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    GT              reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    CARET           reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    TILDE           reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    CONDOP          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    ANDAND          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    OROR            reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    NOT             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    DOT             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    EQUALEQUAL      reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    NOTEQUAL        reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    LTE             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    GTE             reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    IDENTIFIER      reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    LPAREN          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    STRING_LITERAL  reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    CHAR_CONST      reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    FLOAT_CONST     reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    INT_CONST       reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    NIL_LITERAL     reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    LBRACK          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    $end            reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    RCURLY          reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    CASE            reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)
    DEFAULT         reduce using rule 76 (import_path -> import_path_identifier dot_import_path_identifier .)


state 158

    (77) dot_import_path_identifier -> DOT . import_path_identifier dot_import_path_identifier
    (79) import_path_identifier -> . declaration_identifier
    (80) import_path_identifier -> . operator
    (220) declaration_identifier -> . IDENTIFIER
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT

    IDENTIFIER      shift and go to state 63
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 98
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74

    declaration_identifier         shift and go to state 95
    import_path_identifier         shift and go to state 218
    conditional_operator           shift and go to state 79
    operator                       shift and go to state 91

state 159

    (87) initializer -> EQUAL . expression
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 219
    parenthesized_expression       shift and go to state 53

state 160

    (85) pattern_initializer -> pattern initializer .

    COMMA           reduce using rule 85 (pattern_initializer -> pattern initializer .)
    PRINT           reduce using rule 85 (pattern_initializer -> pattern initializer .)
    IMPORT          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    LET             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    STRUCT          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    FOR             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    WHILE           reduce using rule 85 (pattern_initializer -> pattern initializer .)
    REPEAT          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    IF              reduce using rule 85 (pattern_initializer -> pattern initializer .)
    SWITCH          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    BREAK           reduce using rule 85 (pattern_initializer -> pattern initializer .)
    CONTINUE        reduce using rule 85 (pattern_initializer -> pattern initializer .)
    RETURN          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    AND             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    VAR             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    FUNC            reduce using rule 85 (pattern_initializer -> pattern initializer .)
    PREFIX          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    POSTFIX         reduce using rule 85 (pattern_initializer -> pattern initializer .)
    INFIX           reduce using rule 85 (pattern_initializer -> pattern initializer .)
    DIV             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    EQUAL           reduce using rule 85 (pattern_initializer -> pattern initializer .)
    SUB             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    ADD             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    EXCLAMATION     reduce using rule 85 (pattern_initializer -> pattern initializer .)
    MUL             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    MOD             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    OR              reduce using rule 85 (pattern_initializer -> pattern initializer .)
    LT              reduce using rule 85 (pattern_initializer -> pattern initializer .)
    GT              reduce using rule 85 (pattern_initializer -> pattern initializer .)
    CARET           reduce using rule 85 (pattern_initializer -> pattern initializer .)
    TILDE           reduce using rule 85 (pattern_initializer -> pattern initializer .)
    CONDOP          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    ANDAND          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    OROR            reduce using rule 85 (pattern_initializer -> pattern initializer .)
    NOT             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    DOT             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    EQUALEQUAL      reduce using rule 85 (pattern_initializer -> pattern initializer .)
    NOTEQUAL        reduce using rule 85 (pattern_initializer -> pattern initializer .)
    LTE             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    GTE             reduce using rule 85 (pattern_initializer -> pattern initializer .)
    IDENTIFIER      reduce using rule 85 (pattern_initializer -> pattern initializer .)
    LPAREN          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    STRING_LITERAL  reduce using rule 85 (pattern_initializer -> pattern initializer .)
    CHAR_CONST      reduce using rule 85 (pattern_initializer -> pattern initializer .)
    FLOAT_CONST     reduce using rule 85 (pattern_initializer -> pattern initializer .)
    INT_CONST       reduce using rule 85 (pattern_initializer -> pattern initializer .)
    NIL_LITERAL     reduce using rule 85 (pattern_initializer -> pattern initializer .)
    LBRACK          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    $end            reduce using rule 85 (pattern_initializer -> pattern initializer .)
    RCURLY          reduce using rule 85 (pattern_initializer -> pattern initializer .)
    CASE            reduce using rule 85 (pattern_initializer -> pattern initializer .)
    DEFAULT         reduce using rule 85 (pattern_initializer -> pattern initializer .)
    SEMICOLON       reduce using rule 85 (pattern_initializer -> pattern initializer .)


state 161

    (88) variable_declaration -> variable_declaration_head variable_name type_annotation . code_block
    (89) variable_declaration -> variable_declaration_head variable_name type_annotation . initializer
    (68) code_block -> . LCURLY statements RCURLY
    (69) code_block -> . LCURLY RCURLY
    (87) initializer -> . EQUAL expression

    LCURLY          shift and go to state 113
    EQUAL           shift and go to state 159

    code_block                     shift and go to state 220
    initializer                    shift and go to state 221

state 162

    (196) type_annotation -> COLON . INOUT type
    (197) type_annotation -> COLON . type
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    INOUT           shift and go to state 226
    LBRACK          shift and go to state 236
    LPAREN          shift and go to state 231
    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    declaration_identifier         shift and go to state 227
    function_type                  shift and go to state 223
    array_type                     shift and go to state 232
    type                           shift and go to state 228

state 163

    (83) p_com_pat_init_star -> COMMA . pattern_initializer p_com_pat_init_star
    (85) pattern_initializer -> . pattern initializer
    (86) pattern_initializer -> . pattern
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern_initializer            shift and go to state 237
    pattern                        shift and go to state 101
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    prefix_expression              shift and go to state 64
    parenthesized_expression       shift and go to state 53
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 164

    (82) pattern_initializer_list -> pattern_initializer p_com_pat_init_star .

    PRINT           reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    IMPORT          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    LET             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    STRUCT          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    FOR             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    WHILE           reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    REPEAT          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    IF              reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    SWITCH          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    BREAK           reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    CONTINUE        reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    RETURN          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    AND             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    VAR             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    FUNC            reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    PREFIX          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    POSTFIX         reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    INFIX           reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    DIV             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    EQUAL           reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    SUB             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    ADD             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    EXCLAMATION     reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    MUL             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    MOD             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    OR              reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    LT              reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    GT              reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    CARET           reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    TILDE           reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    CONDOP          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    ANDAND          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    OROR            reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    NOT             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    DOT             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    EQUALEQUAL      reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    NOTEQUAL        reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    LTE             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    GTE             reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    IDENTIFIER      reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    LPAREN          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    STRING_LITERAL  reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    CHAR_CONST      reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    FLOAT_CONST     reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    INT_CONST       reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    NIL_LITERAL     reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    LBRACK          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    $end            reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    RCURLY          reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    CASE            reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    DEFAULT         reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)
    SEMICOLON       reduce using rule 82 (pattern_initializer_list -> pattern_initializer p_com_pat_init_star .)


state 165

    (135) pattern -> identifier_pattern type_annotation .

    COMMA           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    WHERE           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    COLON           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    EQUAL           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    PRINT           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    IMPORT          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    LET             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    STRUCT          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    FOR             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    WHILE           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    REPEAT          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    IF              reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    SWITCH          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    BREAK           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    CONTINUE        reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    RETURN          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    AND             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    VAR             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    FUNC            reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    PREFIX          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    POSTFIX         reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    INFIX           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    DIV             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    SUB             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    ADD             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    EXCLAMATION     reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    MUL             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    MOD             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    OR              reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    LT              reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    GT              reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    CARET           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    TILDE           reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    CONDOP          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    ANDAND          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    OROR            reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    NOT             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    DOT             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    EQUALEQUAL      reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    NOTEQUAL        reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    LTE             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    GTE             reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    IDENTIFIER      reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    LPAREN          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    STRING_LITERAL  reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    CHAR_CONST      reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    FLOAT_CONST     reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    INT_CONST       reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    NIL_LITERAL     reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    LBRACK          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    $end            reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    RCURLY          reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    CASE            reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    DEFAULT         reduce using rule 135 (pattern -> identifier_pattern type_annotation .)
    SEMICOLON       reduce using rule 135 (pattern -> identifier_pattern type_annotation .)


state 166

    (140) value_binding_pattern -> VAR pattern .

    EQUAL           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    COMMA           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    PRINT           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    IMPORT          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    LET             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    STRUCT          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    FOR             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    WHILE           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    REPEAT          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    IF              reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    SWITCH          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    BREAK           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    CONTINUE        reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    RETURN          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    AND             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    VAR             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    FUNC            reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    PREFIX          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    POSTFIX         reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    INFIX           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    DIV             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    SUB             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    ADD             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    EXCLAMATION     reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    MUL             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    MOD             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    OR              reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    LT              reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    GT              reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    CARET           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    TILDE           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    CONDOP          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    ANDAND          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    OROR            reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    NOT             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    DOT             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    EQUALEQUAL      reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    NOTEQUAL        reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    LTE             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    GTE             reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    IDENTIFIER      reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    LPAREN          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    STRING_LITERAL  reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    CHAR_CONST      reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    FLOAT_CONST     reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    INT_CONST       reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    NIL_LITERAL     reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    LBRACK          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    $end            reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    RCURLY          reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    CASE            reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    DEFAULT         reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    SEMICOLON       reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    WHERE           reduce using rule 140 (value_binding_pattern -> VAR pattern .)
    COLON           reduce using rule 140 (value_binding_pattern -> VAR pattern .)


state 167

    (141) value_binding_pattern -> LET pattern .

    EQUAL           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    COMMA           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    PRINT           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    IMPORT          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    LET             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    STRUCT          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    FOR             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    WHILE           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    REPEAT          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    IF              reduce using rule 141 (value_binding_pattern -> LET pattern .)
    SWITCH          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    BREAK           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    CONTINUE        reduce using rule 141 (value_binding_pattern -> LET pattern .)
    RETURN          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    AND             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    VAR             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    FUNC            reduce using rule 141 (value_binding_pattern -> LET pattern .)
    PREFIX          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    POSTFIX         reduce using rule 141 (value_binding_pattern -> LET pattern .)
    INFIX           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    DIV             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    SUB             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    ADD             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    EXCLAMATION     reduce using rule 141 (value_binding_pattern -> LET pattern .)
    MUL             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    MOD             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    OR              reduce using rule 141 (value_binding_pattern -> LET pattern .)
    LT              reduce using rule 141 (value_binding_pattern -> LET pattern .)
    GT              reduce using rule 141 (value_binding_pattern -> LET pattern .)
    CARET           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    TILDE           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    CONDOP          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    ANDAND          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    OROR            reduce using rule 141 (value_binding_pattern -> LET pattern .)
    NOT             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    DOT             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    EQUALEQUAL      reduce using rule 141 (value_binding_pattern -> LET pattern .)
    NOTEQUAL        reduce using rule 141 (value_binding_pattern -> LET pattern .)
    LTE             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    GTE             reduce using rule 141 (value_binding_pattern -> LET pattern .)
    IDENTIFIER      reduce using rule 141 (value_binding_pattern -> LET pattern .)
    LPAREN          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    STRING_LITERAL  reduce using rule 141 (value_binding_pattern -> LET pattern .)
    CHAR_CONST      reduce using rule 141 (value_binding_pattern -> LET pattern .)
    FLOAT_CONST     reduce using rule 141 (value_binding_pattern -> LET pattern .)
    INT_CONST       reduce using rule 141 (value_binding_pattern -> LET pattern .)
    NIL_LITERAL     reduce using rule 141 (value_binding_pattern -> LET pattern .)
    LBRACK          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    $end            reduce using rule 141 (value_binding_pattern -> LET pattern .)
    RCURLY          reduce using rule 141 (value_binding_pattern -> LET pattern .)
    CASE            reduce using rule 141 (value_binding_pattern -> LET pattern .)
    DEFAULT         reduce using rule 141 (value_binding_pattern -> LET pattern .)
    SEMICOLON       reduce using rule 141 (value_binding_pattern -> LET pattern .)
    WHERE           reduce using rule 141 (value_binding_pattern -> LET pattern .)
    COLON           reduce using rule 141 (value_binding_pattern -> LET pattern .)


state 168

    (10) print_statement -> PRINT LPAREN print_arg_list . RPAREN

    RPAREN          shift and go to state 238


state 169

    (14) print_arg -> literal .
    (161) literal_expression -> literal .

  ! reduce/reduce conflict for COMMA resolved using rule 14 (print_arg -> literal .)
  ! reduce/reduce conflict for RPAREN resolved using rule 14 (print_arg -> literal .)
    COMMA           reduce using rule 14 (print_arg -> literal .)
    RPAREN          reduce using rule 14 (print_arg -> literal .)
    DOT             reduce using rule 161 (literal_expression -> literal .)
    LPAREN          reduce using rule 161 (literal_expression -> literal .)
    LBRACK          reduce using rule 161 (literal_expression -> literal .)
    EQUAL           reduce using rule 161 (literal_expression -> literal .)
    EQUALEQUAL      reduce using rule 161 (literal_expression -> literal .)
    NOTEQUAL        reduce using rule 161 (literal_expression -> literal .)
    LTE             reduce using rule 161 (literal_expression -> literal .)
    GTE             reduce using rule 161 (literal_expression -> literal .)
    LT              reduce using rule 161 (literal_expression -> literal .)
    GT              reduce using rule 161 (literal_expression -> literal .)
    DIV             reduce using rule 161 (literal_expression -> literal .)
    SUB             reduce using rule 161 (literal_expression -> literal .)
    ADD             reduce using rule 161 (literal_expression -> literal .)
    EXCLAMATION     reduce using rule 161 (literal_expression -> literal .)
    MUL             reduce using rule 161 (literal_expression -> literal .)
    MOD             reduce using rule 161 (literal_expression -> literal .)
    AND             reduce using rule 161 (literal_expression -> literal .)
    OR              reduce using rule 161 (literal_expression -> literal .)
    CARET           reduce using rule 161 (literal_expression -> literal .)
    TILDE           reduce using rule 161 (literal_expression -> literal .)
    CONDOP          reduce using rule 161 (literal_expression -> literal .)
    ANDAND          reduce using rule 161 (literal_expression -> literal .)
    OROR            reduce using rule 161 (literal_expression -> literal .)
    NOT             reduce using rule 161 (literal_expression -> literal .)

  ! COMMA           [ reduce using rule 161 (literal_expression -> literal .) ]
  ! RPAREN          [ reduce using rule 161 (literal_expression -> literal .) ]


state 170

    (219) identifier -> IDENTIFIER .
    (220) declaration_identifier -> IDENTIFIER .

  ! reduce/reduce conflict for COMMA resolved using rule 219 (identifier -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 219 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 219 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 219 (identifier -> IDENTIFIER .)
    DOT             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LBRACK          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EQUAL           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LTE             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    GTE             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LT              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    GT              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    DIV             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    SUB             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    ADD             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EXCLAMATION     reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    MUL             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    MOD             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    AND             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    OR              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CARET           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    TILDE           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CONDOP          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    ANDAND          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    OROR            reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    NOT             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)

  ! COMMA           [ reduce using rule 220 (declaration_identifier -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 220 (declaration_identifier -> IDENTIFIER .) ]


state 171

    (11) print_arg_list -> print_arg . COMMA print_arg_list
    (12) print_arg_list -> print_arg .

    COMMA           shift and go to state 239
    RPAREN          reduce using rule 12 (print_arg_list -> print_arg .)


state 172

    (13) print_arg -> identifier .

    COMMA           reduce using rule 13 (print_arg -> identifier .)
    RPAREN          reduce using rule 13 (print_arg -> identifier .)


state 173

    (15) print_arg -> expression .

    COMMA           reduce using rule 15 (print_arg -> expression .)
    RPAREN          reduce using rule 15 (print_arg -> expression .)


state 174

    (68) code_block -> LCURLY statements . RCURLY

    RCURLY          shift and go to state 240


state 175

    (69) code_block -> LCURLY RCURLY .

    PRINT           reduce using rule 69 (code_block -> LCURLY RCURLY .)
    IMPORT          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    LET             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    STRUCT          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    FOR             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    WHILE           reduce using rule 69 (code_block -> LCURLY RCURLY .)
    REPEAT          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    IF              reduce using rule 69 (code_block -> LCURLY RCURLY .)
    SWITCH          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    BREAK           reduce using rule 69 (code_block -> LCURLY RCURLY .)
    CONTINUE        reduce using rule 69 (code_block -> LCURLY RCURLY .)
    RETURN          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    AND             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    VAR             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    FUNC            reduce using rule 69 (code_block -> LCURLY RCURLY .)
    PREFIX          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    POSTFIX         reduce using rule 69 (code_block -> LCURLY RCURLY .)
    INFIX           reduce using rule 69 (code_block -> LCURLY RCURLY .)
    DIV             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    EQUAL           reduce using rule 69 (code_block -> LCURLY RCURLY .)
    SUB             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    ADD             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    EXCLAMATION     reduce using rule 69 (code_block -> LCURLY RCURLY .)
    MUL             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    MOD             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    OR              reduce using rule 69 (code_block -> LCURLY RCURLY .)
    LT              reduce using rule 69 (code_block -> LCURLY RCURLY .)
    GT              reduce using rule 69 (code_block -> LCURLY RCURLY .)
    CARET           reduce using rule 69 (code_block -> LCURLY RCURLY .)
    TILDE           reduce using rule 69 (code_block -> LCURLY RCURLY .)
    CONDOP          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    ANDAND          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    OROR            reduce using rule 69 (code_block -> LCURLY RCURLY .)
    NOT             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    DOT             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    EQUALEQUAL      reduce using rule 69 (code_block -> LCURLY RCURLY .)
    NOTEQUAL        reduce using rule 69 (code_block -> LCURLY RCURLY .)
    LTE             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    GTE             reduce using rule 69 (code_block -> LCURLY RCURLY .)
    IDENTIFIER      reduce using rule 69 (code_block -> LCURLY RCURLY .)
    LPAREN          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    STRING_LITERAL  reduce using rule 69 (code_block -> LCURLY RCURLY .)
    CHAR_CONST      reduce using rule 69 (code_block -> LCURLY RCURLY .)
    FLOAT_CONST     reduce using rule 69 (code_block -> LCURLY RCURLY .)
    INT_CONST       reduce using rule 69 (code_block -> LCURLY RCURLY .)
    NIL_LITERAL     reduce using rule 69 (code_block -> LCURLY RCURLY .)
    LBRACK          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    $end            reduce using rule 69 (code_block -> LCURLY RCURLY .)
    RCURLY          reduce using rule 69 (code_block -> LCURLY RCURLY .)
    CASE            reduce using rule 69 (code_block -> LCURLY RCURLY .)
    DEFAULT         reduce using rule 69 (code_block -> LCURLY RCURLY .)
    ELSE            reduce using rule 69 (code_block -> LCURLY RCURLY .)
    SEMICOLON       reduce using rule 69 (code_block -> LCURLY RCURLY .)


state 176

    (32) repeat_while_statement -> REPEAT code_block WHILE . expression
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 241
    parenthesized_expression       shift and go to state 53

state 177

    (19) for_statement -> FOR LPAREN for_init . SEMICOLON expression SEMICOLON expression RPAREN code_block

    SEMICOLON       shift and go to state 242


state 178

    (20) for_init -> variable_declaration .

    SEMICOLON       reduce using rule 20 (for_init -> variable_declaration .)


state 179

    (21) for_init -> expression_list .

    SEMICOLON       reduce using rule 21 (for_init -> expression_list .)


state 180

    (145) expression_list -> expression . commaexp
    (146) commaexp -> . COMMA expression commaexp
    (147) commaexp -> .

    COMMA           shift and go to state 243
    SEMICOLON       reduce using rule 147 (commaexp -> .)
    RBRACK          reduce using rule 147 (commaexp -> .)

    commaexp                       shift and go to state 244

state 181

    (165) array_literal_items -> array_literal_item COMMA .
    (167) array_literal_items -> array_literal_item COMMA . array_literal_items
    (165) array_literal_items -> . array_literal_item COMMA
    (166) array_literal_items -> . array_literal_item
    (167) array_literal_items -> . array_literal_item COMMA array_literal_items
    (168) array_literal_item -> . expression
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    RBRACK          reduce using rule 165 (array_literal_items -> array_literal_item COMMA .)
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    array_literal_item             shift and go to state 117
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    parenthesized_expression       shift and go to state 53
    expression                     shift and go to state 120
    array_literal_items            shift and go to state 245

state 182

    (163) array_literal -> LBRACK array_literal_items RBRACK .

    DOT             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    LPAREN          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    LBRACK          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    EQUAL           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    EQUALEQUAL      reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    NOTEQUAL        reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    LTE             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    GTE             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    LT              reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    GT              reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    DIV             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    SUB             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    ADD             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    EXCLAMATION     reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    MUL             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    MOD             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    AND             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    OR              reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    CARET           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    TILDE           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    CONDOP          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    ANDAND          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    OROR            reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    NOT             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    COMMA           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    WHERE           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    COLON           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    RPAREN          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    PRINT           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    IMPORT          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    LET             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    STRUCT          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    FOR             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    WHILE           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    REPEAT          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    IF              reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    SWITCH          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    BREAK           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    CONTINUE        reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    RETURN          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    VAR             reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    FUNC            reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    PREFIX          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    POSTFIX         reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    INFIX           reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    IDENTIFIER      reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    STRING_LITERAL  reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    CHAR_CONST      reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    FLOAT_CONST     reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    INT_CONST       reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    NIL_LITERAL     reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    CASE            reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    DEFAULT         reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    RCURLY          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    $end            reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    SEMICOLON       reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    RBRACK          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)
    LCURLY          reduce using rule 163 (array_literal -> LBRACK array_literal_items RBRACK .)


state 183

    (131) infix_operator_declaration -> INFIX OPERATOR operator .

    PRINT           reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    IMPORT          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    LET             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    STRUCT          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    FOR             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    WHILE           reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    REPEAT          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    IF              reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    SWITCH          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    BREAK           reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    CONTINUE        reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    RETURN          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    AND             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    VAR             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    FUNC            reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    PREFIX          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    POSTFIX         reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    INFIX           reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    DIV             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    EQUAL           reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    SUB             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    ADD             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    EXCLAMATION     reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    MUL             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    MOD             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    OR              reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    LT              reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    GT              reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    CARET           reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    TILDE           reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    CONDOP          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    ANDAND          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    OROR            reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    NOT             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    DOT             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    EQUALEQUAL      reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    NOTEQUAL        reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    LTE             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    GTE             reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    IDENTIFIER      reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    LPAREN          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    STRING_LITERAL  reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    CHAR_CONST      reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    FLOAT_CONST     reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    INT_CONST       reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    NIL_LITERAL     reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    LBRACK          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    CASE            reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    DEFAULT         reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    RCURLY          reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)
    $end            reduce using rule 131 (infix_operator_declaration -> INFIX OPERATOR operator .)


state 184

    (22) while_statement -> WHILE condition_list code_block .

    PRINT           reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    IMPORT          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    LET             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    STRUCT          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    FOR             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    WHILE           reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    REPEAT          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    IF              reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    SWITCH          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    BREAK           reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    CONTINUE        reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    RETURN          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    AND             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    VAR             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    FUNC            reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    PREFIX          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    POSTFIX         reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    INFIX           reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    DIV             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    EQUAL           reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    SUB             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    ADD             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    EXCLAMATION     reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    MUL             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    MOD             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    OR              reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    LT              reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    GT              reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    CARET           reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    TILDE           reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    CONDOP          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    ANDAND          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    OROR            reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    NOT             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    DOT             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    EQUALEQUAL      reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    NOTEQUAL        reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    LTE             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    GTE             reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    IDENTIFIER      reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    LPAREN          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    STRING_LITERAL  reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    CHAR_CONST      reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    FLOAT_CONST     reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    INT_CONST       reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    NIL_LITERAL     reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    LBRACK          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    RCURLY          reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    CASE            reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    DEFAULT         reduce using rule 22 (while_statement -> WHILE condition_list code_block .)
    $end            reduce using rule 22 (while_statement -> WHILE condition_list code_block .)


state 185

    (29) case_condition -> CASE pattern . initializer
    (87) initializer -> . EQUAL expression

    EQUAL           shift and go to state 159

    initializer                    shift and go to state 246

state 186

    (31) optional_binding_condition -> VAR pattern . initializer
    (87) initializer -> . EQUAL expression

    EQUAL           shift and go to state 159

    initializer                    shift and go to state 247

state 187

    (24) commacond -> COMMA . condition commacond
    (26) condition -> . expression
    (27) condition -> . case_condition
    (28) condition -> . optional_binding_condition
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (29) case_condition -> . CASE pattern initializer
    (30) optional_binding_condition -> . LET pattern initializer
    (31) optional_binding_condition -> . VAR pattern initializer
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    CASE            shift and go to state 125
    LET             shift and go to state 128
    VAR             shift and go to state 126
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    optional_binding_condition     shift and go to state 122
    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    postfix_expression             shift and go to state 76
    case_condition                 shift and go to state 124
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 23
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    condition                      shift and go to state 248
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    expression                     shift and go to state 129

state 188

    (23) condition_list -> condition commacond .

    LCURLY          reduce using rule 23 (condition_list -> condition commacond .)


state 189

    (30) optional_binding_condition -> LET pattern . initializer
    (87) initializer -> . EQUAL expression

    EQUAL           shift and go to state 159

    initializer                    shift and go to state 249

state 190

    (39) switch_statement -> SWITCH expression LCURLY . switch_cases RCURLY
    (40) switch_statement -> SWITCH expression LCURLY . RCURLY
    (41) switch_cases -> . switch_case switch_cases
    (42) switch_cases -> . switch_case
    (43) switch_case -> . case_label statements
    (44) switch_case -> . default_label statements
    (45) case_label -> . CASE case_item_list COLON
    (50) default_label -> . DEFAULT COLON

    RCURLY          shift and go to state 253
    CASE            shift and go to state 250
    DEFAULT         shift and go to state 254

    case_label                     shift and go to state 251
    switch_case                    shift and go to state 252
    switch_cases                   shift and go to state 255
    default_label                  shift and go to state 256

state 191

    (153) binary_expression -> EQUAL prefix_expression .

    EQUAL           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    EQUALEQUAL      reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    NOTEQUAL        reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    LTE             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    GTE             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    LT              reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    GT              reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    DIV             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    SUB             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    ADD             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    EXCLAMATION     reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    MUL             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    MOD             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    AND             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    OR              reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    CARET           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    TILDE           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    CONDOP          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    ANDAND          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    OROR            reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    NOT             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    DOT             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    PRINT           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    IMPORT          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    LET             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    STRUCT          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    FOR             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    WHILE           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    REPEAT          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    IF              reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    SWITCH          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    BREAK           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    CONTINUE        reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    RETURN          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    VAR             reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    FUNC            reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    PREFIX          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    POSTFIX         reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    INFIX           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    IDENTIFIER      reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    LPAREN          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    STRING_LITERAL  reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    CHAR_CONST      reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    FLOAT_CONST     reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    INT_CONST       reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    NIL_LITERAL     reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    LBRACK          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    $end            reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    RCURLY          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    CASE            reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    DEFAULT         reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    COMMA           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    SEMICOLON       reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    RBRACK          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    LCURLY          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    RPAREN          reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    WHERE           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)
    COLON           reduce using rule 153 (binary_expression -> EQUAL prefix_expression .)


state 192

    (154) binary_expression -> conditional_operator prefix_expression .

    EQUAL           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    EQUALEQUAL      reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    NOTEQUAL        reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    LTE             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    GTE             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    LT              reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    GT              reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    DIV             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    SUB             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    ADD             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    EXCLAMATION     reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    MUL             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    MOD             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    AND             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    OR              reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    CARET           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    TILDE           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    CONDOP          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    ANDAND          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    OROR            reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    NOT             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    DOT             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    PRINT           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    IMPORT          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    LET             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    STRUCT          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    FOR             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    WHILE           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    REPEAT          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    IF              reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    SWITCH          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    BREAK           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    CONTINUE        reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    RETURN          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    VAR             reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    FUNC            reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    PREFIX          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    POSTFIX         reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    INFIX           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    IDENTIFIER      reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    LPAREN          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    STRING_LITERAL  reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    CHAR_CONST      reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    FLOAT_CONST     reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    INT_CONST       reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    NIL_LITERAL     reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    LBRACK          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    $end            reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    RCURLY          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    CASE            reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    DEFAULT         reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    COMMA           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    SEMICOLON       reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    RBRACK          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    LCURLY          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    RPAREN          reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    WHERE           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)
    COLON           reduce using rule 154 (binary_expression -> conditional_operator prefix_expression .)


state 193

    (156) binary_expression_plus -> binary_expression binary_expression_plus .

    PRINT           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    IMPORT          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    LET             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    STRUCT          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    FOR             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    WHILE           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    REPEAT          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    IF              reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    SWITCH          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    BREAK           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    CONTINUE        reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    RETURN          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    AND             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    VAR             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    FUNC            reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    PREFIX          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    POSTFIX         reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    INFIX           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    DIV             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    EQUAL           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    SUB             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    ADD             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    EXCLAMATION     reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    MUL             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    MOD             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    OR              reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    LT              reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    GT              reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    CARET           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    TILDE           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    CONDOP          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    ANDAND          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    OROR            reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    NOT             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    DOT             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    EQUALEQUAL      reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    NOTEQUAL        reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    LTE             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    GTE             reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    IDENTIFIER      reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    LPAREN          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    STRING_LITERAL  reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    CHAR_CONST      reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    FLOAT_CONST     reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    INT_CONST       reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    NIL_LITERAL     reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    LBRACK          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    $end            reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    RCURLY          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    CASE            reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    DEFAULT         reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    COMMA           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    SEMICOLON       reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    RBRACK          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    LCURLY          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    RPAREN          reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    WHERE           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)
    COLON           reduce using rule 156 (binary_expression_plus -> binary_expression binary_expression_plus .)


state 194

    (152) binary_expression -> binary_operator prefix_expression .

    EQUAL           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    EQUALEQUAL      reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    NOTEQUAL        reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    LTE             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    GTE             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    LT              reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    GT              reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    DIV             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    SUB             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    ADD             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    EXCLAMATION     reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    MUL             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    MOD             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    AND             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    OR              reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    CARET           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    TILDE           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    CONDOP          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    ANDAND          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    OROR            reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    NOT             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    DOT             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    PRINT           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    IMPORT          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    LET             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    STRUCT          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    FOR             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    WHILE           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    REPEAT          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    IF              reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    SWITCH          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    BREAK           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    CONTINUE        reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    RETURN          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    VAR             reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    FUNC            reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    PREFIX          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    POSTFIX         reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    INFIX           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    IDENTIFIER      reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    LPAREN          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    STRING_LITERAL  reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    CHAR_CONST      reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    FLOAT_CONST     reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    INT_CONST       reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    NIL_LITERAL     reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    LBRACK          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    $end            reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    RCURLY          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    CASE            reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    DEFAULT         reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    COMMA           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    SEMICOLON       reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    RBRACK          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    LCURLY          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    RPAREN          reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    WHERE           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)
    COLON           reduce using rule 152 (binary_expression -> binary_operator prefix_expression .)


state 195

    (129) prefix_operator_declaration -> PREFIX OPERATOR operator .

    PRINT           reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    IMPORT          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    LET             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    STRUCT          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    FOR             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    WHILE           reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    REPEAT          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    IF              reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    SWITCH          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    BREAK           reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    CONTINUE        reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    RETURN          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    AND             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    VAR             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    FUNC            reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    PREFIX          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    POSTFIX         reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    INFIX           reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    DIV             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    EQUAL           reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    SUB             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    ADD             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    EXCLAMATION     reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    MUL             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    MOD             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    OR              reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    LT              reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    GT              reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    CARET           reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    TILDE           reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    CONDOP          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    ANDAND          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    OROR            reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    NOT             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    DOT             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    EQUALEQUAL      reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    NOTEQUAL        reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    LTE             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    GTE             reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    IDENTIFIER      reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    LPAREN          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    STRING_LITERAL  reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    CHAR_CONST      reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    FLOAT_CONST     reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    INT_CONST       reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    NIL_LITERAL     reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    LBRACK          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    RCURLY          reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    CASE            reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    DEFAULT         reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)
    $end            reduce using rule 129 (prefix_operator_declaration -> PREFIX OPERATOR operator .)


state 196

    (93) function_declaration -> function_head function_name function_signature . function_body
    (94) function_declaration -> function_head function_name function_signature .
    (105) function_body -> . code_block
    (68) code_block -> . LCURLY statements RCURLY
    (69) code_block -> . LCURLY RCURLY

    IMPORT          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    LET             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    STRUCT          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    VAR             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    FUNC            reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    PREFIX          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    POSTFIX         reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    INFIX           reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    RCURLY          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    PRINT           reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    FOR             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    WHILE           reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    REPEAT          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    IF              reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    SWITCH          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    BREAK           reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    CONTINUE        reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    RETURN          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    AND             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    DIV             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    EQUAL           reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    SUB             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    ADD             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    EXCLAMATION     reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    MUL             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    MOD             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    OR              reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    LT              reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    GT              reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    CARET           reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    TILDE           reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    CONDOP          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    ANDAND          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    OROR            reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    NOT             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    DOT             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    EQUALEQUAL      reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    NOTEQUAL        reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    LTE             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    GTE             reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    IDENTIFIER      reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    LPAREN          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    STRING_LITERAL  reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    CHAR_CONST      reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    FLOAT_CONST     reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    INT_CONST       reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    NIL_LITERAL     reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    LBRACK          reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    $end            reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    CASE            reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    DEFAULT         reduce using rule 94 (function_declaration -> function_head function_name function_signature .)
    LCURLY          shift and go to state 113

    code_block                     shift and go to state 257
    function_body                  shift and go to state 258

state 197

    (106) parameter_clause -> LPAREN . RPAREN
    (107) parameter_clause -> LPAREN . parameter_list RPAREN
    (108) parameter_list -> . parameter commapar
    (111) parameter -> . external_parameter_name local_parameter_name type_annotation default_argument_clause
    (112) parameter -> . local_parameter_name type_annotation
    (113) parameter -> . local_parameter_name type_annotation default_argument_clause
    (114) parameter -> . external_parameter_name local_parameter_name type_annotation
    (115) parameter -> . external_parameter_name local_parameter_name type_annotation RANGEOP
    (116) parameter -> . local_parameter_name type_annotation RANGEOP
    (117) external_parameter_name -> . label_identifier
    (118) local_parameter_name -> . label_identifier
    (221) label_identifier -> . IDENTIFIER

    RPAREN          shift and go to state 260
    IDENTIFIER      shift and go to state 263

    local_parameter_name           shift and go to state 259
    parameter_list                 shift and go to state 261
    label_identifier               shift and go to state 262
    parameter                      shift and go to state 264
    external_parameter_name        shift and go to state 265

state 198

    (98) function_signature -> parameter_clause . THROWS function_result
    (99) function_signature -> parameter_clause .
    (100) function_signature -> parameter_clause . THROWS
    (101) function_signature -> parameter_clause . function_result
    (102) function_signature -> parameter_clause . RETHROWS function_result
    (103) function_signature -> parameter_clause . RETHROWS
    (104) function_result -> . ARROW type

    THROWS          shift and go to state 269
    LCURLY          reduce using rule 99 (function_signature -> parameter_clause .)
    PRINT           reduce using rule 99 (function_signature -> parameter_clause .)
    IMPORT          reduce using rule 99 (function_signature -> parameter_clause .)
    LET             reduce using rule 99 (function_signature -> parameter_clause .)
    STRUCT          reduce using rule 99 (function_signature -> parameter_clause .)
    FOR             reduce using rule 99 (function_signature -> parameter_clause .)
    WHILE           reduce using rule 99 (function_signature -> parameter_clause .)
    REPEAT          reduce using rule 99 (function_signature -> parameter_clause .)
    IF              reduce using rule 99 (function_signature -> parameter_clause .)
    SWITCH          reduce using rule 99 (function_signature -> parameter_clause .)
    BREAK           reduce using rule 99 (function_signature -> parameter_clause .)
    CONTINUE        reduce using rule 99 (function_signature -> parameter_clause .)
    RETURN          reduce using rule 99 (function_signature -> parameter_clause .)
    AND             reduce using rule 99 (function_signature -> parameter_clause .)
    VAR             reduce using rule 99 (function_signature -> parameter_clause .)
    FUNC            reduce using rule 99 (function_signature -> parameter_clause .)
    PREFIX          reduce using rule 99 (function_signature -> parameter_clause .)
    POSTFIX         reduce using rule 99 (function_signature -> parameter_clause .)
    INFIX           reduce using rule 99 (function_signature -> parameter_clause .)
    DIV             reduce using rule 99 (function_signature -> parameter_clause .)
    EQUAL           reduce using rule 99 (function_signature -> parameter_clause .)
    SUB             reduce using rule 99 (function_signature -> parameter_clause .)
    ADD             reduce using rule 99 (function_signature -> parameter_clause .)
    EXCLAMATION     reduce using rule 99 (function_signature -> parameter_clause .)
    MUL             reduce using rule 99 (function_signature -> parameter_clause .)
    MOD             reduce using rule 99 (function_signature -> parameter_clause .)
    OR              reduce using rule 99 (function_signature -> parameter_clause .)
    LT              reduce using rule 99 (function_signature -> parameter_clause .)
    GT              reduce using rule 99 (function_signature -> parameter_clause .)
    CARET           reduce using rule 99 (function_signature -> parameter_clause .)
    TILDE           reduce using rule 99 (function_signature -> parameter_clause .)
    CONDOP          reduce using rule 99 (function_signature -> parameter_clause .)
    ANDAND          reduce using rule 99 (function_signature -> parameter_clause .)
    OROR            reduce using rule 99 (function_signature -> parameter_clause .)
    NOT             reduce using rule 99 (function_signature -> parameter_clause .)
    DOT             reduce using rule 99 (function_signature -> parameter_clause .)
    EQUALEQUAL      reduce using rule 99 (function_signature -> parameter_clause .)
    NOTEQUAL        reduce using rule 99 (function_signature -> parameter_clause .)
    LTE             reduce using rule 99 (function_signature -> parameter_clause .)
    GTE             reduce using rule 99 (function_signature -> parameter_clause .)
    IDENTIFIER      reduce using rule 99 (function_signature -> parameter_clause .)
    LPAREN          reduce using rule 99 (function_signature -> parameter_clause .)
    STRING_LITERAL  reduce using rule 99 (function_signature -> parameter_clause .)
    CHAR_CONST      reduce using rule 99 (function_signature -> parameter_clause .)
    FLOAT_CONST     reduce using rule 99 (function_signature -> parameter_clause .)
    INT_CONST       reduce using rule 99 (function_signature -> parameter_clause .)
    NIL_LITERAL     reduce using rule 99 (function_signature -> parameter_clause .)
    LBRACK          reduce using rule 99 (function_signature -> parameter_clause .)
    $end            reduce using rule 99 (function_signature -> parameter_clause .)
    RCURLY          reduce using rule 99 (function_signature -> parameter_clause .)
    CASE            reduce using rule 99 (function_signature -> parameter_clause .)
    DEFAULT         reduce using rule 99 (function_signature -> parameter_clause .)
    RETHROWS        shift and go to state 268
    ARROW           shift and go to state 267

    function_result                shift and go to state 266

state 199

    (179) postfix_expression -> postfix_expression LBRACK expression_list . RBRACK

    RBRACK          shift and go to state 270


state 200

    (187) function_call_argument -> operator .
    (222) prefix_operator -> operator .

    COMMA           reduce using rule 187 (function_call_argument -> operator .)
    RPAREN          reduce using rule 187 (function_call_argument -> operator .)
    IDENTIFIER      reduce using rule 222 (prefix_operator -> operator .)
    LPAREN          reduce using rule 222 (prefix_operator -> operator .)
    STRING_LITERAL  reduce using rule 222 (prefix_operator -> operator .)
    CHAR_CONST      reduce using rule 222 (prefix_operator -> operator .)
    FLOAT_CONST     reduce using rule 222 (prefix_operator -> operator .)
    INT_CONST       reduce using rule 222 (prefix_operator -> operator .)
    NIL_LITERAL     reduce using rule 222 (prefix_operator -> operator .)
    LBRACK          reduce using rule 222 (prefix_operator -> operator .)


state 201

    (180) function_call_argument_clause -> LPAREN RPAREN .

    DOT             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    LPAREN          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    LBRACK          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    EQUAL           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    EQUALEQUAL      reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    LTE             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    GTE             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    LT              reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    GT              reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    DIV             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    SUB             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    ADD             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    EXCLAMATION     reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    MUL             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    MOD             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    AND             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    OR              reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    CARET           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    TILDE           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    CONDOP          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    ANDAND          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    OROR            reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    NOT             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    PRINT           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    IMPORT          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    LET             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    STRUCT          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    FOR             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    WHILE           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    REPEAT          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    IF              reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    SWITCH          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    BREAK           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    RETURN          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    VAR             reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    FUNC            reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    PREFIX          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    POSTFIX         reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    INFIX           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    STRING_LITERAL  reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    CHAR_CONST      reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    FLOAT_CONST     reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    INT_CONST       reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    NIL_LITERAL     reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    $end            reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    RCURLY          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    CASE            reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    DEFAULT         reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    COMMA           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    RBRACK          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    LCURLY          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    RPAREN          reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    WHERE           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)
    COLON           reduce using rule 180 (function_call_argument_clause -> LPAREN RPAREN .)


state 202

    (192) argument_name -> label_identifier . COLON
    (186) function_call_argument -> label_identifier . COLON expression
    (188) function_call_argument -> label_identifier . COLON operator

    COLON           shift and go to state 271


state 203

    (221) label_identifier -> IDENTIFIER .
    (220) declaration_identifier -> IDENTIFIER .

    COLON           reduce using rule 221 (label_identifier -> IDENTIFIER .)
    DOT             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LBRACK          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EQUAL           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LTE             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    GTE             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    LT              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    GT              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    DIV             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    SUB             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    ADD             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    EXCLAMATION     reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    MUL             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    MOD             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    AND             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    OR              reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CARET           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    TILDE           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    CONDOP          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    ANDAND          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    OROR            reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    NOT             reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    COMMA           reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 220 (declaration_identifier -> IDENTIFIER .)
    RANGEOP         reduce using rule 220 (declaration_identifier -> IDENTIFIER .)


state 204

    (182) function_call_argument_list -> function_call_argument . COMMAfunction_call_argument_star
    (183) COMMAfunction_call_argument_star -> . COMMA function_call_argument COMMAfunction_call_argument_star
    (184) COMMAfunction_call_argument_star -> .

    COMMA           shift and go to state 272
    RPAREN          reduce using rule 184 (COMMAfunction_call_argument_star -> .)

    COMMAfunction_call_argument_star shift and go to state 273

state 205

    (181) function_call_argument_clause -> LPAREN function_call_argument_list . RPAREN

    RPAREN          shift and go to state 274


state 206

    (232) operator -> AND .
    (151) in_out_expression -> AND . declaration_identifier
    (220) declaration_identifier -> . IDENTIFIER

    COMMA           reduce using rule 232 (operator -> AND .)
    RPAREN          reduce using rule 232 (operator -> AND .)
    IDENTIFIER      reduce using rule 232 (operator -> AND .)
    LPAREN          reduce using rule 232 (operator -> AND .)
    STRING_LITERAL  reduce using rule 232 (operator -> AND .)
    CHAR_CONST      reduce using rule 232 (operator -> AND .)
    FLOAT_CONST     reduce using rule 232 (operator -> AND .)
    INT_CONST       reduce using rule 232 (operator -> AND .)
    NIL_LITERAL     reduce using rule 232 (operator -> AND .)
    LBRACK          reduce using rule 232 (operator -> AND .)

  ! IDENTIFIER      [ shift and go to state 63 ]

    declaration_identifier         shift and go to state 116

state 207

    (189) argument_names -> argument_name . argument_name_star
    (190) argument_name_star -> . argument_name argument_name_star
    (191) argument_name_star -> .
    (192) argument_name -> . label_identifier COLON
    (221) label_identifier -> . IDENTIFIER

    RPAREN          reduce using rule 191 (argument_name_star -> .)
    IDENTIFIER      shift and go to state 263

    label_identifier               shift and go to state 275
    argument_name                  shift and go to state 276
    argument_name_star             shift and go to state 277

state 208

    (177) postfix_expression -> postfix_expression LPAREN argument_names . RPAREN

    RPAREN          shift and go to state 278


state 209

    (185) function_call_argument -> expression .

    COMMA           reduce using rule 185 (function_call_argument -> expression .)
    RPAREN          reduce using rule 185 (function_call_argument -> expression .)


state 210

    (174) postfix_expression -> postfix_expression DOT INT_CONST .

    DOT             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    LPAREN          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    LBRACK          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    EQUAL           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    EQUALEQUAL      reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    NOTEQUAL        reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    LTE             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    GTE             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    LT              reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    GT              reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    DIV             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    SUB             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    ADD             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    EXCLAMATION     reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    MUL             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    MOD             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    AND             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    OR              reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    CARET           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    TILDE           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    CONDOP          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    ANDAND          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    OROR            reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    NOT             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    RPAREN          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    PRINT           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    IMPORT          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    LET             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    STRUCT          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    FOR             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    WHILE           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    REPEAT          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    IF              reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    SWITCH          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    BREAK           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    CONTINUE        reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    RETURN          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    VAR             reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    FUNC            reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    PREFIX          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    POSTFIX         reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    INFIX           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    IDENTIFIER      reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    STRING_LITERAL  reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    CHAR_CONST      reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    FLOAT_CONST     reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    INT_CONST       reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    NIL_LITERAL     reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    $end            reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    RCURLY          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    CASE            reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    DEFAULT         reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    COMMA           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    SEMICOLON       reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    RBRACK          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    LCURLY          reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    WHERE           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)
    COLON           reduce using rule 174 (postfix_expression -> postfix_expression DOT INT_CONST .)


state 211

    (178) postfix_expression -> postfix_expression DOT SELF .

    DOT             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    LPAREN          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    LBRACK          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    EQUAL           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    EQUALEQUAL      reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    NOTEQUAL        reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    LTE             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    GTE             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    LT              reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    GT              reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    DIV             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    SUB             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    ADD             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    EXCLAMATION     reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    MUL             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    MOD             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    AND             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    OR              reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    CARET           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    TILDE           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    CONDOP          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    ANDAND          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    OROR            reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    NOT             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    RPAREN          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    PRINT           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    IMPORT          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    LET             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    STRUCT          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    FOR             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    WHILE           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    REPEAT          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    IF              reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    SWITCH          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    BREAK           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    CONTINUE        reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    RETURN          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    VAR             reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    FUNC            reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    PREFIX          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    POSTFIX         reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    INFIX           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    IDENTIFIER      reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    STRING_LITERAL  reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    CHAR_CONST      reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    FLOAT_CONST     reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    INT_CONST       reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    NIL_LITERAL     reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    $end            reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    RCURLY          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    CASE            reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    DEFAULT         reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    COMMA           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    SEMICOLON       reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    RBRACK          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    LCURLY          reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    WHERE           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)
    COLON           reduce using rule 178 (postfix_expression -> postfix_expression DOT SELF .)


state 212

    (172) postfix_expression -> postfix_expression DOT INIT .
    (173) postfix_expression -> postfix_expression DOT INIT . LPAREN argument_names RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    LBRACK          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    EQUAL           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    EQUALEQUAL      reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    NOTEQUAL        reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    LTE             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    GTE             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    LT              reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    GT              reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    DIV             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    SUB             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    ADD             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    EXCLAMATION     reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    MUL             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    MOD             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    AND             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    OR              reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    CARET           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    TILDE           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    CONDOP          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    ANDAND          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    OROR            reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    NOT             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    RPAREN          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    PRINT           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    IMPORT          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    LET             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    STRUCT          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    FOR             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    WHILE           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    REPEAT          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    IF              reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    SWITCH          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    BREAK           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    CONTINUE        reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    RETURN          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    VAR             reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    FUNC            reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    PREFIX          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    POSTFIX         reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    INFIX           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    IDENTIFIER      reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    STRING_LITERAL  reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    CHAR_CONST      reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    FLOAT_CONST     reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    INT_CONST       reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    NIL_LITERAL     reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    $end            reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    RCURLY          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    CASE            reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    DEFAULT         reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    COMMA           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    SEMICOLON       reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    RBRACK          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    LCURLY          reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    WHERE           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    COLON           reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .)
    LPAREN          shift and go to state 279

  ! LPAREN          [ reduce using rule 172 (postfix_expression -> postfix_expression DOT INIT .) ]


state 213

    (175) postfix_expression -> postfix_expression DOT declaration_identifier .
    (176) postfix_expression -> postfix_expression DOT declaration_identifier . LPAREN argument_names RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    LBRACK          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    EQUAL           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    EQUALEQUAL      reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    NOTEQUAL        reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    LTE             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    GTE             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    LT              reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    GT              reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    DIV             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    SUB             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    ADD             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    EXCLAMATION     reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    MUL             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    MOD             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    AND             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    OR              reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    CARET           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    TILDE           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    CONDOP          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    ANDAND          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    OROR            reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    NOT             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    RPAREN          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    PRINT           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    IMPORT          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    LET             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    STRUCT          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    FOR             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    WHILE           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    REPEAT          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    IF              reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    SWITCH          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    BREAK           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    CONTINUE        reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    RETURN          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    VAR             reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    FUNC            reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    PREFIX          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    POSTFIX         reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    INFIX           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    IDENTIFIER      reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    STRING_LITERAL  reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    CHAR_CONST      reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    FLOAT_CONST     reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    INT_CONST       reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    NIL_LITERAL     reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    $end            reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    RCURLY          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    CASE            reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    DEFAULT         reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    COMMA           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    SEMICOLON       reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    RBRACK          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    LCURLY          reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    WHERE           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    COLON           reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .)
    LPAREN          shift and go to state 280

  ! LPAREN          [ reduce using rule 175 (postfix_expression -> postfix_expression DOT declaration_identifier .) ]


state 214

    (169) parenthesized_expression -> LPAREN expression RPAREN .

    DOT             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    LBRACK          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUALEQUAL      reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    SUB             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    CARET           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    ANDAND          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    OROR            reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    STRUCT          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    PREFIX          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    POSTFIX         reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    INFIX           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    CHAR_CONST      reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    FLOAT_CONST     reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    INT_CONST       reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    NIL_LITERAL     reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    RCURLY          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHERE           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    LCURLY          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 169 (parenthesized_expression -> LPAREN expression RPAREN .)


state 215

    (35) if_statement -> IF condition_list code_block . else_clause
    (36) if_statement -> IF condition_list code_block .
    (37) else_clause -> . ELSE code_block
    (38) else_clause -> . ELSE if_statement

    PRINT           reduce using rule 36 (if_statement -> IF condition_list code_block .)
    IMPORT          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    LET             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    STRUCT          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    FOR             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    WHILE           reduce using rule 36 (if_statement -> IF condition_list code_block .)
    REPEAT          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    IF              reduce using rule 36 (if_statement -> IF condition_list code_block .)
    SWITCH          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    BREAK           reduce using rule 36 (if_statement -> IF condition_list code_block .)
    CONTINUE        reduce using rule 36 (if_statement -> IF condition_list code_block .)
    RETURN          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    AND             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    VAR             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    FUNC            reduce using rule 36 (if_statement -> IF condition_list code_block .)
    PREFIX          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    POSTFIX         reduce using rule 36 (if_statement -> IF condition_list code_block .)
    INFIX           reduce using rule 36 (if_statement -> IF condition_list code_block .)
    DIV             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    EQUAL           reduce using rule 36 (if_statement -> IF condition_list code_block .)
    SUB             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    ADD             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    EXCLAMATION     reduce using rule 36 (if_statement -> IF condition_list code_block .)
    MUL             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    MOD             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    OR              reduce using rule 36 (if_statement -> IF condition_list code_block .)
    LT              reduce using rule 36 (if_statement -> IF condition_list code_block .)
    GT              reduce using rule 36 (if_statement -> IF condition_list code_block .)
    CARET           reduce using rule 36 (if_statement -> IF condition_list code_block .)
    TILDE           reduce using rule 36 (if_statement -> IF condition_list code_block .)
    CONDOP          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    ANDAND          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    OROR            reduce using rule 36 (if_statement -> IF condition_list code_block .)
    NOT             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    DOT             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    EQUALEQUAL      reduce using rule 36 (if_statement -> IF condition_list code_block .)
    NOTEQUAL        reduce using rule 36 (if_statement -> IF condition_list code_block .)
    LTE             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    GTE             reduce using rule 36 (if_statement -> IF condition_list code_block .)
    IDENTIFIER      reduce using rule 36 (if_statement -> IF condition_list code_block .)
    LPAREN          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    STRING_LITERAL  reduce using rule 36 (if_statement -> IF condition_list code_block .)
    CHAR_CONST      reduce using rule 36 (if_statement -> IF condition_list code_block .)
    FLOAT_CONST     reduce using rule 36 (if_statement -> IF condition_list code_block .)
    INT_CONST       reduce using rule 36 (if_statement -> IF condition_list code_block .)
    NIL_LITERAL     reduce using rule 36 (if_statement -> IF condition_list code_block .)
    LBRACK          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    CASE            reduce using rule 36 (if_statement -> IF condition_list code_block .)
    DEFAULT         reduce using rule 36 (if_statement -> IF condition_list code_block .)
    RCURLY          reduce using rule 36 (if_statement -> IF condition_list code_block .)
    $end            reduce using rule 36 (if_statement -> IF condition_list code_block .)
    ELSE            shift and go to state 281

    else_clause                    shift and go to state 282

state 216

    (120) struct_declaration -> STRUCT struct_name struct_body .

    IMPORT          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    LET             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    STRUCT          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    VAR             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    FUNC            reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    PREFIX          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    POSTFIX         reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    INFIX           reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    RCURLY          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    PRINT           reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    FOR             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    WHILE           reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    REPEAT          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    IF              reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    SWITCH          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    BREAK           reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    CONTINUE        reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    RETURN          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    AND             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    DIV             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    EQUAL           reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    SUB             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    ADD             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    EXCLAMATION     reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    MUL             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    MOD             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    OR              reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    LT              reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    GT              reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    CARET           reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    TILDE           reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    CONDOP          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    ANDAND          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    OROR            reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    NOT             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    DOT             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    EQUALEQUAL      reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    NOTEQUAL        reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    LTE             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    GTE             reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    IDENTIFIER      reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    LPAREN          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    STRING_LITERAL  reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    CHAR_CONST      reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    FLOAT_CONST     reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    INT_CONST       reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    NIL_LITERAL     reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    LBRACK          reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    CASE            reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    DEFAULT         reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)
    $end            reduce using rule 120 (struct_declaration -> STRUCT struct_name struct_body .)


state 217

    (122) struct_body -> LCURLY . struct_member_star RCURLY
    (123) struct_member_star -> . struct_member struct_member_star
    (124) struct_member_star -> .
    (125) struct_member -> . declaration
    (60) declaration -> . import_declaration
    (61) declaration -> . constant_declaration
    (62) declaration -> . variable_declaration
    (63) declaration -> . function_declaration
    (64) declaration -> . struct_declaration
    (65) declaration -> . operator_declaration
    (70) import_declaration -> . IMPORT import_kind import_path
    (71) import_declaration -> . IMPORT import_path
    (81) constant_declaration -> . LET pattern_initializer_list
    (88) variable_declaration -> . variable_declaration_head variable_name type_annotation code_block
    (89) variable_declaration -> . variable_declaration_head variable_name type_annotation initializer
    (90) variable_declaration -> . variable_declaration_head pattern_initializer_list
    (93) function_declaration -> . function_head function_name function_signature function_body
    (94) function_declaration -> . function_head function_name function_signature
    (120) struct_declaration -> . STRUCT struct_name struct_body
    (126) operator_declaration -> . prefix_operator_declaration
    (127) operator_declaration -> . postfix_operator_declaration
    (128) operator_declaration -> . infix_operator_declaration
    (91) variable_declaration_head -> . VAR
    (95) function_head -> . FUNC
    (129) prefix_operator_declaration -> . PREFIX OPERATOR operator
    (130) postfix_operator_declaration -> . POSTFIX OPERATOR operator
    (131) infix_operator_declaration -> . INFIX OPERATOR operator

    RCURLY          reduce using rule 124 (struct_member_star -> .)
    IMPORT          shift and go to state 8
    LET             shift and go to state 68
    STRUCT          shift and go to state 86
    VAR             shift and go to state 12
    FUNC            shift and go to state 26
    PREFIX          shift and go to state 71
    POSTFIX         shift and go to state 4
    INFIX           shift and go to state 34

    struct_member                  shift and go to state 283
    variable_declaration_head      shift and go to state 19
    variable_declaration           shift and go to state 45
    function_head                  shift and go to state 75
    constant_declaration           shift and go to state 80
    postfix_operator_declaration   shift and go to state 54
    struct_declaration             shift and go to state 11
    prefix_operator_declaration    shift and go to state 55
    declaration                    shift and go to state 284
    import_declaration             shift and go to state 5
    operator_declaration           shift and go to state 60
    function_declaration           shift and go to state 29
    infix_operator_declaration     shift and go to state 13
    struct_member_star             shift and go to state 285

state 218

    (77) dot_import_path_identifier -> DOT import_path_identifier . dot_import_path_identifier
    (77) dot_import_path_identifier -> . DOT import_path_identifier dot_import_path_identifier
    (78) dot_import_path_identifier -> .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 158
    PRINT           reduce using rule 78 (dot_import_path_identifier -> .)
    IMPORT          reduce using rule 78 (dot_import_path_identifier -> .)
    LET             reduce using rule 78 (dot_import_path_identifier -> .)
    STRUCT          reduce using rule 78 (dot_import_path_identifier -> .)
    FOR             reduce using rule 78 (dot_import_path_identifier -> .)
    WHILE           reduce using rule 78 (dot_import_path_identifier -> .)
    REPEAT          reduce using rule 78 (dot_import_path_identifier -> .)
    IF              reduce using rule 78 (dot_import_path_identifier -> .)
    SWITCH          reduce using rule 78 (dot_import_path_identifier -> .)
    BREAK           reduce using rule 78 (dot_import_path_identifier -> .)
    CONTINUE        reduce using rule 78 (dot_import_path_identifier -> .)
    RETURN          reduce using rule 78 (dot_import_path_identifier -> .)
    AND             reduce using rule 78 (dot_import_path_identifier -> .)
    VAR             reduce using rule 78 (dot_import_path_identifier -> .)
    FUNC            reduce using rule 78 (dot_import_path_identifier -> .)
    PREFIX          reduce using rule 78 (dot_import_path_identifier -> .)
    POSTFIX         reduce using rule 78 (dot_import_path_identifier -> .)
    INFIX           reduce using rule 78 (dot_import_path_identifier -> .)
    DIV             reduce using rule 78 (dot_import_path_identifier -> .)
    EQUAL           reduce using rule 78 (dot_import_path_identifier -> .)
    SUB             reduce using rule 78 (dot_import_path_identifier -> .)
    ADD             reduce using rule 78 (dot_import_path_identifier -> .)
    EXCLAMATION     reduce using rule 78 (dot_import_path_identifier -> .)
    MUL             reduce using rule 78 (dot_import_path_identifier -> .)
    MOD             reduce using rule 78 (dot_import_path_identifier -> .)
    OR              reduce using rule 78 (dot_import_path_identifier -> .)
    LT              reduce using rule 78 (dot_import_path_identifier -> .)
    GT              reduce using rule 78 (dot_import_path_identifier -> .)
    CARET           reduce using rule 78 (dot_import_path_identifier -> .)
    TILDE           reduce using rule 78 (dot_import_path_identifier -> .)
    CONDOP          reduce using rule 78 (dot_import_path_identifier -> .)
    ANDAND          reduce using rule 78 (dot_import_path_identifier -> .)
    OROR            reduce using rule 78 (dot_import_path_identifier -> .)
    NOT             reduce using rule 78 (dot_import_path_identifier -> .)
    EQUALEQUAL      reduce using rule 78 (dot_import_path_identifier -> .)
    NOTEQUAL        reduce using rule 78 (dot_import_path_identifier -> .)
    LTE             reduce using rule 78 (dot_import_path_identifier -> .)
    GTE             reduce using rule 78 (dot_import_path_identifier -> .)
    IDENTIFIER      reduce using rule 78 (dot_import_path_identifier -> .)
    LPAREN          reduce using rule 78 (dot_import_path_identifier -> .)
    STRING_LITERAL  reduce using rule 78 (dot_import_path_identifier -> .)
    CHAR_CONST      reduce using rule 78 (dot_import_path_identifier -> .)
    FLOAT_CONST     reduce using rule 78 (dot_import_path_identifier -> .)
    INT_CONST       reduce using rule 78 (dot_import_path_identifier -> .)
    NIL_LITERAL     reduce using rule 78 (dot_import_path_identifier -> .)
    LBRACK          reduce using rule 78 (dot_import_path_identifier -> .)
    $end            reduce using rule 78 (dot_import_path_identifier -> .)
    RCURLY          reduce using rule 78 (dot_import_path_identifier -> .)
    CASE            reduce using rule 78 (dot_import_path_identifier -> .)
    DEFAULT         reduce using rule 78 (dot_import_path_identifier -> .)

  ! DOT             [ reduce using rule 78 (dot_import_path_identifier -> .) ]

    dot_import_path_identifier     shift and go to state 286

state 219

    (87) initializer -> EQUAL expression .

    COMMA           reduce using rule 87 (initializer -> EQUAL expression .)
    PRINT           reduce using rule 87 (initializer -> EQUAL expression .)
    IMPORT          reduce using rule 87 (initializer -> EQUAL expression .)
    LET             reduce using rule 87 (initializer -> EQUAL expression .)
    STRUCT          reduce using rule 87 (initializer -> EQUAL expression .)
    FOR             reduce using rule 87 (initializer -> EQUAL expression .)
    WHILE           reduce using rule 87 (initializer -> EQUAL expression .)
    REPEAT          reduce using rule 87 (initializer -> EQUAL expression .)
    IF              reduce using rule 87 (initializer -> EQUAL expression .)
    SWITCH          reduce using rule 87 (initializer -> EQUAL expression .)
    BREAK           reduce using rule 87 (initializer -> EQUAL expression .)
    CONTINUE        reduce using rule 87 (initializer -> EQUAL expression .)
    RETURN          reduce using rule 87 (initializer -> EQUAL expression .)
    AND             reduce using rule 87 (initializer -> EQUAL expression .)
    VAR             reduce using rule 87 (initializer -> EQUAL expression .)
    FUNC            reduce using rule 87 (initializer -> EQUAL expression .)
    PREFIX          reduce using rule 87 (initializer -> EQUAL expression .)
    POSTFIX         reduce using rule 87 (initializer -> EQUAL expression .)
    INFIX           reduce using rule 87 (initializer -> EQUAL expression .)
    DIV             reduce using rule 87 (initializer -> EQUAL expression .)
    EQUAL           reduce using rule 87 (initializer -> EQUAL expression .)
    SUB             reduce using rule 87 (initializer -> EQUAL expression .)
    ADD             reduce using rule 87 (initializer -> EQUAL expression .)
    EXCLAMATION     reduce using rule 87 (initializer -> EQUAL expression .)
    MUL             reduce using rule 87 (initializer -> EQUAL expression .)
    MOD             reduce using rule 87 (initializer -> EQUAL expression .)
    OR              reduce using rule 87 (initializer -> EQUAL expression .)
    LT              reduce using rule 87 (initializer -> EQUAL expression .)
    GT              reduce using rule 87 (initializer -> EQUAL expression .)
    CARET           reduce using rule 87 (initializer -> EQUAL expression .)
    TILDE           reduce using rule 87 (initializer -> EQUAL expression .)
    CONDOP          reduce using rule 87 (initializer -> EQUAL expression .)
    ANDAND          reduce using rule 87 (initializer -> EQUAL expression .)
    OROR            reduce using rule 87 (initializer -> EQUAL expression .)
    NOT             reduce using rule 87 (initializer -> EQUAL expression .)
    DOT             reduce using rule 87 (initializer -> EQUAL expression .)
    EQUALEQUAL      reduce using rule 87 (initializer -> EQUAL expression .)
    NOTEQUAL        reduce using rule 87 (initializer -> EQUAL expression .)
    LTE             reduce using rule 87 (initializer -> EQUAL expression .)
    GTE             reduce using rule 87 (initializer -> EQUAL expression .)
    IDENTIFIER      reduce using rule 87 (initializer -> EQUAL expression .)
    LPAREN          reduce using rule 87 (initializer -> EQUAL expression .)
    STRING_LITERAL  reduce using rule 87 (initializer -> EQUAL expression .)
    CHAR_CONST      reduce using rule 87 (initializer -> EQUAL expression .)
    FLOAT_CONST     reduce using rule 87 (initializer -> EQUAL expression .)
    INT_CONST       reduce using rule 87 (initializer -> EQUAL expression .)
    NIL_LITERAL     reduce using rule 87 (initializer -> EQUAL expression .)
    LBRACK          reduce using rule 87 (initializer -> EQUAL expression .)
    $end            reduce using rule 87 (initializer -> EQUAL expression .)
    RCURLY          reduce using rule 87 (initializer -> EQUAL expression .)
    CASE            reduce using rule 87 (initializer -> EQUAL expression .)
    DEFAULT         reduce using rule 87 (initializer -> EQUAL expression .)
    SEMICOLON       reduce using rule 87 (initializer -> EQUAL expression .)
    LCURLY          reduce using rule 87 (initializer -> EQUAL expression .)


state 220

    (88) variable_declaration -> variable_declaration_head variable_name type_annotation code_block .

    PRINT           reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    IMPORT          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    LET             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    STRUCT          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    FOR             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    WHILE           reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    REPEAT          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    IF              reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    SWITCH          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    BREAK           reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    CONTINUE        reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    RETURN          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    AND             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    VAR             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    FUNC            reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    PREFIX          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    POSTFIX         reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    INFIX           reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    DIV             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    EQUAL           reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    SUB             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    ADD             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    EXCLAMATION     reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    MUL             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    MOD             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    OR              reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    LT              reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    GT              reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    CARET           reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    TILDE           reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    CONDOP          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    ANDAND          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    OROR            reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    NOT             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    DOT             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    EQUALEQUAL      reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    NOTEQUAL        reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    LTE             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    GTE             reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    IDENTIFIER      reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    LPAREN          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    STRING_LITERAL  reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    CHAR_CONST      reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    FLOAT_CONST     reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    INT_CONST       reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    NIL_LITERAL     reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    LBRACK          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    $end            reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    RCURLY          reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    CASE            reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    DEFAULT         reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)
    SEMICOLON       reduce using rule 88 (variable_declaration -> variable_declaration_head variable_name type_annotation code_block .)


state 221

    (89) variable_declaration -> variable_declaration_head variable_name type_annotation initializer .

    PRINT           reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    IMPORT          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    LET             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    STRUCT          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    FOR             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    WHILE           reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    REPEAT          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    IF              reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    SWITCH          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    BREAK           reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    CONTINUE        reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    RETURN          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    AND             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    VAR             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    FUNC            reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    PREFIX          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    POSTFIX         reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    INFIX           reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    DIV             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    EQUAL           reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    SUB             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    ADD             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    EXCLAMATION     reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    MUL             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    MOD             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    OR              reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    LT              reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    GT              reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    CARET           reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    TILDE           reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    CONDOP          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    ANDAND          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    OROR            reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    NOT             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    DOT             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    EQUALEQUAL      reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    NOTEQUAL        reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    LTE             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    GTE             reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    IDENTIFIER      reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    LPAREN          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    STRING_LITERAL  reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    CHAR_CONST      reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    FLOAT_CONST     reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    INT_CONST       reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    NIL_LITERAL     reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    LBRACK          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    $end            reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    RCURLY          reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    CASE            reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    DEFAULT         reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)
    SEMICOLON       reduce using rule 89 (variable_declaration -> variable_declaration_head variable_name type_annotation initializer .)


state 222

    (195) type -> type_identifier .

    RBRACK          reduce using rule 195 (type -> type_identifier .)
    COMMA           reduce using rule 195 (type -> type_identifier .)
    RANGEOP         reduce using rule 195 (type -> type_identifier .)
    RPAREN          reduce using rule 195 (type -> type_identifier .)
    LCURLY          reduce using rule 195 (type -> type_identifier .)
    EQUAL           reduce using rule 195 (type -> type_identifier .)
    PRINT           reduce using rule 195 (type -> type_identifier .)
    IMPORT          reduce using rule 195 (type -> type_identifier .)
    LET             reduce using rule 195 (type -> type_identifier .)
    STRUCT          reduce using rule 195 (type -> type_identifier .)
    FOR             reduce using rule 195 (type -> type_identifier .)
    WHILE           reduce using rule 195 (type -> type_identifier .)
    REPEAT          reduce using rule 195 (type -> type_identifier .)
    IF              reduce using rule 195 (type -> type_identifier .)
    SWITCH          reduce using rule 195 (type -> type_identifier .)
    BREAK           reduce using rule 195 (type -> type_identifier .)
    CONTINUE        reduce using rule 195 (type -> type_identifier .)
    RETURN          reduce using rule 195 (type -> type_identifier .)
    AND             reduce using rule 195 (type -> type_identifier .)
    VAR             reduce using rule 195 (type -> type_identifier .)
    FUNC            reduce using rule 195 (type -> type_identifier .)
    PREFIX          reduce using rule 195 (type -> type_identifier .)
    POSTFIX         reduce using rule 195 (type -> type_identifier .)
    INFIX           reduce using rule 195 (type -> type_identifier .)
    DIV             reduce using rule 195 (type -> type_identifier .)
    SUB             reduce using rule 195 (type -> type_identifier .)
    ADD             reduce using rule 195 (type -> type_identifier .)
    EXCLAMATION     reduce using rule 195 (type -> type_identifier .)
    MUL             reduce using rule 195 (type -> type_identifier .)
    MOD             reduce using rule 195 (type -> type_identifier .)
    OR              reduce using rule 195 (type -> type_identifier .)
    LT              reduce using rule 195 (type -> type_identifier .)
    GT              reduce using rule 195 (type -> type_identifier .)
    CARET           reduce using rule 195 (type -> type_identifier .)
    TILDE           reduce using rule 195 (type -> type_identifier .)
    CONDOP          reduce using rule 195 (type -> type_identifier .)
    ANDAND          reduce using rule 195 (type -> type_identifier .)
    OROR            reduce using rule 195 (type -> type_identifier .)
    NOT             reduce using rule 195 (type -> type_identifier .)
    DOT             reduce using rule 195 (type -> type_identifier .)
    EQUALEQUAL      reduce using rule 195 (type -> type_identifier .)
    NOTEQUAL        reduce using rule 195 (type -> type_identifier .)
    LTE             reduce using rule 195 (type -> type_identifier .)
    GTE             reduce using rule 195 (type -> type_identifier .)
    IDENTIFIER      reduce using rule 195 (type -> type_identifier .)
    LPAREN          reduce using rule 195 (type -> type_identifier .)
    STRING_LITERAL  reduce using rule 195 (type -> type_identifier .)
    CHAR_CONST      reduce using rule 195 (type -> type_identifier .)
    FLOAT_CONST     reduce using rule 195 (type -> type_identifier .)
    INT_CONST       reduce using rule 195 (type -> type_identifier .)
    NIL_LITERAL     reduce using rule 195 (type -> type_identifier .)
    LBRACK          reduce using rule 195 (type -> type_identifier .)
    $end            reduce using rule 195 (type -> type_identifier .)
    RCURLY          reduce using rule 195 (type -> type_identifier .)
    CASE            reduce using rule 195 (type -> type_identifier .)
    DEFAULT         reduce using rule 195 (type -> type_identifier .)
    SEMICOLON       reduce using rule 195 (type -> type_identifier .)
    WHERE           reduce using rule 195 (type -> type_identifier .)
    COLON           reduce using rule 195 (type -> type_identifier .)


state 223

    (194) type -> function_type .

    RBRACK          reduce using rule 194 (type -> function_type .)
    COMMA           reduce using rule 194 (type -> function_type .)
    RANGEOP         reduce using rule 194 (type -> function_type .)
    RPAREN          reduce using rule 194 (type -> function_type .)
    LCURLY          reduce using rule 194 (type -> function_type .)
    EQUAL           reduce using rule 194 (type -> function_type .)
    PRINT           reduce using rule 194 (type -> function_type .)
    IMPORT          reduce using rule 194 (type -> function_type .)
    LET             reduce using rule 194 (type -> function_type .)
    STRUCT          reduce using rule 194 (type -> function_type .)
    FOR             reduce using rule 194 (type -> function_type .)
    WHILE           reduce using rule 194 (type -> function_type .)
    REPEAT          reduce using rule 194 (type -> function_type .)
    IF              reduce using rule 194 (type -> function_type .)
    SWITCH          reduce using rule 194 (type -> function_type .)
    BREAK           reduce using rule 194 (type -> function_type .)
    CONTINUE        reduce using rule 194 (type -> function_type .)
    RETURN          reduce using rule 194 (type -> function_type .)
    AND             reduce using rule 194 (type -> function_type .)
    VAR             reduce using rule 194 (type -> function_type .)
    FUNC            reduce using rule 194 (type -> function_type .)
    PREFIX          reduce using rule 194 (type -> function_type .)
    POSTFIX         reduce using rule 194 (type -> function_type .)
    INFIX           reduce using rule 194 (type -> function_type .)
    DIV             reduce using rule 194 (type -> function_type .)
    SUB             reduce using rule 194 (type -> function_type .)
    ADD             reduce using rule 194 (type -> function_type .)
    EXCLAMATION     reduce using rule 194 (type -> function_type .)
    MUL             reduce using rule 194 (type -> function_type .)
    MOD             reduce using rule 194 (type -> function_type .)
    OR              reduce using rule 194 (type -> function_type .)
    LT              reduce using rule 194 (type -> function_type .)
    GT              reduce using rule 194 (type -> function_type .)
    CARET           reduce using rule 194 (type -> function_type .)
    TILDE           reduce using rule 194 (type -> function_type .)
    CONDOP          reduce using rule 194 (type -> function_type .)
    ANDAND          reduce using rule 194 (type -> function_type .)
    OROR            reduce using rule 194 (type -> function_type .)
    NOT             reduce using rule 194 (type -> function_type .)
    DOT             reduce using rule 194 (type -> function_type .)
    EQUALEQUAL      reduce using rule 194 (type -> function_type .)
    NOTEQUAL        reduce using rule 194 (type -> function_type .)
    LTE             reduce using rule 194 (type -> function_type .)
    GTE             reduce using rule 194 (type -> function_type .)
    IDENTIFIER      reduce using rule 194 (type -> function_type .)
    LPAREN          reduce using rule 194 (type -> function_type .)
    STRING_LITERAL  reduce using rule 194 (type -> function_type .)
    CHAR_CONST      reduce using rule 194 (type -> function_type .)
    FLOAT_CONST     reduce using rule 194 (type -> function_type .)
    INT_CONST       reduce using rule 194 (type -> function_type .)
    NIL_LITERAL     reduce using rule 194 (type -> function_type .)
    LBRACK          reduce using rule 194 (type -> function_type .)
    $end            reduce using rule 194 (type -> function_type .)
    RCURLY          reduce using rule 194 (type -> function_type .)
    CASE            reduce using rule 194 (type -> function_type .)
    DEFAULT         reduce using rule 194 (type -> function_type .)
    SEMICOLON       reduce using rule 194 (type -> function_type .)
    WHERE           reduce using rule 194 (type -> function_type .)
    COLON           reduce using rule 194 (type -> function_type .)


state 224

    (201) type_name -> type_keyword .

    DOT             reduce using rule 201 (type_name -> type_keyword .)
    LCURLY          reduce using rule 201 (type_name -> type_keyword .)
    EQUAL           reduce using rule 201 (type_name -> type_keyword .)
    COMMA           reduce using rule 201 (type_name -> type_keyword .)
    PRINT           reduce using rule 201 (type_name -> type_keyword .)
    IMPORT          reduce using rule 201 (type_name -> type_keyword .)
    LET             reduce using rule 201 (type_name -> type_keyword .)
    STRUCT          reduce using rule 201 (type_name -> type_keyword .)
    FOR             reduce using rule 201 (type_name -> type_keyword .)
    WHILE           reduce using rule 201 (type_name -> type_keyword .)
    REPEAT          reduce using rule 201 (type_name -> type_keyword .)
    IF              reduce using rule 201 (type_name -> type_keyword .)
    SWITCH          reduce using rule 201 (type_name -> type_keyword .)
    BREAK           reduce using rule 201 (type_name -> type_keyword .)
    CONTINUE        reduce using rule 201 (type_name -> type_keyword .)
    RETURN          reduce using rule 201 (type_name -> type_keyword .)
    AND             reduce using rule 201 (type_name -> type_keyword .)
    VAR             reduce using rule 201 (type_name -> type_keyword .)
    FUNC            reduce using rule 201 (type_name -> type_keyword .)
    PREFIX          reduce using rule 201 (type_name -> type_keyword .)
    POSTFIX         reduce using rule 201 (type_name -> type_keyword .)
    INFIX           reduce using rule 201 (type_name -> type_keyword .)
    DIV             reduce using rule 201 (type_name -> type_keyword .)
    SUB             reduce using rule 201 (type_name -> type_keyword .)
    ADD             reduce using rule 201 (type_name -> type_keyword .)
    EXCLAMATION     reduce using rule 201 (type_name -> type_keyword .)
    MUL             reduce using rule 201 (type_name -> type_keyword .)
    MOD             reduce using rule 201 (type_name -> type_keyword .)
    OR              reduce using rule 201 (type_name -> type_keyword .)
    LT              reduce using rule 201 (type_name -> type_keyword .)
    GT              reduce using rule 201 (type_name -> type_keyword .)
    CARET           reduce using rule 201 (type_name -> type_keyword .)
    TILDE           reduce using rule 201 (type_name -> type_keyword .)
    CONDOP          reduce using rule 201 (type_name -> type_keyword .)
    ANDAND          reduce using rule 201 (type_name -> type_keyword .)
    OROR            reduce using rule 201 (type_name -> type_keyword .)
    NOT             reduce using rule 201 (type_name -> type_keyword .)
    EQUALEQUAL      reduce using rule 201 (type_name -> type_keyword .)
    NOTEQUAL        reduce using rule 201 (type_name -> type_keyword .)
    LTE             reduce using rule 201 (type_name -> type_keyword .)
    GTE             reduce using rule 201 (type_name -> type_keyword .)
    IDENTIFIER      reduce using rule 201 (type_name -> type_keyword .)
    LPAREN          reduce using rule 201 (type_name -> type_keyword .)
    STRING_LITERAL  reduce using rule 201 (type_name -> type_keyword .)
    CHAR_CONST      reduce using rule 201 (type_name -> type_keyword .)
    FLOAT_CONST     reduce using rule 201 (type_name -> type_keyword .)
    INT_CONST       reduce using rule 201 (type_name -> type_keyword .)
    NIL_LITERAL     reduce using rule 201 (type_name -> type_keyword .)
    LBRACK          reduce using rule 201 (type_name -> type_keyword .)
    $end            reduce using rule 201 (type_name -> type_keyword .)
    RCURLY          reduce using rule 201 (type_name -> type_keyword .)
    CASE            reduce using rule 201 (type_name -> type_keyword .)
    DEFAULT         reduce using rule 201 (type_name -> type_keyword .)
    SEMICOLON       reduce using rule 201 (type_name -> type_keyword .)
    WHERE           reduce using rule 201 (type_name -> type_keyword .)
    COLON           reduce using rule 201 (type_name -> type_keyword .)
    RANGEOP         reduce using rule 201 (type_name -> type_keyword .)
    RPAREN          reduce using rule 201 (type_name -> type_keyword .)
    RBRACK          reduce using rule 201 (type_name -> type_keyword .)


state 225

    (198) type_identifier -> type_name . DOT type_identifier
    (199) type_identifier -> type_name .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 287
    LCURLY          reduce using rule 199 (type_identifier -> type_name .)
    EQUAL           reduce using rule 199 (type_identifier -> type_name .)
    COMMA           reduce using rule 199 (type_identifier -> type_name .)
    PRINT           reduce using rule 199 (type_identifier -> type_name .)
    IMPORT          reduce using rule 199 (type_identifier -> type_name .)
    LET             reduce using rule 199 (type_identifier -> type_name .)
    STRUCT          reduce using rule 199 (type_identifier -> type_name .)
    FOR             reduce using rule 199 (type_identifier -> type_name .)
    WHILE           reduce using rule 199 (type_identifier -> type_name .)
    REPEAT          reduce using rule 199 (type_identifier -> type_name .)
    IF              reduce using rule 199 (type_identifier -> type_name .)
    SWITCH          reduce using rule 199 (type_identifier -> type_name .)
    BREAK           reduce using rule 199 (type_identifier -> type_name .)
    CONTINUE        reduce using rule 199 (type_identifier -> type_name .)
    RETURN          reduce using rule 199 (type_identifier -> type_name .)
    AND             reduce using rule 199 (type_identifier -> type_name .)
    VAR             reduce using rule 199 (type_identifier -> type_name .)
    FUNC            reduce using rule 199 (type_identifier -> type_name .)
    PREFIX          reduce using rule 199 (type_identifier -> type_name .)
    POSTFIX         reduce using rule 199 (type_identifier -> type_name .)
    INFIX           reduce using rule 199 (type_identifier -> type_name .)
    DIV             reduce using rule 199 (type_identifier -> type_name .)
    SUB             reduce using rule 199 (type_identifier -> type_name .)
    ADD             reduce using rule 199 (type_identifier -> type_name .)
    EXCLAMATION     reduce using rule 199 (type_identifier -> type_name .)
    MUL             reduce using rule 199 (type_identifier -> type_name .)
    MOD             reduce using rule 199 (type_identifier -> type_name .)
    OR              reduce using rule 199 (type_identifier -> type_name .)
    LT              reduce using rule 199 (type_identifier -> type_name .)
    GT              reduce using rule 199 (type_identifier -> type_name .)
    CARET           reduce using rule 199 (type_identifier -> type_name .)
    TILDE           reduce using rule 199 (type_identifier -> type_name .)
    CONDOP          reduce using rule 199 (type_identifier -> type_name .)
    ANDAND          reduce using rule 199 (type_identifier -> type_name .)
    OROR            reduce using rule 199 (type_identifier -> type_name .)
    NOT             reduce using rule 199 (type_identifier -> type_name .)
    EQUALEQUAL      reduce using rule 199 (type_identifier -> type_name .)
    NOTEQUAL        reduce using rule 199 (type_identifier -> type_name .)
    LTE             reduce using rule 199 (type_identifier -> type_name .)
    GTE             reduce using rule 199 (type_identifier -> type_name .)
    IDENTIFIER      reduce using rule 199 (type_identifier -> type_name .)
    LPAREN          reduce using rule 199 (type_identifier -> type_name .)
    STRING_LITERAL  reduce using rule 199 (type_identifier -> type_name .)
    CHAR_CONST      reduce using rule 199 (type_identifier -> type_name .)
    FLOAT_CONST     reduce using rule 199 (type_identifier -> type_name .)
    INT_CONST       reduce using rule 199 (type_identifier -> type_name .)
    NIL_LITERAL     reduce using rule 199 (type_identifier -> type_name .)
    LBRACK          reduce using rule 199 (type_identifier -> type_name .)
    $end            reduce using rule 199 (type_identifier -> type_name .)
    RCURLY          reduce using rule 199 (type_identifier -> type_name .)
    CASE            reduce using rule 199 (type_identifier -> type_name .)
    DEFAULT         reduce using rule 199 (type_identifier -> type_name .)
    SEMICOLON       reduce using rule 199 (type_identifier -> type_name .)
    WHERE           reduce using rule 199 (type_identifier -> type_name .)
    COLON           reduce using rule 199 (type_identifier -> type_name .)
    RANGEOP         reduce using rule 199 (type_identifier -> type_name .)
    RPAREN          reduce using rule 199 (type_identifier -> type_name .)
    RBRACK          reduce using rule 199 (type_identifier -> type_name .)

  ! DOT             [ reduce using rule 199 (type_identifier -> type_name .) ]


state 226

    (196) type_annotation -> COLON INOUT . type
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    LBRACK          shift and go to state 236
    LPAREN          shift and go to state 231
    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    declaration_identifier         shift and go to state 227
    function_type                  shift and go to state 223
    array_type                     shift and go to state 232
    type                           shift and go to state 288

state 227

    (200) type_name -> declaration_identifier .

    DOT             reduce using rule 200 (type_name -> declaration_identifier .)
    LCURLY          reduce using rule 200 (type_name -> declaration_identifier .)
    EQUAL           reduce using rule 200 (type_name -> declaration_identifier .)
    COMMA           reduce using rule 200 (type_name -> declaration_identifier .)
    PRINT           reduce using rule 200 (type_name -> declaration_identifier .)
    IMPORT          reduce using rule 200 (type_name -> declaration_identifier .)
    LET             reduce using rule 200 (type_name -> declaration_identifier .)
    STRUCT          reduce using rule 200 (type_name -> declaration_identifier .)
    FOR             reduce using rule 200 (type_name -> declaration_identifier .)
    WHILE           reduce using rule 200 (type_name -> declaration_identifier .)
    REPEAT          reduce using rule 200 (type_name -> declaration_identifier .)
    IF              reduce using rule 200 (type_name -> declaration_identifier .)
    SWITCH          reduce using rule 200 (type_name -> declaration_identifier .)
    BREAK           reduce using rule 200 (type_name -> declaration_identifier .)
    CONTINUE        reduce using rule 200 (type_name -> declaration_identifier .)
    RETURN          reduce using rule 200 (type_name -> declaration_identifier .)
    AND             reduce using rule 200 (type_name -> declaration_identifier .)
    VAR             reduce using rule 200 (type_name -> declaration_identifier .)
    FUNC            reduce using rule 200 (type_name -> declaration_identifier .)
    PREFIX          reduce using rule 200 (type_name -> declaration_identifier .)
    POSTFIX         reduce using rule 200 (type_name -> declaration_identifier .)
    INFIX           reduce using rule 200 (type_name -> declaration_identifier .)
    DIV             reduce using rule 200 (type_name -> declaration_identifier .)
    SUB             reduce using rule 200 (type_name -> declaration_identifier .)
    ADD             reduce using rule 200 (type_name -> declaration_identifier .)
    EXCLAMATION     reduce using rule 200 (type_name -> declaration_identifier .)
    MUL             reduce using rule 200 (type_name -> declaration_identifier .)
    MOD             reduce using rule 200 (type_name -> declaration_identifier .)
    OR              reduce using rule 200 (type_name -> declaration_identifier .)
    LT              reduce using rule 200 (type_name -> declaration_identifier .)
    GT              reduce using rule 200 (type_name -> declaration_identifier .)
    CARET           reduce using rule 200 (type_name -> declaration_identifier .)
    TILDE           reduce using rule 200 (type_name -> declaration_identifier .)
    CONDOP          reduce using rule 200 (type_name -> declaration_identifier .)
    ANDAND          reduce using rule 200 (type_name -> declaration_identifier .)
    OROR            reduce using rule 200 (type_name -> declaration_identifier .)
    NOT             reduce using rule 200 (type_name -> declaration_identifier .)
    EQUALEQUAL      reduce using rule 200 (type_name -> declaration_identifier .)
    NOTEQUAL        reduce using rule 200 (type_name -> declaration_identifier .)
    LTE             reduce using rule 200 (type_name -> declaration_identifier .)
    GTE             reduce using rule 200 (type_name -> declaration_identifier .)
    IDENTIFIER      reduce using rule 200 (type_name -> declaration_identifier .)
    LPAREN          reduce using rule 200 (type_name -> declaration_identifier .)
    STRING_LITERAL  reduce using rule 200 (type_name -> declaration_identifier .)
    CHAR_CONST      reduce using rule 200 (type_name -> declaration_identifier .)
    FLOAT_CONST     reduce using rule 200 (type_name -> declaration_identifier .)
    INT_CONST       reduce using rule 200 (type_name -> declaration_identifier .)
    NIL_LITERAL     reduce using rule 200 (type_name -> declaration_identifier .)
    LBRACK          reduce using rule 200 (type_name -> declaration_identifier .)
    $end            reduce using rule 200 (type_name -> declaration_identifier .)
    RCURLY          reduce using rule 200 (type_name -> declaration_identifier .)
    CASE            reduce using rule 200 (type_name -> declaration_identifier .)
    DEFAULT         reduce using rule 200 (type_name -> declaration_identifier .)
    SEMICOLON       reduce using rule 200 (type_name -> declaration_identifier .)
    WHERE           reduce using rule 200 (type_name -> declaration_identifier .)
    COLON           reduce using rule 200 (type_name -> declaration_identifier .)
    RANGEOP         reduce using rule 200 (type_name -> declaration_identifier .)
    RPAREN          reduce using rule 200 (type_name -> declaration_identifier .)
    RBRACK          reduce using rule 200 (type_name -> declaration_identifier .)


state 228

    (197) type_annotation -> COLON type .

    RANGEOP         reduce using rule 197 (type_annotation -> COLON type .)
    EQUAL           reduce using rule 197 (type_annotation -> COLON type .)
    COMMA           reduce using rule 197 (type_annotation -> COLON type .)
    RPAREN          reduce using rule 197 (type_annotation -> COLON type .)
    LCURLY          reduce using rule 197 (type_annotation -> COLON type .)
    PRINT           reduce using rule 197 (type_annotation -> COLON type .)
    IMPORT          reduce using rule 197 (type_annotation -> COLON type .)
    LET             reduce using rule 197 (type_annotation -> COLON type .)
    STRUCT          reduce using rule 197 (type_annotation -> COLON type .)
    FOR             reduce using rule 197 (type_annotation -> COLON type .)
    WHILE           reduce using rule 197 (type_annotation -> COLON type .)
    REPEAT          reduce using rule 197 (type_annotation -> COLON type .)
    IF              reduce using rule 197 (type_annotation -> COLON type .)
    SWITCH          reduce using rule 197 (type_annotation -> COLON type .)
    BREAK           reduce using rule 197 (type_annotation -> COLON type .)
    CONTINUE        reduce using rule 197 (type_annotation -> COLON type .)
    RETURN          reduce using rule 197 (type_annotation -> COLON type .)
    AND             reduce using rule 197 (type_annotation -> COLON type .)
    VAR             reduce using rule 197 (type_annotation -> COLON type .)
    FUNC            reduce using rule 197 (type_annotation -> COLON type .)
    PREFIX          reduce using rule 197 (type_annotation -> COLON type .)
    POSTFIX         reduce using rule 197 (type_annotation -> COLON type .)
    INFIX           reduce using rule 197 (type_annotation -> COLON type .)
    DIV             reduce using rule 197 (type_annotation -> COLON type .)
    SUB             reduce using rule 197 (type_annotation -> COLON type .)
    ADD             reduce using rule 197 (type_annotation -> COLON type .)
    EXCLAMATION     reduce using rule 197 (type_annotation -> COLON type .)
    MUL             reduce using rule 197 (type_annotation -> COLON type .)
    MOD             reduce using rule 197 (type_annotation -> COLON type .)
    OR              reduce using rule 197 (type_annotation -> COLON type .)
    LT              reduce using rule 197 (type_annotation -> COLON type .)
    GT              reduce using rule 197 (type_annotation -> COLON type .)
    CARET           reduce using rule 197 (type_annotation -> COLON type .)
    TILDE           reduce using rule 197 (type_annotation -> COLON type .)
    CONDOP          reduce using rule 197 (type_annotation -> COLON type .)
    ANDAND          reduce using rule 197 (type_annotation -> COLON type .)
    OROR            reduce using rule 197 (type_annotation -> COLON type .)
    NOT             reduce using rule 197 (type_annotation -> COLON type .)
    DOT             reduce using rule 197 (type_annotation -> COLON type .)
    EQUALEQUAL      reduce using rule 197 (type_annotation -> COLON type .)
    NOTEQUAL        reduce using rule 197 (type_annotation -> COLON type .)
    LTE             reduce using rule 197 (type_annotation -> COLON type .)
    GTE             reduce using rule 197 (type_annotation -> COLON type .)
    IDENTIFIER      reduce using rule 197 (type_annotation -> COLON type .)
    LPAREN          reduce using rule 197 (type_annotation -> COLON type .)
    STRING_LITERAL  reduce using rule 197 (type_annotation -> COLON type .)
    CHAR_CONST      reduce using rule 197 (type_annotation -> COLON type .)
    FLOAT_CONST     reduce using rule 197 (type_annotation -> COLON type .)
    INT_CONST       reduce using rule 197 (type_annotation -> COLON type .)
    NIL_LITERAL     reduce using rule 197 (type_annotation -> COLON type .)
    LBRACK          reduce using rule 197 (type_annotation -> COLON type .)
    $end            reduce using rule 197 (type_annotation -> COLON type .)
    RCURLY          reduce using rule 197 (type_annotation -> COLON type .)
    CASE            reduce using rule 197 (type_annotation -> COLON type .)
    DEFAULT         reduce using rule 197 (type_annotation -> COLON type .)
    SEMICOLON       reduce using rule 197 (type_annotation -> COLON type .)
    WHERE           reduce using rule 197 (type_annotation -> COLON type .)
    COLON           reduce using rule 197 (type_annotation -> COLON type .)


state 229

    (206) function_type -> function_type_argument_clause . THROWS ARROW type
    (207) function_type -> function_type_argument_clause . ARROW type
    (208) function_type -> function_type_argument_clause . RETHROWS ARROW type

    THROWS          shift and go to state 290
    ARROW           shift and go to state 291
    RETHROWS        shift and go to state 289


state 230

    (205) type_keyword -> STRING .

    DOT             reduce using rule 205 (type_keyword -> STRING .)
    COMMA           reduce using rule 205 (type_keyword -> STRING .)
    RANGEOP         reduce using rule 205 (type_keyword -> STRING .)
    RPAREN          reduce using rule 205 (type_keyword -> STRING .)
    LCURLY          reduce using rule 205 (type_keyword -> STRING .)
    EQUAL           reduce using rule 205 (type_keyword -> STRING .)
    PRINT           reduce using rule 205 (type_keyword -> STRING .)
    IMPORT          reduce using rule 205 (type_keyword -> STRING .)
    LET             reduce using rule 205 (type_keyword -> STRING .)
    STRUCT          reduce using rule 205 (type_keyword -> STRING .)
    FOR             reduce using rule 205 (type_keyword -> STRING .)
    WHILE           reduce using rule 205 (type_keyword -> STRING .)
    REPEAT          reduce using rule 205 (type_keyword -> STRING .)
    IF              reduce using rule 205 (type_keyword -> STRING .)
    SWITCH          reduce using rule 205 (type_keyword -> STRING .)
    BREAK           reduce using rule 205 (type_keyword -> STRING .)
    CONTINUE        reduce using rule 205 (type_keyword -> STRING .)
    RETURN          reduce using rule 205 (type_keyword -> STRING .)
    AND             reduce using rule 205 (type_keyword -> STRING .)
    VAR             reduce using rule 205 (type_keyword -> STRING .)
    FUNC            reduce using rule 205 (type_keyword -> STRING .)
    PREFIX          reduce using rule 205 (type_keyword -> STRING .)
    POSTFIX         reduce using rule 205 (type_keyword -> STRING .)
    INFIX           reduce using rule 205 (type_keyword -> STRING .)
    DIV             reduce using rule 205 (type_keyword -> STRING .)
    SUB             reduce using rule 205 (type_keyword -> STRING .)
    ADD             reduce using rule 205 (type_keyword -> STRING .)
    EXCLAMATION     reduce using rule 205 (type_keyword -> STRING .)
    MUL             reduce using rule 205 (type_keyword -> STRING .)
    MOD             reduce using rule 205 (type_keyword -> STRING .)
    OR              reduce using rule 205 (type_keyword -> STRING .)
    LT              reduce using rule 205 (type_keyword -> STRING .)
    GT              reduce using rule 205 (type_keyword -> STRING .)
    CARET           reduce using rule 205 (type_keyword -> STRING .)
    TILDE           reduce using rule 205 (type_keyword -> STRING .)
    CONDOP          reduce using rule 205 (type_keyword -> STRING .)
    ANDAND          reduce using rule 205 (type_keyword -> STRING .)
    OROR            reduce using rule 205 (type_keyword -> STRING .)
    NOT             reduce using rule 205 (type_keyword -> STRING .)
    EQUALEQUAL      reduce using rule 205 (type_keyword -> STRING .)
    NOTEQUAL        reduce using rule 205 (type_keyword -> STRING .)
    LTE             reduce using rule 205 (type_keyword -> STRING .)
    GTE             reduce using rule 205 (type_keyword -> STRING .)
    IDENTIFIER      reduce using rule 205 (type_keyword -> STRING .)
    LPAREN          reduce using rule 205 (type_keyword -> STRING .)
    STRING_LITERAL  reduce using rule 205 (type_keyword -> STRING .)
    CHAR_CONST      reduce using rule 205 (type_keyword -> STRING .)
    FLOAT_CONST     reduce using rule 205 (type_keyword -> STRING .)
    INT_CONST       reduce using rule 205 (type_keyword -> STRING .)
    NIL_LITERAL     reduce using rule 205 (type_keyword -> STRING .)
    LBRACK          reduce using rule 205 (type_keyword -> STRING .)
    $end            reduce using rule 205 (type_keyword -> STRING .)
    RCURLY          reduce using rule 205 (type_keyword -> STRING .)
    CASE            reduce using rule 205 (type_keyword -> STRING .)
    DEFAULT         reduce using rule 205 (type_keyword -> STRING .)
    SEMICOLON       reduce using rule 205 (type_keyword -> STRING .)
    WHERE           reduce using rule 205 (type_keyword -> STRING .)
    COLON           reduce using rule 205 (type_keyword -> STRING .)
    RBRACK          reduce using rule 205 (type_keyword -> STRING .)


state 231

    (209) function_type_argument_clause -> LPAREN . RPAREN
    (210) function_type_argument_clause -> LPAREN . function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> LPAREN . function_type_argument_list RPAREN
    (212) function_type_argument_list -> . function_type_argument
    (213) function_type_argument_list -> . function_type_argument COMMA function_type_argument_list
    (214) function_type_argument -> . INOUT type
    (215) function_type_argument -> . type
    (216) function_type_argument -> . argument_label type_annotation
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (217) argument_label -> . label_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (221) label_identifier -> . IDENTIFIER
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    RPAREN          shift and go to state 293
    INOUT           shift and go to state 294
    LBRACK          shift and go to state 236
    IDENTIFIER      shift and go to state 203
    LPAREN          shift and go to state 231
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    label_identifier               shift and go to state 295
    function_type                  shift and go to state 223
    argument_label                 shift and go to state 292
    array_type                     shift and go to state 232
    function_type_argument_list    shift and go to state 298
    declaration_identifier         shift and go to state 227
    type                           shift and go to state 296
    function_type_argument         shift and go to state 297

state 232

    (193) type -> array_type .

    RBRACK          reduce using rule 193 (type -> array_type .)
    COMMA           reduce using rule 193 (type -> array_type .)
    RANGEOP         reduce using rule 193 (type -> array_type .)
    RPAREN          reduce using rule 193 (type -> array_type .)
    LCURLY          reduce using rule 193 (type -> array_type .)
    EQUAL           reduce using rule 193 (type -> array_type .)
    PRINT           reduce using rule 193 (type -> array_type .)
    IMPORT          reduce using rule 193 (type -> array_type .)
    LET             reduce using rule 193 (type -> array_type .)
    STRUCT          reduce using rule 193 (type -> array_type .)
    FOR             reduce using rule 193 (type -> array_type .)
    WHILE           reduce using rule 193 (type -> array_type .)
    REPEAT          reduce using rule 193 (type -> array_type .)
    IF              reduce using rule 193 (type -> array_type .)
    SWITCH          reduce using rule 193 (type -> array_type .)
    BREAK           reduce using rule 193 (type -> array_type .)
    CONTINUE        reduce using rule 193 (type -> array_type .)
    RETURN          reduce using rule 193 (type -> array_type .)
    AND             reduce using rule 193 (type -> array_type .)
    VAR             reduce using rule 193 (type -> array_type .)
    FUNC            reduce using rule 193 (type -> array_type .)
    PREFIX          reduce using rule 193 (type -> array_type .)
    POSTFIX         reduce using rule 193 (type -> array_type .)
    INFIX           reduce using rule 193 (type -> array_type .)
    DIV             reduce using rule 193 (type -> array_type .)
    SUB             reduce using rule 193 (type -> array_type .)
    ADD             reduce using rule 193 (type -> array_type .)
    EXCLAMATION     reduce using rule 193 (type -> array_type .)
    MUL             reduce using rule 193 (type -> array_type .)
    MOD             reduce using rule 193 (type -> array_type .)
    OR              reduce using rule 193 (type -> array_type .)
    LT              reduce using rule 193 (type -> array_type .)
    GT              reduce using rule 193 (type -> array_type .)
    CARET           reduce using rule 193 (type -> array_type .)
    TILDE           reduce using rule 193 (type -> array_type .)
    CONDOP          reduce using rule 193 (type -> array_type .)
    ANDAND          reduce using rule 193 (type -> array_type .)
    OROR            reduce using rule 193 (type -> array_type .)
    NOT             reduce using rule 193 (type -> array_type .)
    DOT             reduce using rule 193 (type -> array_type .)
    EQUALEQUAL      reduce using rule 193 (type -> array_type .)
    NOTEQUAL        reduce using rule 193 (type -> array_type .)
    LTE             reduce using rule 193 (type -> array_type .)
    GTE             reduce using rule 193 (type -> array_type .)
    IDENTIFIER      reduce using rule 193 (type -> array_type .)
    LPAREN          reduce using rule 193 (type -> array_type .)
    STRING_LITERAL  reduce using rule 193 (type -> array_type .)
    CHAR_CONST      reduce using rule 193 (type -> array_type .)
    FLOAT_CONST     reduce using rule 193 (type -> array_type .)
    INT_CONST       reduce using rule 193 (type -> array_type .)
    NIL_LITERAL     reduce using rule 193 (type -> array_type .)
    LBRACK          reduce using rule 193 (type -> array_type .)
    $end            reduce using rule 193 (type -> array_type .)
    RCURLY          reduce using rule 193 (type -> array_type .)
    CASE            reduce using rule 193 (type -> array_type .)
    DEFAULT         reduce using rule 193 (type -> array_type .)
    SEMICOLON       reduce using rule 193 (type -> array_type .)
    WHERE           reduce using rule 193 (type -> array_type .)
    COLON           reduce using rule 193 (type -> array_type .)


state 233

    (202) type_keyword -> INT .

    DOT             reduce using rule 202 (type_keyword -> INT .)
    COMMA           reduce using rule 202 (type_keyword -> INT .)
    RANGEOP         reduce using rule 202 (type_keyword -> INT .)
    RPAREN          reduce using rule 202 (type_keyword -> INT .)
    LCURLY          reduce using rule 202 (type_keyword -> INT .)
    EQUAL           reduce using rule 202 (type_keyword -> INT .)
    PRINT           reduce using rule 202 (type_keyword -> INT .)
    IMPORT          reduce using rule 202 (type_keyword -> INT .)
    LET             reduce using rule 202 (type_keyword -> INT .)
    STRUCT          reduce using rule 202 (type_keyword -> INT .)
    FOR             reduce using rule 202 (type_keyword -> INT .)
    WHILE           reduce using rule 202 (type_keyword -> INT .)
    REPEAT          reduce using rule 202 (type_keyword -> INT .)
    IF              reduce using rule 202 (type_keyword -> INT .)
    SWITCH          reduce using rule 202 (type_keyword -> INT .)
    BREAK           reduce using rule 202 (type_keyword -> INT .)
    CONTINUE        reduce using rule 202 (type_keyword -> INT .)
    RETURN          reduce using rule 202 (type_keyword -> INT .)
    AND             reduce using rule 202 (type_keyword -> INT .)
    VAR             reduce using rule 202 (type_keyword -> INT .)
    FUNC            reduce using rule 202 (type_keyword -> INT .)
    PREFIX          reduce using rule 202 (type_keyword -> INT .)
    POSTFIX         reduce using rule 202 (type_keyword -> INT .)
    INFIX           reduce using rule 202 (type_keyword -> INT .)
    DIV             reduce using rule 202 (type_keyword -> INT .)
    SUB             reduce using rule 202 (type_keyword -> INT .)
    ADD             reduce using rule 202 (type_keyword -> INT .)
    EXCLAMATION     reduce using rule 202 (type_keyword -> INT .)
    MUL             reduce using rule 202 (type_keyword -> INT .)
    MOD             reduce using rule 202 (type_keyword -> INT .)
    OR              reduce using rule 202 (type_keyword -> INT .)
    LT              reduce using rule 202 (type_keyword -> INT .)
    GT              reduce using rule 202 (type_keyword -> INT .)
    CARET           reduce using rule 202 (type_keyword -> INT .)
    TILDE           reduce using rule 202 (type_keyword -> INT .)
    CONDOP          reduce using rule 202 (type_keyword -> INT .)
    ANDAND          reduce using rule 202 (type_keyword -> INT .)
    OROR            reduce using rule 202 (type_keyword -> INT .)
    NOT             reduce using rule 202 (type_keyword -> INT .)
    EQUALEQUAL      reduce using rule 202 (type_keyword -> INT .)
    NOTEQUAL        reduce using rule 202 (type_keyword -> INT .)
    LTE             reduce using rule 202 (type_keyword -> INT .)
    GTE             reduce using rule 202 (type_keyword -> INT .)
    IDENTIFIER      reduce using rule 202 (type_keyword -> INT .)
    LPAREN          reduce using rule 202 (type_keyword -> INT .)
    STRING_LITERAL  reduce using rule 202 (type_keyword -> INT .)
    CHAR_CONST      reduce using rule 202 (type_keyword -> INT .)
    FLOAT_CONST     reduce using rule 202 (type_keyword -> INT .)
    INT_CONST       reduce using rule 202 (type_keyword -> INT .)
    NIL_LITERAL     reduce using rule 202 (type_keyword -> INT .)
    LBRACK          reduce using rule 202 (type_keyword -> INT .)
    $end            reduce using rule 202 (type_keyword -> INT .)
    RCURLY          reduce using rule 202 (type_keyword -> INT .)
    CASE            reduce using rule 202 (type_keyword -> INT .)
    DEFAULT         reduce using rule 202 (type_keyword -> INT .)
    SEMICOLON       reduce using rule 202 (type_keyword -> INT .)
    WHERE           reduce using rule 202 (type_keyword -> INT .)
    COLON           reduce using rule 202 (type_keyword -> INT .)
    RBRACK          reduce using rule 202 (type_keyword -> INT .)


state 234

    (204) type_keyword -> DOUBLE .

    DOT             reduce using rule 204 (type_keyword -> DOUBLE .)
    COMMA           reduce using rule 204 (type_keyword -> DOUBLE .)
    RANGEOP         reduce using rule 204 (type_keyword -> DOUBLE .)
    RPAREN          reduce using rule 204 (type_keyword -> DOUBLE .)
    LCURLY          reduce using rule 204 (type_keyword -> DOUBLE .)
    EQUAL           reduce using rule 204 (type_keyword -> DOUBLE .)
    PRINT           reduce using rule 204 (type_keyword -> DOUBLE .)
    IMPORT          reduce using rule 204 (type_keyword -> DOUBLE .)
    LET             reduce using rule 204 (type_keyword -> DOUBLE .)
    STRUCT          reduce using rule 204 (type_keyword -> DOUBLE .)
    FOR             reduce using rule 204 (type_keyword -> DOUBLE .)
    WHILE           reduce using rule 204 (type_keyword -> DOUBLE .)
    REPEAT          reduce using rule 204 (type_keyword -> DOUBLE .)
    IF              reduce using rule 204 (type_keyword -> DOUBLE .)
    SWITCH          reduce using rule 204 (type_keyword -> DOUBLE .)
    BREAK           reduce using rule 204 (type_keyword -> DOUBLE .)
    CONTINUE        reduce using rule 204 (type_keyword -> DOUBLE .)
    RETURN          reduce using rule 204 (type_keyword -> DOUBLE .)
    AND             reduce using rule 204 (type_keyword -> DOUBLE .)
    VAR             reduce using rule 204 (type_keyword -> DOUBLE .)
    FUNC            reduce using rule 204 (type_keyword -> DOUBLE .)
    PREFIX          reduce using rule 204 (type_keyword -> DOUBLE .)
    POSTFIX         reduce using rule 204 (type_keyword -> DOUBLE .)
    INFIX           reduce using rule 204 (type_keyword -> DOUBLE .)
    DIV             reduce using rule 204 (type_keyword -> DOUBLE .)
    SUB             reduce using rule 204 (type_keyword -> DOUBLE .)
    ADD             reduce using rule 204 (type_keyword -> DOUBLE .)
    EXCLAMATION     reduce using rule 204 (type_keyword -> DOUBLE .)
    MUL             reduce using rule 204 (type_keyword -> DOUBLE .)
    MOD             reduce using rule 204 (type_keyword -> DOUBLE .)
    OR              reduce using rule 204 (type_keyword -> DOUBLE .)
    LT              reduce using rule 204 (type_keyword -> DOUBLE .)
    GT              reduce using rule 204 (type_keyword -> DOUBLE .)
    CARET           reduce using rule 204 (type_keyword -> DOUBLE .)
    TILDE           reduce using rule 204 (type_keyword -> DOUBLE .)
    CONDOP          reduce using rule 204 (type_keyword -> DOUBLE .)
    ANDAND          reduce using rule 204 (type_keyword -> DOUBLE .)
    OROR            reduce using rule 204 (type_keyword -> DOUBLE .)
    NOT             reduce using rule 204 (type_keyword -> DOUBLE .)
    EQUALEQUAL      reduce using rule 204 (type_keyword -> DOUBLE .)
    NOTEQUAL        reduce using rule 204 (type_keyword -> DOUBLE .)
    LTE             reduce using rule 204 (type_keyword -> DOUBLE .)
    GTE             reduce using rule 204 (type_keyword -> DOUBLE .)
    IDENTIFIER      reduce using rule 204 (type_keyword -> DOUBLE .)
    LPAREN          reduce using rule 204 (type_keyword -> DOUBLE .)
    STRING_LITERAL  reduce using rule 204 (type_keyword -> DOUBLE .)
    CHAR_CONST      reduce using rule 204 (type_keyword -> DOUBLE .)
    FLOAT_CONST     reduce using rule 204 (type_keyword -> DOUBLE .)
    INT_CONST       reduce using rule 204 (type_keyword -> DOUBLE .)
    NIL_LITERAL     reduce using rule 204 (type_keyword -> DOUBLE .)
    LBRACK          reduce using rule 204 (type_keyword -> DOUBLE .)
    $end            reduce using rule 204 (type_keyword -> DOUBLE .)
    RCURLY          reduce using rule 204 (type_keyword -> DOUBLE .)
    CASE            reduce using rule 204 (type_keyword -> DOUBLE .)
    DEFAULT         reduce using rule 204 (type_keyword -> DOUBLE .)
    SEMICOLON       reduce using rule 204 (type_keyword -> DOUBLE .)
    WHERE           reduce using rule 204 (type_keyword -> DOUBLE .)
    COLON           reduce using rule 204 (type_keyword -> DOUBLE .)
    RBRACK          reduce using rule 204 (type_keyword -> DOUBLE .)


state 235

    (203) type_keyword -> FLOAT .

    DOT             reduce using rule 203 (type_keyword -> FLOAT .)
    COMMA           reduce using rule 203 (type_keyword -> FLOAT .)
    RANGEOP         reduce using rule 203 (type_keyword -> FLOAT .)
    RPAREN          reduce using rule 203 (type_keyword -> FLOAT .)
    LCURLY          reduce using rule 203 (type_keyword -> FLOAT .)
    EQUAL           reduce using rule 203 (type_keyword -> FLOAT .)
    PRINT           reduce using rule 203 (type_keyword -> FLOAT .)
    IMPORT          reduce using rule 203 (type_keyword -> FLOAT .)
    LET             reduce using rule 203 (type_keyword -> FLOAT .)
    STRUCT          reduce using rule 203 (type_keyword -> FLOAT .)
    FOR             reduce using rule 203 (type_keyword -> FLOAT .)
    WHILE           reduce using rule 203 (type_keyword -> FLOAT .)
    REPEAT          reduce using rule 203 (type_keyword -> FLOAT .)
    IF              reduce using rule 203 (type_keyword -> FLOAT .)
    SWITCH          reduce using rule 203 (type_keyword -> FLOAT .)
    BREAK           reduce using rule 203 (type_keyword -> FLOAT .)
    CONTINUE        reduce using rule 203 (type_keyword -> FLOAT .)
    RETURN          reduce using rule 203 (type_keyword -> FLOAT .)
    AND             reduce using rule 203 (type_keyword -> FLOAT .)
    VAR             reduce using rule 203 (type_keyword -> FLOAT .)
    FUNC            reduce using rule 203 (type_keyword -> FLOAT .)
    PREFIX          reduce using rule 203 (type_keyword -> FLOAT .)
    POSTFIX         reduce using rule 203 (type_keyword -> FLOAT .)
    INFIX           reduce using rule 203 (type_keyword -> FLOAT .)
    DIV             reduce using rule 203 (type_keyword -> FLOAT .)
    SUB             reduce using rule 203 (type_keyword -> FLOAT .)
    ADD             reduce using rule 203 (type_keyword -> FLOAT .)
    EXCLAMATION     reduce using rule 203 (type_keyword -> FLOAT .)
    MUL             reduce using rule 203 (type_keyword -> FLOAT .)
    MOD             reduce using rule 203 (type_keyword -> FLOAT .)
    OR              reduce using rule 203 (type_keyword -> FLOAT .)
    LT              reduce using rule 203 (type_keyword -> FLOAT .)
    GT              reduce using rule 203 (type_keyword -> FLOAT .)
    CARET           reduce using rule 203 (type_keyword -> FLOAT .)
    TILDE           reduce using rule 203 (type_keyword -> FLOAT .)
    CONDOP          reduce using rule 203 (type_keyword -> FLOAT .)
    ANDAND          reduce using rule 203 (type_keyword -> FLOAT .)
    OROR            reduce using rule 203 (type_keyword -> FLOAT .)
    NOT             reduce using rule 203 (type_keyword -> FLOAT .)
    EQUALEQUAL      reduce using rule 203 (type_keyword -> FLOAT .)
    NOTEQUAL        reduce using rule 203 (type_keyword -> FLOAT .)
    LTE             reduce using rule 203 (type_keyword -> FLOAT .)
    GTE             reduce using rule 203 (type_keyword -> FLOAT .)
    IDENTIFIER      reduce using rule 203 (type_keyword -> FLOAT .)
    LPAREN          reduce using rule 203 (type_keyword -> FLOAT .)
    STRING_LITERAL  reduce using rule 203 (type_keyword -> FLOAT .)
    CHAR_CONST      reduce using rule 203 (type_keyword -> FLOAT .)
    FLOAT_CONST     reduce using rule 203 (type_keyword -> FLOAT .)
    INT_CONST       reduce using rule 203 (type_keyword -> FLOAT .)
    NIL_LITERAL     reduce using rule 203 (type_keyword -> FLOAT .)
    LBRACK          reduce using rule 203 (type_keyword -> FLOAT .)
    $end            reduce using rule 203 (type_keyword -> FLOAT .)
    RCURLY          reduce using rule 203 (type_keyword -> FLOAT .)
    CASE            reduce using rule 203 (type_keyword -> FLOAT .)
    DEFAULT         reduce using rule 203 (type_keyword -> FLOAT .)
    SEMICOLON       reduce using rule 203 (type_keyword -> FLOAT .)
    WHERE           reduce using rule 203 (type_keyword -> FLOAT .)
    COLON           reduce using rule 203 (type_keyword -> FLOAT .)
    RBRACK          reduce using rule 203 (type_keyword -> FLOAT .)


state 236

    (218) array_type -> LBRACK . type RBRACK
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    LBRACK          shift and go to state 236
    LPAREN          shift and go to state 231
    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    declaration_identifier         shift and go to state 227
    function_type                  shift and go to state 223
    array_type                     shift and go to state 232
    type                           shift and go to state 299

state 237

    (83) p_com_pat_init_star -> COMMA pattern_initializer . p_com_pat_init_star
    (83) p_com_pat_init_star -> . COMMA pattern_initializer p_com_pat_init_star
    (84) p_com_pat_init_star -> .

    COMMA           shift and go to state 163
    PRINT           reduce using rule 84 (p_com_pat_init_star -> .)
    IMPORT          reduce using rule 84 (p_com_pat_init_star -> .)
    LET             reduce using rule 84 (p_com_pat_init_star -> .)
    STRUCT          reduce using rule 84 (p_com_pat_init_star -> .)
    FOR             reduce using rule 84 (p_com_pat_init_star -> .)
    WHILE           reduce using rule 84 (p_com_pat_init_star -> .)
    REPEAT          reduce using rule 84 (p_com_pat_init_star -> .)
    IF              reduce using rule 84 (p_com_pat_init_star -> .)
    SWITCH          reduce using rule 84 (p_com_pat_init_star -> .)
    BREAK           reduce using rule 84 (p_com_pat_init_star -> .)
    CONTINUE        reduce using rule 84 (p_com_pat_init_star -> .)
    RETURN          reduce using rule 84 (p_com_pat_init_star -> .)
    AND             reduce using rule 84 (p_com_pat_init_star -> .)
    VAR             reduce using rule 84 (p_com_pat_init_star -> .)
    FUNC            reduce using rule 84 (p_com_pat_init_star -> .)
    PREFIX          reduce using rule 84 (p_com_pat_init_star -> .)
    POSTFIX         reduce using rule 84 (p_com_pat_init_star -> .)
    INFIX           reduce using rule 84 (p_com_pat_init_star -> .)
    DIV             reduce using rule 84 (p_com_pat_init_star -> .)
    EQUAL           reduce using rule 84 (p_com_pat_init_star -> .)
    SUB             reduce using rule 84 (p_com_pat_init_star -> .)
    ADD             reduce using rule 84 (p_com_pat_init_star -> .)
    EXCLAMATION     reduce using rule 84 (p_com_pat_init_star -> .)
    MUL             reduce using rule 84 (p_com_pat_init_star -> .)
    MOD             reduce using rule 84 (p_com_pat_init_star -> .)
    OR              reduce using rule 84 (p_com_pat_init_star -> .)
    LT              reduce using rule 84 (p_com_pat_init_star -> .)
    GT              reduce using rule 84 (p_com_pat_init_star -> .)
    CARET           reduce using rule 84 (p_com_pat_init_star -> .)
    TILDE           reduce using rule 84 (p_com_pat_init_star -> .)
    CONDOP          reduce using rule 84 (p_com_pat_init_star -> .)
    ANDAND          reduce using rule 84 (p_com_pat_init_star -> .)
    OROR            reduce using rule 84 (p_com_pat_init_star -> .)
    NOT             reduce using rule 84 (p_com_pat_init_star -> .)
    DOT             reduce using rule 84 (p_com_pat_init_star -> .)
    EQUALEQUAL      reduce using rule 84 (p_com_pat_init_star -> .)
    NOTEQUAL        reduce using rule 84 (p_com_pat_init_star -> .)
    LTE             reduce using rule 84 (p_com_pat_init_star -> .)
    GTE             reduce using rule 84 (p_com_pat_init_star -> .)
    IDENTIFIER      reduce using rule 84 (p_com_pat_init_star -> .)
    LPAREN          reduce using rule 84 (p_com_pat_init_star -> .)
    STRING_LITERAL  reduce using rule 84 (p_com_pat_init_star -> .)
    CHAR_CONST      reduce using rule 84 (p_com_pat_init_star -> .)
    FLOAT_CONST     reduce using rule 84 (p_com_pat_init_star -> .)
    INT_CONST       reduce using rule 84 (p_com_pat_init_star -> .)
    NIL_LITERAL     reduce using rule 84 (p_com_pat_init_star -> .)
    LBRACK          reduce using rule 84 (p_com_pat_init_star -> .)
    $end            reduce using rule 84 (p_com_pat_init_star -> .)
    RCURLY          reduce using rule 84 (p_com_pat_init_star -> .)
    CASE            reduce using rule 84 (p_com_pat_init_star -> .)
    DEFAULT         reduce using rule 84 (p_com_pat_init_star -> .)
    SEMICOLON       reduce using rule 84 (p_com_pat_init_star -> .)

    p_com_pat_init_star            shift and go to state 300

state 238

    (10) print_statement -> PRINT LPAREN print_arg_list RPAREN .

    PRINT           reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    IMPORT          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    LET             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    STRUCT          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    FOR             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    WHILE           reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    REPEAT          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    IF              reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    SWITCH          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    BREAK           reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    CONTINUE        reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    RETURN          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    AND             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    VAR             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    FUNC            reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    PREFIX          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    POSTFIX         reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    INFIX           reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    DIV             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    EQUAL           reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    SUB             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    ADD             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    EXCLAMATION     reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    MUL             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    MOD             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    OR              reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    LT              reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    GT              reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    CARET           reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    TILDE           reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    CONDOP          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    ANDAND          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    OROR            reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    NOT             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    DOT             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    EQUALEQUAL      reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    NOTEQUAL        reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    LTE             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    GTE             reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    IDENTIFIER      reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    LPAREN          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    STRING_LITERAL  reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    CHAR_CONST      reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    FLOAT_CONST     reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    INT_CONST       reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    NIL_LITERAL     reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    LBRACK          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    CASE            reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    DEFAULT         reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    RCURLY          reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)
    $end            reduce using rule 10 (print_statement -> PRINT LPAREN print_arg_list RPAREN .)


state 239

    (11) print_arg_list -> print_arg COMMA . print_arg_list
    (11) print_arg_list -> . print_arg COMMA print_arg_list
    (12) print_arg_list -> . print_arg
    (13) print_arg -> . identifier
    (14) print_arg -> . literal
    (15) print_arg -> . expression
    (219) identifier -> . IDENTIFIER
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    IDENTIFIER      shift and go to state 170
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    LBRACK          shift and go to state 31

    print_arg_list                 shift and go to state 301
    literal_expression             shift and go to state 28
    prefix_expression              shift and go to state 64
    print_arg                      shift and go to state 171
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 169
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    identifier                     shift and go to state 172
    expression                     shift and go to state 173
    parenthesized_expression       shift and go to state 53

state 240

    (68) code_block -> LCURLY statements RCURLY .

    PRINT           reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    IMPORT          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    LET             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    STRUCT          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    FOR             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    WHILE           reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    REPEAT          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    IF              reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    SWITCH          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    BREAK           reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    CONTINUE        reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    RETURN          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    AND             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    VAR             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    FUNC            reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    PREFIX          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    POSTFIX         reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    INFIX           reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    DIV             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    EQUAL           reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    SUB             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    ADD             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    EXCLAMATION     reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    MUL             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    MOD             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    OR              reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    LT              reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    GT              reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    CARET           reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    TILDE           reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    CONDOP          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    ANDAND          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    OROR            reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    NOT             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    DOT             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    EQUALEQUAL      reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    NOTEQUAL        reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    LTE             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    GTE             reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    LPAREN          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    STRING_LITERAL  reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    CHAR_CONST      reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    FLOAT_CONST     reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    INT_CONST       reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    NIL_LITERAL     reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    LBRACK          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    $end            reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    RCURLY          reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    CASE            reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    DEFAULT         reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    ELSE            reduce using rule 68 (code_block -> LCURLY statements RCURLY .)
    SEMICOLON       reduce using rule 68 (code_block -> LCURLY statements RCURLY .)


state 241

    (32) repeat_while_statement -> REPEAT code_block WHILE expression .

    PRINT           reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    IMPORT          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    LET             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    STRUCT          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    FOR             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    WHILE           reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    REPEAT          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    IF              reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    SWITCH          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    BREAK           reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    CONTINUE        reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    RETURN          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    AND             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    VAR             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    FUNC            reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    PREFIX          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    POSTFIX         reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    INFIX           reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    DIV             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    EQUAL           reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    SUB             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    ADD             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    EXCLAMATION     reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    MUL             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    MOD             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    OR              reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    LT              reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    GT              reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    CARET           reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    TILDE           reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    CONDOP          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    ANDAND          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    OROR            reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    NOT             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    DOT             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    EQUALEQUAL      reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    NOTEQUAL        reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    LTE             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    GTE             reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    IDENTIFIER      reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    LPAREN          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    STRING_LITERAL  reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    CHAR_CONST      reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    FLOAT_CONST     reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    INT_CONST       reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    NIL_LITERAL     reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    LBRACK          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    CASE            reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    DEFAULT         reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    RCURLY          reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)
    $end            reduce using rule 32 (repeat_while_statement -> REPEAT code_block WHILE expression .)


state 242

    (19) for_statement -> FOR LPAREN for_init SEMICOLON . expression SEMICOLON expression RPAREN code_block
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    postfix_expression             shift and go to state 76
    operator                       shift and go to state 18
    parenthesized_expression       shift and go to state 53
    expression                     shift and go to state 302
    primary_expression             shift and go to state 58

state 243

    (146) commaexp -> COMMA . expression commaexp
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 303
    parenthesized_expression       shift and go to state 53

state 244

    (145) expression_list -> expression commaexp .

    SEMICOLON       reduce using rule 145 (expression_list -> expression commaexp .)
    RBRACK          reduce using rule 145 (expression_list -> expression commaexp .)


state 245

    (167) array_literal_items -> array_literal_item COMMA array_literal_items .

    RBRACK          reduce using rule 167 (array_literal_items -> array_literal_item COMMA array_literal_items .)


state 246

    (29) case_condition -> CASE pattern initializer .

    COMMA           reduce using rule 29 (case_condition -> CASE pattern initializer .)
    LCURLY          reduce using rule 29 (case_condition -> CASE pattern initializer .)


state 247

    (31) optional_binding_condition -> VAR pattern initializer .

    COMMA           reduce using rule 31 (optional_binding_condition -> VAR pattern initializer .)
    LCURLY          reduce using rule 31 (optional_binding_condition -> VAR pattern initializer .)


state 248

    (24) commacond -> COMMA condition . commacond
    (24) commacond -> . COMMA condition commacond
    (25) commacond -> .

    COMMA           shift and go to state 187
    LCURLY          reduce using rule 25 (commacond -> .)

    commacond                      shift and go to state 304

state 249

    (30) optional_binding_condition -> LET pattern initializer .

    COMMA           reduce using rule 30 (optional_binding_condition -> LET pattern initializer .)
    LCURLY          reduce using rule 30 (optional_binding_condition -> LET pattern initializer .)


state 250

    (45) case_label -> CASE . case_item_list COLON
    (46) case_item_list -> . pattern where_clause
    (47) case_item_list -> . pattern
    (48) case_item_list -> . pattern where_clause COMMA case_item_list
    (49) case_item_list -> . pattern COMMA case_item_list
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern                        shift and go to state 305
    case_item_list                 shift and go to state 306
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 251

    (43) switch_case -> case_label . statements
    (2) statements -> . statement statements
    (3) statements -> .
    (4) statement -> . expression
    (5) statement -> . declaration
    (6) statement -> . loop_statement
    (7) statement -> . branch_statement
    (8) statement -> . control_transfer_statement
    (9) statement -> . print_statement
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (60) declaration -> . import_declaration
    (61) declaration -> . constant_declaration
    (62) declaration -> . variable_declaration
    (63) declaration -> . function_declaration
    (64) declaration -> . struct_declaration
    (65) declaration -> . operator_declaration
    (16) loop_statement -> . for_statement
    (17) loop_statement -> . while_statement
    (18) loop_statement -> . repeat_while_statement
    (33) branch_statement -> . if_statement
    (34) branch_statement -> . switch_statement
    (53) control_transfer_statement -> . break_statement
    (54) control_transfer_statement -> . continue_statement
    (55) control_transfer_statement -> . return_statement
    (10) print_statement -> . PRINT LPAREN print_arg_list RPAREN
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (70) import_declaration -> . IMPORT import_kind import_path
    (71) import_declaration -> . IMPORT import_path
    (81) constant_declaration -> . LET pattern_initializer_list
    (88) variable_declaration -> . variable_declaration_head variable_name type_annotation code_block
    (89) variable_declaration -> . variable_declaration_head variable_name type_annotation initializer
    (90) variable_declaration -> . variable_declaration_head pattern_initializer_list
    (93) function_declaration -> . function_head function_name function_signature function_body
    (94) function_declaration -> . function_head function_name function_signature
    (120) struct_declaration -> . STRUCT struct_name struct_body
    (126) operator_declaration -> . prefix_operator_declaration
    (127) operator_declaration -> . postfix_operator_declaration
    (128) operator_declaration -> . infix_operator_declaration
    (19) for_statement -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block
    (22) while_statement -> . WHILE condition_list code_block
    (32) repeat_while_statement -> . REPEAT code_block WHILE expression
    (35) if_statement -> . IF condition_list code_block else_clause
    (36) if_statement -> . IF condition_list code_block
    (39) switch_statement -> . SWITCH expression LCURLY switch_cases RCURLY
    (40) switch_statement -> . SWITCH expression LCURLY RCURLY
    (56) break_statement -> . BREAK
    (57) continue_statement -> . CONTINUE
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (91) variable_declaration_head -> . VAR
    (95) function_head -> . FUNC
    (129) prefix_operator_declaration -> . PREFIX OPERATOR operator
    (130) postfix_operator_declaration -> . POSTFIX OPERATOR operator
    (131) infix_operator_declaration -> . INFIX OPERATOR operator
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    CASE            reduce using rule 3 (statements -> .)
    DEFAULT         reduce using rule 3 (statements -> .)
    RCURLY          reduce using rule 3 (statements -> .)
    PRINT           shift and go to state 20
    IMPORT          shift and go to state 8
    LET             shift and go to state 68
    STRUCT          shift and go to state 86
    FOR             shift and go to state 25
    WHILE           shift and go to state 41
    REPEAT          shift and go to state 24
    IF              shift and go to state 85
    SWITCH          shift and go to state 50
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 32
    RETURN          shift and go to state 16
    AND             shift and go to state 27
    VAR             shift and go to state 12
    FUNC            shift and go to state 26
    PREFIX          shift and go to state 71
    POSTFIX         shift and go to state 4
    INFIX           shift and go to state 34
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    statements                     shift and go to state 307
    loop_statement                 shift and go to state 3
    break_statement                shift and go to state 17
    operator                       shift and go to state 18
    variable_declaration_head      shift and go to state 19
    prefix_operator                shift and go to state 6
    print_statement                shift and go to state 42
    branch_statement               shift and go to state 44
    variable_declaration           shift and go to state 45
    switch_statement               shift and go to state 21
    prefix_operator_declaration    shift and go to state 55
    function_head                  shift and go to state 75
    postfix_expression             shift and go to state 76
    return_statement               shift and go to state 77
    while_statement                shift and go to state 48
    continue_statement             shift and go to state 22
    statement                      shift and go to state 51
    declaration_identifier         shift and go to state 23
    constant_declaration           shift and go to state 80
    if_statement                   shift and go to state 81
    for_statement                  shift and go to state 9
    postfix_operator_declaration   shift and go to state 54
    struct_declaration             shift and go to state 11
    literal                        shift and go to state 82
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    declaration                    shift and go to state 59
    import_declaration             shift and go to state 5
    literal_expression             shift and go to state 28
    operator_declaration           shift and go to state 60
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    function_declaration           shift and go to state 29
    conditional_operator           shift and go to state 79
    in_out_expression              shift and go to state 30
    infix_operator_declaration     shift and go to state 13
    control_transfer_statement     shift and go to state 87
    repeat_while_statement         shift and go to state 69
    expression                     shift and go to state 35

state 252

    (41) switch_cases -> switch_case . switch_cases
    (42) switch_cases -> switch_case .
    (41) switch_cases -> . switch_case switch_cases
    (42) switch_cases -> . switch_case
    (43) switch_case -> . case_label statements
    (44) switch_case -> . default_label statements
    (45) case_label -> . CASE case_item_list COLON
    (50) default_label -> . DEFAULT COLON

    RCURLY          reduce using rule 42 (switch_cases -> switch_case .)
    CASE            shift and go to state 250
    DEFAULT         shift and go to state 254

    case_label                     shift and go to state 251
    switch_case                    shift and go to state 252
    switch_cases                   shift and go to state 308
    default_label                  shift and go to state 256

state 253

    (40) switch_statement -> SWITCH expression LCURLY RCURLY .

    PRINT           reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    IMPORT          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    LET             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    STRUCT          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    FOR             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    WHILE           reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    REPEAT          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    IF              reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    SWITCH          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    BREAK           reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    CONTINUE        reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    RETURN          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    AND             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    VAR             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    FUNC            reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    PREFIX          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    POSTFIX         reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    INFIX           reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    DIV             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    EQUAL           reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    SUB             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    ADD             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    EXCLAMATION     reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    MUL             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    MOD             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    OR              reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    LT              reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    GT              reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    CARET           reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    TILDE           reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    CONDOP          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    ANDAND          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    OROR            reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    NOT             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    DOT             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    EQUALEQUAL      reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    NOTEQUAL        reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    LTE             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    GTE             reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    IDENTIFIER      reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    LPAREN          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    STRING_LITERAL  reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    CHAR_CONST      reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    FLOAT_CONST     reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    INT_CONST       reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    NIL_LITERAL     reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    LBRACK          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    $end            reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    RCURLY          reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    CASE            reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)
    DEFAULT         reduce using rule 40 (switch_statement -> SWITCH expression LCURLY RCURLY .)


state 254

    (50) default_label -> DEFAULT . COLON

    COLON           shift and go to state 309


state 255

    (39) switch_statement -> SWITCH expression LCURLY switch_cases . RCURLY

    RCURLY          shift and go to state 310


state 256

    (44) switch_case -> default_label . statements
    (2) statements -> . statement statements
    (3) statements -> .
    (4) statement -> . expression
    (5) statement -> . declaration
    (6) statement -> . loop_statement
    (7) statement -> . branch_statement
    (8) statement -> . control_transfer_statement
    (9) statement -> . print_statement
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (60) declaration -> . import_declaration
    (61) declaration -> . constant_declaration
    (62) declaration -> . variable_declaration
    (63) declaration -> . function_declaration
    (64) declaration -> . struct_declaration
    (65) declaration -> . operator_declaration
    (16) loop_statement -> . for_statement
    (17) loop_statement -> . while_statement
    (18) loop_statement -> . repeat_while_statement
    (33) branch_statement -> . if_statement
    (34) branch_statement -> . switch_statement
    (53) control_transfer_statement -> . break_statement
    (54) control_transfer_statement -> . continue_statement
    (55) control_transfer_statement -> . return_statement
    (10) print_statement -> . PRINT LPAREN print_arg_list RPAREN
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (70) import_declaration -> . IMPORT import_kind import_path
    (71) import_declaration -> . IMPORT import_path
    (81) constant_declaration -> . LET pattern_initializer_list
    (88) variable_declaration -> . variable_declaration_head variable_name type_annotation code_block
    (89) variable_declaration -> . variable_declaration_head variable_name type_annotation initializer
    (90) variable_declaration -> . variable_declaration_head pattern_initializer_list
    (93) function_declaration -> . function_head function_name function_signature function_body
    (94) function_declaration -> . function_head function_name function_signature
    (120) struct_declaration -> . STRUCT struct_name struct_body
    (126) operator_declaration -> . prefix_operator_declaration
    (127) operator_declaration -> . postfix_operator_declaration
    (128) operator_declaration -> . infix_operator_declaration
    (19) for_statement -> . FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block
    (22) while_statement -> . WHILE condition_list code_block
    (32) repeat_while_statement -> . REPEAT code_block WHILE expression
    (35) if_statement -> . IF condition_list code_block else_clause
    (36) if_statement -> . IF condition_list code_block
    (39) switch_statement -> . SWITCH expression LCURLY switch_cases RCURLY
    (40) switch_statement -> . SWITCH expression LCURLY RCURLY
    (56) break_statement -> . BREAK
    (57) continue_statement -> . CONTINUE
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (91) variable_declaration_head -> . VAR
    (95) function_head -> . FUNC
    (129) prefix_operator_declaration -> . PREFIX OPERATOR operator
    (130) postfix_operator_declaration -> . POSTFIX OPERATOR operator
    (131) infix_operator_declaration -> . INFIX OPERATOR operator
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    CASE            reduce using rule 3 (statements -> .)
    DEFAULT         reduce using rule 3 (statements -> .)
    RCURLY          reduce using rule 3 (statements -> .)
    PRINT           shift and go to state 20
    IMPORT          shift and go to state 8
    LET             shift and go to state 68
    STRUCT          shift and go to state 86
    FOR             shift and go to state 25
    WHILE           shift and go to state 41
    REPEAT          shift and go to state 24
    IF              shift and go to state 85
    SWITCH          shift and go to state 50
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 32
    RETURN          shift and go to state 16
    AND             shift and go to state 27
    VAR             shift and go to state 12
    FUNC            shift and go to state 26
    PREFIX          shift and go to state 71
    POSTFIX         shift and go to state 4
    INFIX           shift and go to state 34
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    statements                     shift and go to state 311
    loop_statement                 shift and go to state 3
    break_statement                shift and go to state 17
    operator                       shift and go to state 18
    variable_declaration_head      shift and go to state 19
    prefix_operator                shift and go to state 6
    print_statement                shift and go to state 42
    branch_statement               shift and go to state 44
    variable_declaration           shift and go to state 45
    switch_statement               shift and go to state 21
    prefix_operator_declaration    shift and go to state 55
    function_head                  shift and go to state 75
    postfix_expression             shift and go to state 76
    return_statement               shift and go to state 77
    while_statement                shift and go to state 48
    continue_statement             shift and go to state 22
    statement                      shift and go to state 51
    declaration_identifier         shift and go to state 23
    constant_declaration           shift and go to state 80
    if_statement                   shift and go to state 81
    for_statement                  shift and go to state 9
    postfix_operator_declaration   shift and go to state 54
    struct_declaration             shift and go to state 11
    literal                        shift and go to state 82
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    declaration                    shift and go to state 59
    import_declaration             shift and go to state 5
    literal_expression             shift and go to state 28
    operator_declaration           shift and go to state 60
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    function_declaration           shift and go to state 29
    conditional_operator           shift and go to state 79
    in_out_expression              shift and go to state 30
    infix_operator_declaration     shift and go to state 13
    control_transfer_statement     shift and go to state 87
    repeat_while_statement         shift and go to state 69
    expression                     shift and go to state 35

state 257

    (105) function_body -> code_block .

    PRINT           reduce using rule 105 (function_body -> code_block .)
    IMPORT          reduce using rule 105 (function_body -> code_block .)
    LET             reduce using rule 105 (function_body -> code_block .)
    STRUCT          reduce using rule 105 (function_body -> code_block .)
    FOR             reduce using rule 105 (function_body -> code_block .)
    WHILE           reduce using rule 105 (function_body -> code_block .)
    REPEAT          reduce using rule 105 (function_body -> code_block .)
    IF              reduce using rule 105 (function_body -> code_block .)
    SWITCH          reduce using rule 105 (function_body -> code_block .)
    BREAK           reduce using rule 105 (function_body -> code_block .)
    CONTINUE        reduce using rule 105 (function_body -> code_block .)
    RETURN          reduce using rule 105 (function_body -> code_block .)
    AND             reduce using rule 105 (function_body -> code_block .)
    VAR             reduce using rule 105 (function_body -> code_block .)
    FUNC            reduce using rule 105 (function_body -> code_block .)
    PREFIX          reduce using rule 105 (function_body -> code_block .)
    POSTFIX         reduce using rule 105 (function_body -> code_block .)
    INFIX           reduce using rule 105 (function_body -> code_block .)
    DIV             reduce using rule 105 (function_body -> code_block .)
    EQUAL           reduce using rule 105 (function_body -> code_block .)
    SUB             reduce using rule 105 (function_body -> code_block .)
    ADD             reduce using rule 105 (function_body -> code_block .)
    EXCLAMATION     reduce using rule 105 (function_body -> code_block .)
    MUL             reduce using rule 105 (function_body -> code_block .)
    MOD             reduce using rule 105 (function_body -> code_block .)
    OR              reduce using rule 105 (function_body -> code_block .)
    LT              reduce using rule 105 (function_body -> code_block .)
    GT              reduce using rule 105 (function_body -> code_block .)
    CARET           reduce using rule 105 (function_body -> code_block .)
    TILDE           reduce using rule 105 (function_body -> code_block .)
    CONDOP          reduce using rule 105 (function_body -> code_block .)
    ANDAND          reduce using rule 105 (function_body -> code_block .)
    OROR            reduce using rule 105 (function_body -> code_block .)
    NOT             reduce using rule 105 (function_body -> code_block .)
    DOT             reduce using rule 105 (function_body -> code_block .)
    EQUALEQUAL      reduce using rule 105 (function_body -> code_block .)
    NOTEQUAL        reduce using rule 105 (function_body -> code_block .)
    LTE             reduce using rule 105 (function_body -> code_block .)
    GTE             reduce using rule 105 (function_body -> code_block .)
    IDENTIFIER      reduce using rule 105 (function_body -> code_block .)
    LPAREN          reduce using rule 105 (function_body -> code_block .)
    STRING_LITERAL  reduce using rule 105 (function_body -> code_block .)
    CHAR_CONST      reduce using rule 105 (function_body -> code_block .)
    FLOAT_CONST     reduce using rule 105 (function_body -> code_block .)
    INT_CONST       reduce using rule 105 (function_body -> code_block .)
    NIL_LITERAL     reduce using rule 105 (function_body -> code_block .)
    LBRACK          reduce using rule 105 (function_body -> code_block .)
    $end            reduce using rule 105 (function_body -> code_block .)
    RCURLY          reduce using rule 105 (function_body -> code_block .)
    CASE            reduce using rule 105 (function_body -> code_block .)
    DEFAULT         reduce using rule 105 (function_body -> code_block .)


state 258

    (93) function_declaration -> function_head function_name function_signature function_body .

    IMPORT          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    LET             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    STRUCT          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    VAR             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    FUNC            reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    PREFIX          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    POSTFIX         reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    INFIX           reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    RCURLY          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    PRINT           reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    FOR             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    WHILE           reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    REPEAT          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    IF              reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    SWITCH          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    BREAK           reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    CONTINUE        reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    RETURN          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    AND             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    DIV             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    EQUAL           reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    SUB             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    ADD             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    EXCLAMATION     reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    MUL             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    MOD             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    OR              reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    LT              reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    GT              reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    CARET           reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    TILDE           reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    CONDOP          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    ANDAND          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    OROR            reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    NOT             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    DOT             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    EQUALEQUAL      reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    NOTEQUAL        reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    LTE             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    GTE             reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    IDENTIFIER      reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    LPAREN          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    STRING_LITERAL  reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    CHAR_CONST      reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    FLOAT_CONST     reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    INT_CONST       reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    NIL_LITERAL     reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    LBRACK          reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    $end            reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    CASE            reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)
    DEFAULT         reduce using rule 93 (function_declaration -> function_head function_name function_signature function_body .)


state 259

    (112) parameter -> local_parameter_name . type_annotation
    (113) parameter -> local_parameter_name . type_annotation default_argument_clause
    (116) parameter -> local_parameter_name . type_annotation RANGEOP
    (196) type_annotation -> . COLON INOUT type
    (197) type_annotation -> . COLON type

    COLON           shift and go to state 162

    type_annotation                shift and go to state 312

state 260

    (106) parameter_clause -> LPAREN RPAREN .

    THROWS          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    RETHROWS        reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    ARROW           reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    LCURLY          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    PRINT           reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    IMPORT          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    LET             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    STRUCT          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    FOR             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    WHILE           reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    REPEAT          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    IF              reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    SWITCH          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    BREAK           reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    RETURN          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    AND             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    VAR             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    FUNC            reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    PREFIX          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    POSTFIX         reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    INFIX           reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    DIV             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    EQUAL           reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    SUB             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    ADD             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    EXCLAMATION     reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    MUL             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    MOD             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    OR              reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    LT              reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    GT              reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    CARET           reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    TILDE           reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    CONDOP          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    ANDAND          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    OROR            reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    NOT             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    DOT             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    EQUALEQUAL      reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    LTE             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    GTE             reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    LPAREN          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    STRING_LITERAL  reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    CHAR_CONST      reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    FLOAT_CONST     reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    INT_CONST       reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    NIL_LITERAL     reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    LBRACK          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    $end            reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    RCURLY          reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    CASE            reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)
    DEFAULT         reduce using rule 106 (parameter_clause -> LPAREN RPAREN .)


state 261

    (107) parameter_clause -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 313


state 262

    (117) external_parameter_name -> label_identifier .
    (118) local_parameter_name -> label_identifier .

    IDENTIFIER      reduce using rule 117 (external_parameter_name -> label_identifier .)
    COLON           reduce using rule 118 (local_parameter_name -> label_identifier .)


state 263

    (221) label_identifier -> IDENTIFIER .

    COLON           reduce using rule 221 (label_identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 221 (label_identifier -> IDENTIFIER .)


state 264

    (108) parameter_list -> parameter . commapar
    (109) commapar -> . COMMA parameter commapar
    (110) commapar -> .

    COMMA           shift and go to state 314
    RPAREN          reduce using rule 110 (commapar -> .)

    commapar                       shift and go to state 315

state 265

    (111) parameter -> external_parameter_name . local_parameter_name type_annotation default_argument_clause
    (114) parameter -> external_parameter_name . local_parameter_name type_annotation
    (115) parameter -> external_parameter_name . local_parameter_name type_annotation RANGEOP
    (118) local_parameter_name -> . label_identifier
    (221) label_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 263

    label_identifier               shift and go to state 317
    local_parameter_name           shift and go to state 316

state 266

    (101) function_signature -> parameter_clause function_result .

    LCURLY          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    PRINT           reduce using rule 101 (function_signature -> parameter_clause function_result .)
    IMPORT          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    LET             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    STRUCT          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    FOR             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    WHILE           reduce using rule 101 (function_signature -> parameter_clause function_result .)
    REPEAT          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    IF              reduce using rule 101 (function_signature -> parameter_clause function_result .)
    SWITCH          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    BREAK           reduce using rule 101 (function_signature -> parameter_clause function_result .)
    CONTINUE        reduce using rule 101 (function_signature -> parameter_clause function_result .)
    RETURN          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    AND             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    VAR             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    FUNC            reduce using rule 101 (function_signature -> parameter_clause function_result .)
    PREFIX          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    POSTFIX         reduce using rule 101 (function_signature -> parameter_clause function_result .)
    INFIX           reduce using rule 101 (function_signature -> parameter_clause function_result .)
    DIV             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    EQUAL           reduce using rule 101 (function_signature -> parameter_clause function_result .)
    SUB             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    ADD             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    EXCLAMATION     reduce using rule 101 (function_signature -> parameter_clause function_result .)
    MUL             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    MOD             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    OR              reduce using rule 101 (function_signature -> parameter_clause function_result .)
    LT              reduce using rule 101 (function_signature -> parameter_clause function_result .)
    GT              reduce using rule 101 (function_signature -> parameter_clause function_result .)
    CARET           reduce using rule 101 (function_signature -> parameter_clause function_result .)
    TILDE           reduce using rule 101 (function_signature -> parameter_clause function_result .)
    CONDOP          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    ANDAND          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    OROR            reduce using rule 101 (function_signature -> parameter_clause function_result .)
    NOT             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    DOT             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    EQUALEQUAL      reduce using rule 101 (function_signature -> parameter_clause function_result .)
    NOTEQUAL        reduce using rule 101 (function_signature -> parameter_clause function_result .)
    LTE             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    GTE             reduce using rule 101 (function_signature -> parameter_clause function_result .)
    IDENTIFIER      reduce using rule 101 (function_signature -> parameter_clause function_result .)
    LPAREN          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    STRING_LITERAL  reduce using rule 101 (function_signature -> parameter_clause function_result .)
    CHAR_CONST      reduce using rule 101 (function_signature -> parameter_clause function_result .)
    FLOAT_CONST     reduce using rule 101 (function_signature -> parameter_clause function_result .)
    INT_CONST       reduce using rule 101 (function_signature -> parameter_clause function_result .)
    NIL_LITERAL     reduce using rule 101 (function_signature -> parameter_clause function_result .)
    LBRACK          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    $end            reduce using rule 101 (function_signature -> parameter_clause function_result .)
    RCURLY          reduce using rule 101 (function_signature -> parameter_clause function_result .)
    CASE            reduce using rule 101 (function_signature -> parameter_clause function_result .)
    DEFAULT         reduce using rule 101 (function_signature -> parameter_clause function_result .)


state 267

    (104) function_result -> ARROW . type
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    LBRACK          shift and go to state 236
    LPAREN          shift and go to state 231
    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    declaration_identifier         shift and go to state 227
    function_type                  shift and go to state 223
    array_type                     shift and go to state 232
    type                           shift and go to state 318

state 268

    (102) function_signature -> parameter_clause RETHROWS . function_result
    (103) function_signature -> parameter_clause RETHROWS .
    (104) function_result -> . ARROW type

    LCURLY          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    PRINT           reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    IMPORT          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    LET             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    STRUCT          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    FOR             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    WHILE           reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    REPEAT          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    IF              reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    SWITCH          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    BREAK           reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    CONTINUE        reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    RETURN          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    AND             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    VAR             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    FUNC            reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    PREFIX          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    POSTFIX         reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    INFIX           reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    DIV             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    EQUAL           reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    SUB             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    ADD             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    EXCLAMATION     reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    MUL             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    MOD             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    OR              reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    LT              reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    GT              reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    CARET           reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    TILDE           reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    CONDOP          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    ANDAND          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    OROR            reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    NOT             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    DOT             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    EQUALEQUAL      reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    NOTEQUAL        reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    LTE             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    GTE             reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    IDENTIFIER      reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    LPAREN          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    STRING_LITERAL  reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    CHAR_CONST      reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    FLOAT_CONST     reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    INT_CONST       reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    NIL_LITERAL     reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    LBRACK          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    $end            reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    RCURLY          reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    CASE            reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    DEFAULT         reduce using rule 103 (function_signature -> parameter_clause RETHROWS .)
    ARROW           shift and go to state 267

    function_result                shift and go to state 319

state 269

    (98) function_signature -> parameter_clause THROWS . function_result
    (100) function_signature -> parameter_clause THROWS .
    (104) function_result -> . ARROW type

    LCURLY          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    PRINT           reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    IMPORT          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    LET             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    STRUCT          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    FOR             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    WHILE           reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    REPEAT          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    IF              reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    SWITCH          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    BREAK           reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    CONTINUE        reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    RETURN          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    AND             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    VAR             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    FUNC            reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    PREFIX          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    POSTFIX         reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    INFIX           reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    DIV             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    EQUAL           reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    SUB             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    ADD             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    EXCLAMATION     reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    MUL             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    MOD             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    OR              reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    LT              reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    GT              reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    CARET           reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    TILDE           reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    CONDOP          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    ANDAND          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    OROR            reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    NOT             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    DOT             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    EQUALEQUAL      reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    NOTEQUAL        reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    LTE             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    GTE             reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    IDENTIFIER      reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    LPAREN          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    STRING_LITERAL  reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    CHAR_CONST      reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    FLOAT_CONST     reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    INT_CONST       reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    NIL_LITERAL     reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    LBRACK          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    $end            reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    RCURLY          reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    CASE            reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    DEFAULT         reduce using rule 100 (function_signature -> parameter_clause THROWS .)
    ARROW           shift and go to state 267

    function_result                shift and go to state 320

state 270

    (179) postfix_expression -> postfix_expression LBRACK expression_list RBRACK .

    DOT             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    LPAREN          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    LBRACK          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    EQUAL           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    EQUALEQUAL      reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    NOTEQUAL        reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    LTE             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    GTE             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    LT              reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    GT              reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    DIV             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    SUB             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    ADD             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    EXCLAMATION     reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    MUL             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    MOD             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    AND             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    OR              reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    CARET           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    TILDE           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    CONDOP          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    ANDAND          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    OROR            reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    NOT             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    RPAREN          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    PRINT           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    IMPORT          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    LET             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    STRUCT          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    FOR             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    WHILE           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    REPEAT          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    IF              reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    SWITCH          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    BREAK           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    CONTINUE        reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    RETURN          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    VAR             reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    FUNC            reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    PREFIX          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    POSTFIX         reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    INFIX           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    IDENTIFIER      reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    STRING_LITERAL  reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    CHAR_CONST      reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    FLOAT_CONST     reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    INT_CONST       reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    NIL_LITERAL     reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    $end            reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    RCURLY          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    CASE            reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    DEFAULT         reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    COMMA           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    SEMICOLON       reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    RBRACK          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    LCURLY          reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    WHERE           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)
    COLON           reduce using rule 179 (postfix_expression -> postfix_expression LBRACK expression_list RBRACK .)


state 271

    (192) argument_name -> label_identifier COLON .
    (186) function_call_argument -> label_identifier COLON . expression
    (188) function_call_argument -> label_identifier COLON . operator
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RPAREN          reduce using rule 192 (argument_name -> label_identifier COLON .)
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 206
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

  ! IDENTIFIER      [ reduce using rule 192 (argument_name -> label_identifier COLON .) ]

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    operator                       shift and go to state 321
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    declaration_identifier         shift and go to state 23
    expression                     shift and go to state 322
    parenthesized_expression       shift and go to state 53

state 272

    (183) COMMAfunction_call_argument_star -> COMMA . function_call_argument COMMAfunction_call_argument_star
    (185) function_call_argument -> . expression
    (186) function_call_argument -> . label_identifier COLON expression
    (187) function_call_argument -> . operator
    (188) function_call_argument -> . label_identifier COLON operator
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (221) label_identifier -> . IDENTIFIER
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    IDENTIFIER      shift and go to state 203
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 206
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    function_call_argument         shift and go to state 324
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    operator                       shift and go to state 200
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    label_identifier               shift and go to state 323
    declaration_identifier         shift and go to state 23
    expression                     shift and go to state 209
    parenthesized_expression       shift and go to state 53

state 273

    (182) function_call_argument_list -> function_call_argument COMMAfunction_call_argument_star .

    RPAREN          reduce using rule 182 (function_call_argument_list -> function_call_argument COMMAfunction_call_argument_star .)


state 274

    (181) function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .

    DOT             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    LPAREN          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    LBRACK          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    EQUAL           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    EQUALEQUAL      reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    NOTEQUAL        reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    LTE             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    GTE             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    LT              reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    GT              reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    DIV             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    SUB             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    ADD             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    EXCLAMATION     reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    MUL             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    MOD             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    AND             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    OR              reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    CARET           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    TILDE           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    CONDOP          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    ANDAND          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    OROR            reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    NOT             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    PRINT           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    IMPORT          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    LET             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    STRUCT          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    FOR             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    WHILE           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    REPEAT          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    IF              reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    SWITCH          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    BREAK           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    CONTINUE        reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    RETURN          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    VAR             reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    FUNC            reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    PREFIX          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    POSTFIX         reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    INFIX           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    IDENTIFIER      reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    STRING_LITERAL  reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    CHAR_CONST      reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    FLOAT_CONST     reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    INT_CONST       reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    NIL_LITERAL     reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    $end            reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    RCURLY          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    CASE            reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    DEFAULT         reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    COMMA           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    SEMICOLON       reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    RBRACK          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    LCURLY          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    RPAREN          reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    WHERE           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)
    COLON           reduce using rule 181 (function_call_argument_clause -> LPAREN function_call_argument_list RPAREN .)


state 275

    (192) argument_name -> label_identifier . COLON

    COLON           shift and go to state 325


state 276

    (190) argument_name_star -> argument_name . argument_name_star
    (190) argument_name_star -> . argument_name argument_name_star
    (191) argument_name_star -> .
    (192) argument_name -> . label_identifier COLON
    (221) label_identifier -> . IDENTIFIER

    RPAREN          reduce using rule 191 (argument_name_star -> .)
    IDENTIFIER      shift and go to state 263

    label_identifier               shift and go to state 275
    argument_name                  shift and go to state 276
    argument_name_star             shift and go to state 326

state 277

    (189) argument_names -> argument_name argument_name_star .

    RPAREN          reduce using rule 189 (argument_names -> argument_name argument_name_star .)


state 278

    (177) postfix_expression -> postfix_expression LPAREN argument_names RPAREN .

    DOT             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    LPAREN          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    LBRACK          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    EQUAL           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    EQUALEQUAL      reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    NOTEQUAL        reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    LTE             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    GTE             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    LT              reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    GT              reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    DIV             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    SUB             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    ADD             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    EXCLAMATION     reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    MUL             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    MOD             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    AND             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    OR              reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    CARET           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    TILDE           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    CONDOP          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    ANDAND          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    OROR            reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    NOT             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    RPAREN          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    PRINT           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    IMPORT          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    LET             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    STRUCT          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    FOR             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    WHILE           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    REPEAT          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    IF              reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    SWITCH          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    BREAK           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    CONTINUE        reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    RETURN          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    VAR             reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    FUNC            reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    PREFIX          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    POSTFIX         reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    INFIX           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    IDENTIFIER      reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    STRING_LITERAL  reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    CHAR_CONST      reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    FLOAT_CONST     reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    INT_CONST       reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    NIL_LITERAL     reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    $end            reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    RCURLY          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    CASE            reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    DEFAULT         reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    COMMA           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    SEMICOLON       reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    RBRACK          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    LCURLY          reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    WHERE           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)
    COLON           reduce using rule 177 (postfix_expression -> postfix_expression LPAREN argument_names RPAREN .)


state 279

    (173) postfix_expression -> postfix_expression DOT INIT LPAREN . argument_names RPAREN
    (189) argument_names -> . argument_name argument_name_star
    (192) argument_name -> . label_identifier COLON
    (221) label_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 263

    label_identifier               shift and go to state 275
    argument_name                  shift and go to state 207
    argument_names                 shift and go to state 327

state 280

    (176) postfix_expression -> postfix_expression DOT declaration_identifier LPAREN . argument_names RPAREN
    (189) argument_names -> . argument_name argument_name_star
    (192) argument_name -> . label_identifier COLON
    (221) label_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 263

    argument_names                 shift and go to state 328
    label_identifier               shift and go to state 275
    argument_name                  shift and go to state 207

state 281

    (37) else_clause -> ELSE . code_block
    (38) else_clause -> ELSE . if_statement
    (68) code_block -> . LCURLY statements RCURLY
    (69) code_block -> . LCURLY RCURLY
    (35) if_statement -> . IF condition_list code_block else_clause
    (36) if_statement -> . IF condition_list code_block

    LCURLY          shift and go to state 113
    IF              shift and go to state 85

    code_block                     shift and go to state 329
    if_statement                   shift and go to state 330

state 282

    (35) if_statement -> IF condition_list code_block else_clause .

    PRINT           reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    IMPORT          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    LET             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    STRUCT          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    FOR             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    WHILE           reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    REPEAT          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    IF              reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    SWITCH          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    BREAK           reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    CONTINUE        reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    RETURN          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    AND             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    VAR             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    FUNC            reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    PREFIX          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    POSTFIX         reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    INFIX           reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    DIV             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    EQUAL           reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    SUB             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    ADD             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    EXCLAMATION     reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    MUL             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    MOD             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    OR              reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    LT              reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    GT              reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    CARET           reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    TILDE           reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    CONDOP          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    ANDAND          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    OROR            reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    NOT             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    DOT             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    EQUALEQUAL      reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    NOTEQUAL        reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    LTE             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    GTE             reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    IDENTIFIER      reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    LPAREN          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    STRING_LITERAL  reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    CHAR_CONST      reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    FLOAT_CONST     reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    INT_CONST       reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    NIL_LITERAL     reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    LBRACK          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    CASE            reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    DEFAULT         reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    RCURLY          reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)
    $end            reduce using rule 35 (if_statement -> IF condition_list code_block else_clause .)


state 283

    (123) struct_member_star -> struct_member . struct_member_star
    (123) struct_member_star -> . struct_member struct_member_star
    (124) struct_member_star -> .
    (125) struct_member -> . declaration
    (60) declaration -> . import_declaration
    (61) declaration -> . constant_declaration
    (62) declaration -> . variable_declaration
    (63) declaration -> . function_declaration
    (64) declaration -> . struct_declaration
    (65) declaration -> . operator_declaration
    (70) import_declaration -> . IMPORT import_kind import_path
    (71) import_declaration -> . IMPORT import_path
    (81) constant_declaration -> . LET pattern_initializer_list
    (88) variable_declaration -> . variable_declaration_head variable_name type_annotation code_block
    (89) variable_declaration -> . variable_declaration_head variable_name type_annotation initializer
    (90) variable_declaration -> . variable_declaration_head pattern_initializer_list
    (93) function_declaration -> . function_head function_name function_signature function_body
    (94) function_declaration -> . function_head function_name function_signature
    (120) struct_declaration -> . STRUCT struct_name struct_body
    (126) operator_declaration -> . prefix_operator_declaration
    (127) operator_declaration -> . postfix_operator_declaration
    (128) operator_declaration -> . infix_operator_declaration
    (91) variable_declaration_head -> . VAR
    (95) function_head -> . FUNC
    (129) prefix_operator_declaration -> . PREFIX OPERATOR operator
    (130) postfix_operator_declaration -> . POSTFIX OPERATOR operator
    (131) infix_operator_declaration -> . INFIX OPERATOR operator

    RCURLY          reduce using rule 124 (struct_member_star -> .)
    IMPORT          shift and go to state 8
    LET             shift and go to state 68
    STRUCT          shift and go to state 86
    VAR             shift and go to state 12
    FUNC            shift and go to state 26
    PREFIX          shift and go to state 71
    POSTFIX         shift and go to state 4
    INFIX           shift and go to state 34

    struct_member                  shift and go to state 283
    variable_declaration_head      shift and go to state 19
    variable_declaration           shift and go to state 45
    function_head                  shift and go to state 75
    constant_declaration           shift and go to state 80
    postfix_operator_declaration   shift and go to state 54
    struct_declaration             shift and go to state 11
    prefix_operator_declaration    shift and go to state 55
    declaration                    shift and go to state 284
    import_declaration             shift and go to state 5
    operator_declaration           shift and go to state 60
    function_declaration           shift and go to state 29
    infix_operator_declaration     shift and go to state 13
    struct_member_star             shift and go to state 331

state 284

    (125) struct_member -> declaration .

    IMPORT          reduce using rule 125 (struct_member -> declaration .)
    LET             reduce using rule 125 (struct_member -> declaration .)
    STRUCT          reduce using rule 125 (struct_member -> declaration .)
    VAR             reduce using rule 125 (struct_member -> declaration .)
    FUNC            reduce using rule 125 (struct_member -> declaration .)
    PREFIX          reduce using rule 125 (struct_member -> declaration .)
    POSTFIX         reduce using rule 125 (struct_member -> declaration .)
    INFIX           reduce using rule 125 (struct_member -> declaration .)
    RCURLY          reduce using rule 125 (struct_member -> declaration .)


state 285

    (122) struct_body -> LCURLY struct_member_star . RCURLY

    RCURLY          shift and go to state 332


state 286

    (77) dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .

    PRINT           reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    IMPORT          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    LET             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    STRUCT          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    FOR             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    WHILE           reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    REPEAT          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    IF              reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    SWITCH          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    BREAK           reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    CONTINUE        reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    RETURN          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    AND             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    VAR             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    FUNC            reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    PREFIX          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    POSTFIX         reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    INFIX           reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    DIV             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    EQUAL           reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    SUB             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    ADD             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    EXCLAMATION     reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    MUL             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    MOD             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    OR              reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    LT              reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    GT              reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    CARET           reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    TILDE           reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    CONDOP          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    ANDAND          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    OROR            reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    NOT             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    DOT             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    EQUALEQUAL      reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    NOTEQUAL        reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    LTE             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    GTE             reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    IDENTIFIER      reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    LPAREN          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    STRING_LITERAL  reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    CHAR_CONST      reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    FLOAT_CONST     reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    INT_CONST       reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    NIL_LITERAL     reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    LBRACK          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    $end            reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    RCURLY          reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    CASE            reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)
    DEFAULT         reduce using rule 77 (dot_import_path_identifier -> DOT import_path_identifier dot_import_path_identifier .)


state 287

    (198) type_identifier -> type_name DOT . type_identifier
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    declaration_identifier         shift and go to state 227
    type_keyword                   shift and go to state 224
    type_name                      shift and go to state 225
    type_identifier                shift and go to state 333

state 288

    (196) type_annotation -> COLON INOUT type .

    RANGEOP         reduce using rule 196 (type_annotation -> COLON INOUT type .)
    EQUAL           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    COMMA           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    RPAREN          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    LCURLY          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    PRINT           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    IMPORT          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    LET             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    STRUCT          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    FOR             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    WHILE           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    REPEAT          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    IF              reduce using rule 196 (type_annotation -> COLON INOUT type .)
    SWITCH          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    BREAK           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    CONTINUE        reduce using rule 196 (type_annotation -> COLON INOUT type .)
    RETURN          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    AND             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    VAR             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    FUNC            reduce using rule 196 (type_annotation -> COLON INOUT type .)
    PREFIX          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    POSTFIX         reduce using rule 196 (type_annotation -> COLON INOUT type .)
    INFIX           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    DIV             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    SUB             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    ADD             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    EXCLAMATION     reduce using rule 196 (type_annotation -> COLON INOUT type .)
    MUL             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    MOD             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    OR              reduce using rule 196 (type_annotation -> COLON INOUT type .)
    LT              reduce using rule 196 (type_annotation -> COLON INOUT type .)
    GT              reduce using rule 196 (type_annotation -> COLON INOUT type .)
    CARET           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    TILDE           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    CONDOP          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    ANDAND          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    OROR            reduce using rule 196 (type_annotation -> COLON INOUT type .)
    NOT             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    DOT             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    EQUALEQUAL      reduce using rule 196 (type_annotation -> COLON INOUT type .)
    NOTEQUAL        reduce using rule 196 (type_annotation -> COLON INOUT type .)
    LTE             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    GTE             reduce using rule 196 (type_annotation -> COLON INOUT type .)
    IDENTIFIER      reduce using rule 196 (type_annotation -> COLON INOUT type .)
    LPAREN          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    STRING_LITERAL  reduce using rule 196 (type_annotation -> COLON INOUT type .)
    CHAR_CONST      reduce using rule 196 (type_annotation -> COLON INOUT type .)
    FLOAT_CONST     reduce using rule 196 (type_annotation -> COLON INOUT type .)
    INT_CONST       reduce using rule 196 (type_annotation -> COLON INOUT type .)
    NIL_LITERAL     reduce using rule 196 (type_annotation -> COLON INOUT type .)
    LBRACK          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    $end            reduce using rule 196 (type_annotation -> COLON INOUT type .)
    RCURLY          reduce using rule 196 (type_annotation -> COLON INOUT type .)
    CASE            reduce using rule 196 (type_annotation -> COLON INOUT type .)
    DEFAULT         reduce using rule 196 (type_annotation -> COLON INOUT type .)
    SEMICOLON       reduce using rule 196 (type_annotation -> COLON INOUT type .)
    WHERE           reduce using rule 196 (type_annotation -> COLON INOUT type .)
    COLON           reduce using rule 196 (type_annotation -> COLON INOUT type .)


state 289

    (208) function_type -> function_type_argument_clause RETHROWS . ARROW type

    ARROW           shift and go to state 334


state 290

    (206) function_type -> function_type_argument_clause THROWS . ARROW type

    ARROW           shift and go to state 335


state 291

    (207) function_type -> function_type_argument_clause ARROW . type
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    LBRACK          shift and go to state 236
    LPAREN          shift and go to state 231
    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    declaration_identifier         shift and go to state 227
    function_type                  shift and go to state 223
    array_type                     shift and go to state 232
    type                           shift and go to state 336

state 292

    (216) function_type_argument -> argument_label . type_annotation
    (196) type_annotation -> . COLON INOUT type
    (197) type_annotation -> . COLON type

    COLON           shift and go to state 162

    type_annotation                shift and go to state 337

state 293

    (209) function_type_argument_clause -> LPAREN RPAREN .

    THROWS          reduce using rule 209 (function_type_argument_clause -> LPAREN RPAREN .)
    ARROW           reduce using rule 209 (function_type_argument_clause -> LPAREN RPAREN .)
    RETHROWS        reduce using rule 209 (function_type_argument_clause -> LPAREN RPAREN .)


state 294

    (214) function_type_argument -> INOUT . type
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    LBRACK          shift and go to state 236
    LPAREN          shift and go to state 231
    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    declaration_identifier         shift and go to state 227
    function_type                  shift and go to state 223
    array_type                     shift and go to state 232
    type                           shift and go to state 338

state 295

    (217) argument_label -> label_identifier .

    COLON           reduce using rule 217 (argument_label -> label_identifier .)


state 296

    (215) function_type_argument -> type .

    COMMA           reduce using rule 215 (function_type_argument -> type .)
    RANGEOP         reduce using rule 215 (function_type_argument -> type .)
    RPAREN          reduce using rule 215 (function_type_argument -> type .)


state 297

    (212) function_type_argument_list -> function_type_argument .
    (213) function_type_argument_list -> function_type_argument . COMMA function_type_argument_list

    RANGEOP         reduce using rule 212 (function_type_argument_list -> function_type_argument .)
    RPAREN          reduce using rule 212 (function_type_argument_list -> function_type_argument .)
    COMMA           shift and go to state 339


state 298

    (210) function_type_argument_clause -> LPAREN function_type_argument_list . RANGEOP RPAREN
    (211) function_type_argument_clause -> LPAREN function_type_argument_list . RPAREN

    RANGEOP         shift and go to state 341
    RPAREN          shift and go to state 340


state 299

    (218) array_type -> LBRACK type . RBRACK

    RBRACK          shift and go to state 342


state 300

    (83) p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .

    PRINT           reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    IMPORT          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    LET             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    STRUCT          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    FOR             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    WHILE           reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    REPEAT          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    IF              reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    SWITCH          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    BREAK           reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    CONTINUE        reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    RETURN          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    AND             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    VAR             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    FUNC            reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    PREFIX          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    POSTFIX         reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    INFIX           reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    DIV             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    EQUAL           reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    SUB             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    ADD             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    EXCLAMATION     reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    MUL             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    MOD             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    OR              reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    LT              reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    GT              reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    CARET           reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    TILDE           reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    CONDOP          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    ANDAND          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    OROR            reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    NOT             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    DOT             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    EQUALEQUAL      reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    NOTEQUAL        reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    LTE             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    GTE             reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    IDENTIFIER      reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    LPAREN          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    STRING_LITERAL  reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    CHAR_CONST      reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    FLOAT_CONST     reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    INT_CONST       reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    NIL_LITERAL     reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    LBRACK          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    $end            reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    RCURLY          reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    CASE            reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    DEFAULT         reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)
    SEMICOLON       reduce using rule 83 (p_com_pat_init_star -> COMMA pattern_initializer p_com_pat_init_star .)


state 301

    (11) print_arg_list -> print_arg COMMA print_arg_list .

    RPAREN          reduce using rule 11 (print_arg_list -> print_arg COMMA print_arg_list .)


state 302

    (19) for_statement -> FOR LPAREN for_init SEMICOLON expression . SEMICOLON expression RPAREN code_block

    SEMICOLON       shift and go to state 343


state 303

    (146) commaexp -> COMMA expression . commaexp
    (146) commaexp -> . COMMA expression commaexp
    (147) commaexp -> .

    COMMA           shift and go to state 243
    SEMICOLON       reduce using rule 147 (commaexp -> .)
    RBRACK          reduce using rule 147 (commaexp -> .)

    commaexp                       shift and go to state 344

state 304

    (24) commacond -> COMMA condition commacond .

    LCURLY          reduce using rule 24 (commacond -> COMMA condition commacond .)


state 305

    (46) case_item_list -> pattern . where_clause
    (47) case_item_list -> pattern .
    (48) case_item_list -> pattern . where_clause COMMA case_item_list
    (49) case_item_list -> pattern . COMMA case_item_list
    (51) where_clause -> . WHERE where_expression

    COLON           reduce using rule 47 (case_item_list -> pattern .)
    COMMA           shift and go to state 346
    WHERE           shift and go to state 347

    where_clause                   shift and go to state 345

state 306

    (45) case_label -> CASE case_item_list . COLON

    COLON           shift and go to state 348


state 307

    (43) switch_case -> case_label statements .

    CASE            reduce using rule 43 (switch_case -> case_label statements .)
    DEFAULT         reduce using rule 43 (switch_case -> case_label statements .)
    RCURLY          reduce using rule 43 (switch_case -> case_label statements .)


state 308

    (41) switch_cases -> switch_case switch_cases .

    RCURLY          reduce using rule 41 (switch_cases -> switch_case switch_cases .)


state 309

    (50) default_label -> DEFAULT COLON .

    PRINT           reduce using rule 50 (default_label -> DEFAULT COLON .)
    IMPORT          reduce using rule 50 (default_label -> DEFAULT COLON .)
    LET             reduce using rule 50 (default_label -> DEFAULT COLON .)
    STRUCT          reduce using rule 50 (default_label -> DEFAULT COLON .)
    FOR             reduce using rule 50 (default_label -> DEFAULT COLON .)
    WHILE           reduce using rule 50 (default_label -> DEFAULT COLON .)
    REPEAT          reduce using rule 50 (default_label -> DEFAULT COLON .)
    IF              reduce using rule 50 (default_label -> DEFAULT COLON .)
    SWITCH          reduce using rule 50 (default_label -> DEFAULT COLON .)
    BREAK           reduce using rule 50 (default_label -> DEFAULT COLON .)
    CONTINUE        reduce using rule 50 (default_label -> DEFAULT COLON .)
    RETURN          reduce using rule 50 (default_label -> DEFAULT COLON .)
    AND             reduce using rule 50 (default_label -> DEFAULT COLON .)
    VAR             reduce using rule 50 (default_label -> DEFAULT COLON .)
    FUNC            reduce using rule 50 (default_label -> DEFAULT COLON .)
    PREFIX          reduce using rule 50 (default_label -> DEFAULT COLON .)
    POSTFIX         reduce using rule 50 (default_label -> DEFAULT COLON .)
    INFIX           reduce using rule 50 (default_label -> DEFAULT COLON .)
    DIV             reduce using rule 50 (default_label -> DEFAULT COLON .)
    EQUAL           reduce using rule 50 (default_label -> DEFAULT COLON .)
    SUB             reduce using rule 50 (default_label -> DEFAULT COLON .)
    ADD             reduce using rule 50 (default_label -> DEFAULT COLON .)
    EXCLAMATION     reduce using rule 50 (default_label -> DEFAULT COLON .)
    MUL             reduce using rule 50 (default_label -> DEFAULT COLON .)
    MOD             reduce using rule 50 (default_label -> DEFAULT COLON .)
    OR              reduce using rule 50 (default_label -> DEFAULT COLON .)
    LT              reduce using rule 50 (default_label -> DEFAULT COLON .)
    GT              reduce using rule 50 (default_label -> DEFAULT COLON .)
    CARET           reduce using rule 50 (default_label -> DEFAULT COLON .)
    TILDE           reduce using rule 50 (default_label -> DEFAULT COLON .)
    CONDOP          reduce using rule 50 (default_label -> DEFAULT COLON .)
    ANDAND          reduce using rule 50 (default_label -> DEFAULT COLON .)
    OROR            reduce using rule 50 (default_label -> DEFAULT COLON .)
    NOT             reduce using rule 50 (default_label -> DEFAULT COLON .)
    DOT             reduce using rule 50 (default_label -> DEFAULT COLON .)
    EQUALEQUAL      reduce using rule 50 (default_label -> DEFAULT COLON .)
    NOTEQUAL        reduce using rule 50 (default_label -> DEFAULT COLON .)
    LTE             reduce using rule 50 (default_label -> DEFAULT COLON .)
    GTE             reduce using rule 50 (default_label -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 50 (default_label -> DEFAULT COLON .)
    LPAREN          reduce using rule 50 (default_label -> DEFAULT COLON .)
    STRING_LITERAL  reduce using rule 50 (default_label -> DEFAULT COLON .)
    CHAR_CONST      reduce using rule 50 (default_label -> DEFAULT COLON .)
    FLOAT_CONST     reduce using rule 50 (default_label -> DEFAULT COLON .)
    INT_CONST       reduce using rule 50 (default_label -> DEFAULT COLON .)
    NIL_LITERAL     reduce using rule 50 (default_label -> DEFAULT COLON .)
    LBRACK          reduce using rule 50 (default_label -> DEFAULT COLON .)
    CASE            reduce using rule 50 (default_label -> DEFAULT COLON .)
    DEFAULT         reduce using rule 50 (default_label -> DEFAULT COLON .)
    RCURLY          reduce using rule 50 (default_label -> DEFAULT COLON .)


state 310

    (39) switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .

    PRINT           reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    IMPORT          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    LET             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    STRUCT          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    FOR             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    WHILE           reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    REPEAT          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    IF              reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    SWITCH          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    BREAK           reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    CONTINUE        reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    RETURN          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    AND             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    VAR             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    FUNC            reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    PREFIX          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    POSTFIX         reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    INFIX           reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    DIV             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    EQUAL           reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    SUB             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    ADD             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    EXCLAMATION     reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    MUL             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    MOD             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    OR              reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    LT              reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    GT              reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    CARET           reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    TILDE           reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    CONDOP          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    ANDAND          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    OROR            reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    NOT             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    DOT             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    EQUALEQUAL      reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    NOTEQUAL        reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    LTE             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    GTE             reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    IDENTIFIER      reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    LPAREN          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    STRING_LITERAL  reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    CHAR_CONST      reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    FLOAT_CONST     reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    INT_CONST       reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    NIL_LITERAL     reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    LBRACK          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    $end            reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    RCURLY          reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    CASE            reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)
    DEFAULT         reduce using rule 39 (switch_statement -> SWITCH expression LCURLY switch_cases RCURLY .)


state 311

    (44) switch_case -> default_label statements .

    CASE            reduce using rule 44 (switch_case -> default_label statements .)
    DEFAULT         reduce using rule 44 (switch_case -> default_label statements .)
    RCURLY          reduce using rule 44 (switch_case -> default_label statements .)


state 312

    (112) parameter -> local_parameter_name type_annotation .
    (113) parameter -> local_parameter_name type_annotation . default_argument_clause
    (116) parameter -> local_parameter_name type_annotation . RANGEOP
    (119) default_argument_clause -> . EQUAL expression

    COMMA           reduce using rule 112 (parameter -> local_parameter_name type_annotation .)
    RPAREN          reduce using rule 112 (parameter -> local_parameter_name type_annotation .)
    RANGEOP         shift and go to state 349
    EQUAL           shift and go to state 350

    default_argument_clause        shift and go to state 351

state 313

    (107) parameter_clause -> LPAREN parameter_list RPAREN .

    THROWS          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    RETHROWS        reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    ARROW           reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    LCURLY          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    PRINT           reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    IMPORT          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    LET             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    STRUCT          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    FOR             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    REPEAT          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    IF              reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    SWITCH          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    BREAK           reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    CONTINUE        reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    RETURN          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    AND             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    VAR             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    FUNC            reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    PREFIX          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    POSTFIX         reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    INFIX           reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    DIV             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    SUB             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    ADD             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    EXCLAMATION     reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    MUL             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    OR              reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    LT              reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    GT              reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    CARET           reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    TILDE           reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    CONDOP          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    ANDAND          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    OROR            reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    NOT             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    DOT             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    EQUALEQUAL      reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    NOTEQUAL        reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    LTE             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    GTE             reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    IDENTIFIER      reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    STRING_LITERAL  reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    CHAR_CONST      reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    FLOAT_CONST     reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    INT_CONST       reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    NIL_LITERAL     reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    LBRACK          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    $end            reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    RCURLY          reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    CASE            reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)
    DEFAULT         reduce using rule 107 (parameter_clause -> LPAREN parameter_list RPAREN .)


state 314

    (109) commapar -> COMMA . parameter commapar
    (111) parameter -> . external_parameter_name local_parameter_name type_annotation default_argument_clause
    (112) parameter -> . local_parameter_name type_annotation
    (113) parameter -> . local_parameter_name type_annotation default_argument_clause
    (114) parameter -> . external_parameter_name local_parameter_name type_annotation
    (115) parameter -> . external_parameter_name local_parameter_name type_annotation RANGEOP
    (116) parameter -> . local_parameter_name type_annotation RANGEOP
    (117) external_parameter_name -> . label_identifier
    (118) local_parameter_name -> . label_identifier
    (221) label_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 263

    local_parameter_name           shift and go to state 259
    label_identifier               shift and go to state 262
    parameter                      shift and go to state 352
    external_parameter_name        shift and go to state 265

state 315

    (108) parameter_list -> parameter commapar .

    RPAREN          reduce using rule 108 (parameter_list -> parameter commapar .)


state 316

    (111) parameter -> external_parameter_name local_parameter_name . type_annotation default_argument_clause
    (114) parameter -> external_parameter_name local_parameter_name . type_annotation
    (115) parameter -> external_parameter_name local_parameter_name . type_annotation RANGEOP
    (196) type_annotation -> . COLON INOUT type
    (197) type_annotation -> . COLON type

    COLON           shift and go to state 162

    type_annotation                shift and go to state 353

state 317

    (118) local_parameter_name -> label_identifier .

    COLON           reduce using rule 118 (local_parameter_name -> label_identifier .)


state 318

    (104) function_result -> ARROW type .

    LCURLY          reduce using rule 104 (function_result -> ARROW type .)
    PRINT           reduce using rule 104 (function_result -> ARROW type .)
    IMPORT          reduce using rule 104 (function_result -> ARROW type .)
    LET             reduce using rule 104 (function_result -> ARROW type .)
    STRUCT          reduce using rule 104 (function_result -> ARROW type .)
    FOR             reduce using rule 104 (function_result -> ARROW type .)
    WHILE           reduce using rule 104 (function_result -> ARROW type .)
    REPEAT          reduce using rule 104 (function_result -> ARROW type .)
    IF              reduce using rule 104 (function_result -> ARROW type .)
    SWITCH          reduce using rule 104 (function_result -> ARROW type .)
    BREAK           reduce using rule 104 (function_result -> ARROW type .)
    CONTINUE        reduce using rule 104 (function_result -> ARROW type .)
    RETURN          reduce using rule 104 (function_result -> ARROW type .)
    AND             reduce using rule 104 (function_result -> ARROW type .)
    VAR             reduce using rule 104 (function_result -> ARROW type .)
    FUNC            reduce using rule 104 (function_result -> ARROW type .)
    PREFIX          reduce using rule 104 (function_result -> ARROW type .)
    POSTFIX         reduce using rule 104 (function_result -> ARROW type .)
    INFIX           reduce using rule 104 (function_result -> ARROW type .)
    DIV             reduce using rule 104 (function_result -> ARROW type .)
    EQUAL           reduce using rule 104 (function_result -> ARROW type .)
    SUB             reduce using rule 104 (function_result -> ARROW type .)
    ADD             reduce using rule 104 (function_result -> ARROW type .)
    EXCLAMATION     reduce using rule 104 (function_result -> ARROW type .)
    MUL             reduce using rule 104 (function_result -> ARROW type .)
    MOD             reduce using rule 104 (function_result -> ARROW type .)
    OR              reduce using rule 104 (function_result -> ARROW type .)
    LT              reduce using rule 104 (function_result -> ARROW type .)
    GT              reduce using rule 104 (function_result -> ARROW type .)
    CARET           reduce using rule 104 (function_result -> ARROW type .)
    TILDE           reduce using rule 104 (function_result -> ARROW type .)
    CONDOP          reduce using rule 104 (function_result -> ARROW type .)
    ANDAND          reduce using rule 104 (function_result -> ARROW type .)
    OROR            reduce using rule 104 (function_result -> ARROW type .)
    NOT             reduce using rule 104 (function_result -> ARROW type .)
    DOT             reduce using rule 104 (function_result -> ARROW type .)
    EQUALEQUAL      reduce using rule 104 (function_result -> ARROW type .)
    NOTEQUAL        reduce using rule 104 (function_result -> ARROW type .)
    LTE             reduce using rule 104 (function_result -> ARROW type .)
    GTE             reduce using rule 104 (function_result -> ARROW type .)
    IDENTIFIER      reduce using rule 104 (function_result -> ARROW type .)
    LPAREN          reduce using rule 104 (function_result -> ARROW type .)
    STRING_LITERAL  reduce using rule 104 (function_result -> ARROW type .)
    CHAR_CONST      reduce using rule 104 (function_result -> ARROW type .)
    FLOAT_CONST     reduce using rule 104 (function_result -> ARROW type .)
    INT_CONST       reduce using rule 104 (function_result -> ARROW type .)
    NIL_LITERAL     reduce using rule 104 (function_result -> ARROW type .)
    LBRACK          reduce using rule 104 (function_result -> ARROW type .)
    $end            reduce using rule 104 (function_result -> ARROW type .)
    RCURLY          reduce using rule 104 (function_result -> ARROW type .)
    CASE            reduce using rule 104 (function_result -> ARROW type .)
    DEFAULT         reduce using rule 104 (function_result -> ARROW type .)


state 319

    (102) function_signature -> parameter_clause RETHROWS function_result .

    LCURLY          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    PRINT           reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    IMPORT          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    LET             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    STRUCT          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    FOR             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    WHILE           reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    REPEAT          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    IF              reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    SWITCH          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    BREAK           reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    CONTINUE        reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    RETURN          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    AND             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    VAR             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    FUNC            reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    PREFIX          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    POSTFIX         reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    INFIX           reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    DIV             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    EQUAL           reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    SUB             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    ADD             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    EXCLAMATION     reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    MUL             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    MOD             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    OR              reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    LT              reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    GT              reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    CARET           reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    TILDE           reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    CONDOP          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    ANDAND          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    OROR            reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    NOT             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    DOT             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    EQUALEQUAL      reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    NOTEQUAL        reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    LTE             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    GTE             reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    IDENTIFIER      reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    LPAREN          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    STRING_LITERAL  reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    CHAR_CONST      reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    FLOAT_CONST     reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    INT_CONST       reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    NIL_LITERAL     reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    LBRACK          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    $end            reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    RCURLY          reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    CASE            reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)
    DEFAULT         reduce using rule 102 (function_signature -> parameter_clause RETHROWS function_result .)


state 320

    (98) function_signature -> parameter_clause THROWS function_result .

    LCURLY          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    PRINT           reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    IMPORT          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    LET             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    STRUCT          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    FOR             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    WHILE           reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    REPEAT          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    IF              reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    SWITCH          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    BREAK           reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    CONTINUE        reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    RETURN          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    AND             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    VAR             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    FUNC            reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    PREFIX          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    POSTFIX         reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    INFIX           reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    DIV             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    EQUAL           reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    SUB             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    ADD             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    EXCLAMATION     reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    MUL             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    MOD             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    OR              reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    LT              reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    GT              reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    CARET           reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    TILDE           reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    CONDOP          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    ANDAND          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    OROR            reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    NOT             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    DOT             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    EQUALEQUAL      reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    NOTEQUAL        reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    LTE             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    GTE             reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    IDENTIFIER      reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    LPAREN          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    STRING_LITERAL  reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    CHAR_CONST      reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    FLOAT_CONST     reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    INT_CONST       reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    NIL_LITERAL     reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    LBRACK          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    $end            reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    RCURLY          reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    CASE            reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)
    DEFAULT         reduce using rule 98 (function_signature -> parameter_clause THROWS function_result .)


state 321

    (188) function_call_argument -> label_identifier COLON operator .
    (222) prefix_operator -> operator .

    COMMA           reduce using rule 188 (function_call_argument -> label_identifier COLON operator .)
    RPAREN          reduce using rule 188 (function_call_argument -> label_identifier COLON operator .)
    IDENTIFIER      reduce using rule 222 (prefix_operator -> operator .)
    LPAREN          reduce using rule 222 (prefix_operator -> operator .)
    STRING_LITERAL  reduce using rule 222 (prefix_operator -> operator .)
    CHAR_CONST      reduce using rule 222 (prefix_operator -> operator .)
    FLOAT_CONST     reduce using rule 222 (prefix_operator -> operator .)
    INT_CONST       reduce using rule 222 (prefix_operator -> operator .)
    NIL_LITERAL     reduce using rule 222 (prefix_operator -> operator .)
    LBRACK          reduce using rule 222 (prefix_operator -> operator .)


state 322

    (186) function_call_argument -> label_identifier COLON expression .

    COMMA           reduce using rule 186 (function_call_argument -> label_identifier COLON expression .)
    RPAREN          reduce using rule 186 (function_call_argument -> label_identifier COLON expression .)


state 323

    (186) function_call_argument -> label_identifier . COLON expression
    (188) function_call_argument -> label_identifier . COLON operator

    COLON           shift and go to state 354


state 324

    (183) COMMAfunction_call_argument_star -> COMMA function_call_argument . COMMAfunction_call_argument_star
    (183) COMMAfunction_call_argument_star -> . COMMA function_call_argument COMMAfunction_call_argument_star
    (184) COMMAfunction_call_argument_star -> .

    COMMA           shift and go to state 272
    RPAREN          reduce using rule 184 (COMMAfunction_call_argument_star -> .)

    COMMAfunction_call_argument_star shift and go to state 355

state 325

    (192) argument_name -> label_identifier COLON .

    IDENTIFIER      reduce using rule 192 (argument_name -> label_identifier COLON .)
    RPAREN          reduce using rule 192 (argument_name -> label_identifier COLON .)


state 326

    (190) argument_name_star -> argument_name argument_name_star .

    RPAREN          reduce using rule 190 (argument_name_star -> argument_name argument_name_star .)


state 327

    (173) postfix_expression -> postfix_expression DOT INIT LPAREN argument_names . RPAREN

    RPAREN          shift and go to state 356


state 328

    (176) postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names . RPAREN

    RPAREN          shift and go to state 357


state 329

    (37) else_clause -> ELSE code_block .

    PRINT           reduce using rule 37 (else_clause -> ELSE code_block .)
    IMPORT          reduce using rule 37 (else_clause -> ELSE code_block .)
    LET             reduce using rule 37 (else_clause -> ELSE code_block .)
    STRUCT          reduce using rule 37 (else_clause -> ELSE code_block .)
    FOR             reduce using rule 37 (else_clause -> ELSE code_block .)
    WHILE           reduce using rule 37 (else_clause -> ELSE code_block .)
    REPEAT          reduce using rule 37 (else_clause -> ELSE code_block .)
    IF              reduce using rule 37 (else_clause -> ELSE code_block .)
    SWITCH          reduce using rule 37 (else_clause -> ELSE code_block .)
    BREAK           reduce using rule 37 (else_clause -> ELSE code_block .)
    CONTINUE        reduce using rule 37 (else_clause -> ELSE code_block .)
    RETURN          reduce using rule 37 (else_clause -> ELSE code_block .)
    AND             reduce using rule 37 (else_clause -> ELSE code_block .)
    VAR             reduce using rule 37 (else_clause -> ELSE code_block .)
    FUNC            reduce using rule 37 (else_clause -> ELSE code_block .)
    PREFIX          reduce using rule 37 (else_clause -> ELSE code_block .)
    POSTFIX         reduce using rule 37 (else_clause -> ELSE code_block .)
    INFIX           reduce using rule 37 (else_clause -> ELSE code_block .)
    DIV             reduce using rule 37 (else_clause -> ELSE code_block .)
    EQUAL           reduce using rule 37 (else_clause -> ELSE code_block .)
    SUB             reduce using rule 37 (else_clause -> ELSE code_block .)
    ADD             reduce using rule 37 (else_clause -> ELSE code_block .)
    EXCLAMATION     reduce using rule 37 (else_clause -> ELSE code_block .)
    MUL             reduce using rule 37 (else_clause -> ELSE code_block .)
    MOD             reduce using rule 37 (else_clause -> ELSE code_block .)
    OR              reduce using rule 37 (else_clause -> ELSE code_block .)
    LT              reduce using rule 37 (else_clause -> ELSE code_block .)
    GT              reduce using rule 37 (else_clause -> ELSE code_block .)
    CARET           reduce using rule 37 (else_clause -> ELSE code_block .)
    TILDE           reduce using rule 37 (else_clause -> ELSE code_block .)
    CONDOP          reduce using rule 37 (else_clause -> ELSE code_block .)
    ANDAND          reduce using rule 37 (else_clause -> ELSE code_block .)
    OROR            reduce using rule 37 (else_clause -> ELSE code_block .)
    NOT             reduce using rule 37 (else_clause -> ELSE code_block .)
    DOT             reduce using rule 37 (else_clause -> ELSE code_block .)
    EQUALEQUAL      reduce using rule 37 (else_clause -> ELSE code_block .)
    NOTEQUAL        reduce using rule 37 (else_clause -> ELSE code_block .)
    LTE             reduce using rule 37 (else_clause -> ELSE code_block .)
    GTE             reduce using rule 37 (else_clause -> ELSE code_block .)
    IDENTIFIER      reduce using rule 37 (else_clause -> ELSE code_block .)
    LPAREN          reduce using rule 37 (else_clause -> ELSE code_block .)
    STRING_LITERAL  reduce using rule 37 (else_clause -> ELSE code_block .)
    CHAR_CONST      reduce using rule 37 (else_clause -> ELSE code_block .)
    FLOAT_CONST     reduce using rule 37 (else_clause -> ELSE code_block .)
    INT_CONST       reduce using rule 37 (else_clause -> ELSE code_block .)
    NIL_LITERAL     reduce using rule 37 (else_clause -> ELSE code_block .)
    LBRACK          reduce using rule 37 (else_clause -> ELSE code_block .)
    $end            reduce using rule 37 (else_clause -> ELSE code_block .)
    RCURLY          reduce using rule 37 (else_clause -> ELSE code_block .)
    CASE            reduce using rule 37 (else_clause -> ELSE code_block .)
    DEFAULT         reduce using rule 37 (else_clause -> ELSE code_block .)


state 330

    (38) else_clause -> ELSE if_statement .

    PRINT           reduce using rule 38 (else_clause -> ELSE if_statement .)
    IMPORT          reduce using rule 38 (else_clause -> ELSE if_statement .)
    LET             reduce using rule 38 (else_clause -> ELSE if_statement .)
    STRUCT          reduce using rule 38 (else_clause -> ELSE if_statement .)
    FOR             reduce using rule 38 (else_clause -> ELSE if_statement .)
    WHILE           reduce using rule 38 (else_clause -> ELSE if_statement .)
    REPEAT          reduce using rule 38 (else_clause -> ELSE if_statement .)
    IF              reduce using rule 38 (else_clause -> ELSE if_statement .)
    SWITCH          reduce using rule 38 (else_clause -> ELSE if_statement .)
    BREAK           reduce using rule 38 (else_clause -> ELSE if_statement .)
    CONTINUE        reduce using rule 38 (else_clause -> ELSE if_statement .)
    RETURN          reduce using rule 38 (else_clause -> ELSE if_statement .)
    AND             reduce using rule 38 (else_clause -> ELSE if_statement .)
    VAR             reduce using rule 38 (else_clause -> ELSE if_statement .)
    FUNC            reduce using rule 38 (else_clause -> ELSE if_statement .)
    PREFIX          reduce using rule 38 (else_clause -> ELSE if_statement .)
    POSTFIX         reduce using rule 38 (else_clause -> ELSE if_statement .)
    INFIX           reduce using rule 38 (else_clause -> ELSE if_statement .)
    DIV             reduce using rule 38 (else_clause -> ELSE if_statement .)
    EQUAL           reduce using rule 38 (else_clause -> ELSE if_statement .)
    SUB             reduce using rule 38 (else_clause -> ELSE if_statement .)
    ADD             reduce using rule 38 (else_clause -> ELSE if_statement .)
    EXCLAMATION     reduce using rule 38 (else_clause -> ELSE if_statement .)
    MUL             reduce using rule 38 (else_clause -> ELSE if_statement .)
    MOD             reduce using rule 38 (else_clause -> ELSE if_statement .)
    OR              reduce using rule 38 (else_clause -> ELSE if_statement .)
    LT              reduce using rule 38 (else_clause -> ELSE if_statement .)
    GT              reduce using rule 38 (else_clause -> ELSE if_statement .)
    CARET           reduce using rule 38 (else_clause -> ELSE if_statement .)
    TILDE           reduce using rule 38 (else_clause -> ELSE if_statement .)
    CONDOP          reduce using rule 38 (else_clause -> ELSE if_statement .)
    ANDAND          reduce using rule 38 (else_clause -> ELSE if_statement .)
    OROR            reduce using rule 38 (else_clause -> ELSE if_statement .)
    NOT             reduce using rule 38 (else_clause -> ELSE if_statement .)
    DOT             reduce using rule 38 (else_clause -> ELSE if_statement .)
    EQUALEQUAL      reduce using rule 38 (else_clause -> ELSE if_statement .)
    NOTEQUAL        reduce using rule 38 (else_clause -> ELSE if_statement .)
    LTE             reduce using rule 38 (else_clause -> ELSE if_statement .)
    GTE             reduce using rule 38 (else_clause -> ELSE if_statement .)
    IDENTIFIER      reduce using rule 38 (else_clause -> ELSE if_statement .)
    LPAREN          reduce using rule 38 (else_clause -> ELSE if_statement .)
    STRING_LITERAL  reduce using rule 38 (else_clause -> ELSE if_statement .)
    CHAR_CONST      reduce using rule 38 (else_clause -> ELSE if_statement .)
    FLOAT_CONST     reduce using rule 38 (else_clause -> ELSE if_statement .)
    INT_CONST       reduce using rule 38 (else_clause -> ELSE if_statement .)
    NIL_LITERAL     reduce using rule 38 (else_clause -> ELSE if_statement .)
    LBRACK          reduce using rule 38 (else_clause -> ELSE if_statement .)
    $end            reduce using rule 38 (else_clause -> ELSE if_statement .)
    RCURLY          reduce using rule 38 (else_clause -> ELSE if_statement .)
    CASE            reduce using rule 38 (else_clause -> ELSE if_statement .)
    DEFAULT         reduce using rule 38 (else_clause -> ELSE if_statement .)


state 331

    (123) struct_member_star -> struct_member struct_member_star .

    RCURLY          reduce using rule 123 (struct_member_star -> struct_member struct_member_star .)


state 332

    (122) struct_body -> LCURLY struct_member_star RCURLY .

    PRINT           reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    IMPORT          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    LET             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    STRUCT          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    FOR             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    WHILE           reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    REPEAT          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    IF              reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    SWITCH          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    BREAK           reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    CONTINUE        reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    RETURN          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    AND             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    VAR             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    FUNC            reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    PREFIX          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    POSTFIX         reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    INFIX           reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    DIV             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    EQUAL           reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    SUB             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    ADD             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    EXCLAMATION     reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    MUL             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    MOD             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    OR              reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    LT              reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    GT              reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    CARET           reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    TILDE           reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    CONDOP          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    ANDAND          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    OROR            reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    NOT             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    DOT             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    EQUALEQUAL      reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    NOTEQUAL        reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    LTE             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    GTE             reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    IDENTIFIER      reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    LPAREN          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    STRING_LITERAL  reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    CHAR_CONST      reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    FLOAT_CONST     reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    INT_CONST       reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    NIL_LITERAL     reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    LBRACK          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    $end            reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    RCURLY          reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    CASE            reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)
    DEFAULT         reduce using rule 122 (struct_body -> LCURLY struct_member_star RCURLY .)


state 333

    (198) type_identifier -> type_name DOT type_identifier .

    LCURLY          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    EQUAL           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    COMMA           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    PRINT           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    IMPORT          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    LET             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    STRUCT          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    FOR             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    WHILE           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    REPEAT          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    IF              reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    SWITCH          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    BREAK           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    CONTINUE        reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    RETURN          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    AND             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    VAR             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    FUNC            reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    PREFIX          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    POSTFIX         reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    INFIX           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    DIV             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    SUB             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    ADD             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    EXCLAMATION     reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    MUL             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    MOD             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    OR              reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    LT              reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    GT              reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    CARET           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    TILDE           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    CONDOP          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    ANDAND          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    OROR            reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    NOT             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    DOT             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    EQUALEQUAL      reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    NOTEQUAL        reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    LTE             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    GTE             reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    IDENTIFIER      reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    LPAREN          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    STRING_LITERAL  reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    CHAR_CONST      reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    FLOAT_CONST     reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    INT_CONST       reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    NIL_LITERAL     reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    LBRACK          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    $end            reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    RCURLY          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    CASE            reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    DEFAULT         reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    SEMICOLON       reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    WHERE           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    COLON           reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    RANGEOP         reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    RPAREN          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)
    RBRACK          reduce using rule 198 (type_identifier -> type_name DOT type_identifier .)


state 334

    (208) function_type -> function_type_argument_clause RETHROWS ARROW . type
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    LBRACK          shift and go to state 236
    LPAREN          shift and go to state 231
    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    declaration_identifier         shift and go to state 227
    function_type                  shift and go to state 223
    array_type                     shift and go to state 232
    type                           shift and go to state 358

state 335

    (206) function_type -> function_type_argument_clause THROWS ARROW . type
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    LBRACK          shift and go to state 236
    LPAREN          shift and go to state 231
    IDENTIFIER      shift and go to state 63
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    declaration_identifier         shift and go to state 227
    function_type                  shift and go to state 223
    array_type                     shift and go to state 232
    type                           shift and go to state 359

state 336

    (207) function_type -> function_type_argument_clause ARROW type .

    COMMA           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    RANGEOP         reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    RPAREN          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    LCURLY          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    EQUAL           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    PRINT           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    IMPORT          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    LET             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    STRUCT          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    FOR             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    WHILE           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    REPEAT          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    IF              reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    SWITCH          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    BREAK           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    CONTINUE        reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    RETURN          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    AND             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    VAR             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    FUNC            reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    PREFIX          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    POSTFIX         reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    INFIX           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    DIV             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    SUB             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    ADD             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    EXCLAMATION     reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    MUL             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    MOD             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    OR              reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    LT              reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    GT              reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    CARET           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    TILDE           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    CONDOP          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    ANDAND          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    OROR            reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    NOT             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    DOT             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    EQUALEQUAL      reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    NOTEQUAL        reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    LTE             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    GTE             reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    IDENTIFIER      reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    LPAREN          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    STRING_LITERAL  reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    CHAR_CONST      reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    FLOAT_CONST     reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    INT_CONST       reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    NIL_LITERAL     reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    LBRACK          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    $end            reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    RCURLY          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    CASE            reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    DEFAULT         reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    SEMICOLON       reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    WHERE           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    COLON           reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)
    RBRACK          reduce using rule 207 (function_type -> function_type_argument_clause ARROW type .)


state 337

    (216) function_type_argument -> argument_label type_annotation .

    COMMA           reduce using rule 216 (function_type_argument -> argument_label type_annotation .)
    RANGEOP         reduce using rule 216 (function_type_argument -> argument_label type_annotation .)
    RPAREN          reduce using rule 216 (function_type_argument -> argument_label type_annotation .)


state 338

    (214) function_type_argument -> INOUT type .

    COMMA           reduce using rule 214 (function_type_argument -> INOUT type .)
    RANGEOP         reduce using rule 214 (function_type_argument -> INOUT type .)
    RPAREN          reduce using rule 214 (function_type_argument -> INOUT type .)


state 339

    (213) function_type_argument_list -> function_type_argument COMMA . function_type_argument_list
    (212) function_type_argument_list -> . function_type_argument
    (213) function_type_argument_list -> . function_type_argument COMMA function_type_argument_list
    (214) function_type_argument -> . INOUT type
    (215) function_type_argument -> . type
    (216) function_type_argument -> . argument_label type_annotation
    (193) type -> . array_type
    (194) type -> . function_type
    (195) type -> . type_identifier
    (217) argument_label -> . label_identifier
    (218) array_type -> . LBRACK type RBRACK
    (206) function_type -> . function_type_argument_clause THROWS ARROW type
    (207) function_type -> . function_type_argument_clause ARROW type
    (208) function_type -> . function_type_argument_clause RETHROWS ARROW type
    (198) type_identifier -> . type_name DOT type_identifier
    (199) type_identifier -> . type_name
    (221) label_identifier -> . IDENTIFIER
    (209) function_type_argument_clause -> . LPAREN RPAREN
    (210) function_type_argument_clause -> . LPAREN function_type_argument_list RANGEOP RPAREN
    (211) function_type_argument_clause -> . LPAREN function_type_argument_list RPAREN
    (200) type_name -> . declaration_identifier
    (201) type_name -> . type_keyword
    (220) declaration_identifier -> . IDENTIFIER
    (202) type_keyword -> . INT
    (203) type_keyword -> . FLOAT
    (204) type_keyword -> . DOUBLE
    (205) type_keyword -> . STRING

    INOUT           shift and go to state 294
    LBRACK          shift and go to state 236
    IDENTIFIER      shift and go to state 203
    LPAREN          shift and go to state 231
    INT             shift and go to state 233
    FLOAT           shift and go to state 235
    DOUBLE          shift and go to state 234
    STRING          shift and go to state 230

    function_type_argument_clause  shift and go to state 229
    type_keyword                   shift and go to state 224
    type_identifier                shift and go to state 222
    type_name                      shift and go to state 225
    label_identifier               shift and go to state 295
    function_type                  shift and go to state 223
    argument_label                 shift and go to state 292
    array_type                     shift and go to state 232
    function_type_argument_list    shift and go to state 360
    declaration_identifier         shift and go to state 227
    type                           shift and go to state 296
    function_type_argument         shift and go to state 297

state 340

    (211) function_type_argument_clause -> LPAREN function_type_argument_list RPAREN .

    THROWS          reduce using rule 211 (function_type_argument_clause -> LPAREN function_type_argument_list RPAREN .)
    ARROW           reduce using rule 211 (function_type_argument_clause -> LPAREN function_type_argument_list RPAREN .)
    RETHROWS        reduce using rule 211 (function_type_argument_clause -> LPAREN function_type_argument_list RPAREN .)


state 341

    (210) function_type_argument_clause -> LPAREN function_type_argument_list RANGEOP . RPAREN

    RPAREN          shift and go to state 361


state 342

    (218) array_type -> LBRACK type RBRACK .

    COMMA           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    RANGEOP         reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    RPAREN          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    LCURLY          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    EQUAL           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    PRINT           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    IMPORT          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    LET             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    STRUCT          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    FOR             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    WHILE           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    REPEAT          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    IF              reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    SWITCH          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    BREAK           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    CONTINUE        reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    RETURN          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    AND             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    VAR             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    FUNC            reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    PREFIX          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    POSTFIX         reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    INFIX           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    DIV             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    SUB             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    ADD             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    EXCLAMATION     reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    MUL             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    MOD             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    OR              reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    LT              reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    GT              reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    CARET           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    TILDE           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    CONDOP          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    ANDAND          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    OROR            reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    NOT             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    DOT             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    EQUALEQUAL      reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    NOTEQUAL        reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    LTE             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    GTE             reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    IDENTIFIER      reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    LPAREN          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    STRING_LITERAL  reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    CHAR_CONST      reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    FLOAT_CONST     reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    INT_CONST       reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    NIL_LITERAL     reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    LBRACK          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    $end            reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    RCURLY          reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    CASE            reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    DEFAULT         reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    SEMICOLON       reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    WHERE           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    COLON           reduce using rule 218 (array_type -> LBRACK type RBRACK .)
    RBRACK          reduce using rule 218 (array_type -> LBRACK type RBRACK .)


state 343

    (19) for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON . expression RPAREN code_block
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    postfix_expression             shift and go to state 76
    operator                       shift and go to state 18
    parenthesized_expression       shift and go to state 53
    expression                     shift and go to state 362
    primary_expression             shift and go to state 58

state 344

    (146) commaexp -> COMMA expression commaexp .

    SEMICOLON       reduce using rule 146 (commaexp -> COMMA expression commaexp .)
    RBRACK          reduce using rule 146 (commaexp -> COMMA expression commaexp .)


state 345

    (46) case_item_list -> pattern where_clause .
    (48) case_item_list -> pattern where_clause . COMMA case_item_list

    COLON           reduce using rule 46 (case_item_list -> pattern where_clause .)
    COMMA           shift and go to state 363


state 346

    (49) case_item_list -> pattern COMMA . case_item_list
    (46) case_item_list -> . pattern where_clause
    (47) case_item_list -> . pattern
    (48) case_item_list -> . pattern where_clause COMMA case_item_list
    (49) case_item_list -> . pattern COMMA case_item_list
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern                        shift and go to state 305
    case_item_list                 shift and go to state 364
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 347

    (51) where_clause -> WHERE . where_expression
    (52) where_expression -> . expression
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    literal_expression             shift and go to state 28
    prefix_expression              shift and go to state 64
    where_expression               shift and go to state 365
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 366
    parenthesized_expression       shift and go to state 53

state 348

    (45) case_label -> CASE case_item_list COLON .

    PRINT           reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    IMPORT          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    LET             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    STRUCT          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    FOR             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    WHILE           reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    REPEAT          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    IF              reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    SWITCH          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    BREAK           reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    CONTINUE        reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    RETURN          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    AND             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    VAR             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    FUNC            reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    PREFIX          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    POSTFIX         reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    INFIX           reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    DIV             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    EQUAL           reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    SUB             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    ADD             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    EXCLAMATION     reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    MUL             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    MOD             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    OR              reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    LT              reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    GT              reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    CARET           reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    TILDE           reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    CONDOP          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    ANDAND          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    OROR            reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    NOT             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    DOT             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    EQUALEQUAL      reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    NOTEQUAL        reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    LTE             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    GTE             reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    IDENTIFIER      reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    LPAREN          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    STRING_LITERAL  reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    CHAR_CONST      reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    FLOAT_CONST     reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    INT_CONST       reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    NIL_LITERAL     reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    LBRACK          reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    CASE            reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    DEFAULT         reduce using rule 45 (case_label -> CASE case_item_list COLON .)
    RCURLY          reduce using rule 45 (case_label -> CASE case_item_list COLON .)


state 349

    (116) parameter -> local_parameter_name type_annotation RANGEOP .

    COMMA           reduce using rule 116 (parameter -> local_parameter_name type_annotation RANGEOP .)
    RPAREN          reduce using rule 116 (parameter -> local_parameter_name type_annotation RANGEOP .)


state 350

    (119) default_argument_clause -> EQUAL . expression
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    declaration_identifier         shift and go to state 23
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    operator                       shift and go to state 18
    expression                     shift and go to state 367
    parenthesized_expression       shift and go to state 53

state 351

    (113) parameter -> local_parameter_name type_annotation default_argument_clause .

    COMMA           reduce using rule 113 (parameter -> local_parameter_name type_annotation default_argument_clause .)
    RPAREN          reduce using rule 113 (parameter -> local_parameter_name type_annotation default_argument_clause .)


state 352

    (109) commapar -> COMMA parameter . commapar
    (109) commapar -> . COMMA parameter commapar
    (110) commapar -> .

    COMMA           shift and go to state 314
    RPAREN          reduce using rule 110 (commapar -> .)

    commapar                       shift and go to state 368

state 353

    (111) parameter -> external_parameter_name local_parameter_name type_annotation . default_argument_clause
    (114) parameter -> external_parameter_name local_parameter_name type_annotation .
    (115) parameter -> external_parameter_name local_parameter_name type_annotation . RANGEOP
    (119) default_argument_clause -> . EQUAL expression

    COMMA           reduce using rule 114 (parameter -> external_parameter_name local_parameter_name type_annotation .)
    RPAREN          reduce using rule 114 (parameter -> external_parameter_name local_parameter_name type_annotation .)
    RANGEOP         shift and go to state 369
    EQUAL           shift and go to state 350

    default_argument_clause        shift and go to state 370

state 354

    (186) function_call_argument -> label_identifier COLON . expression
    (188) function_call_argument -> label_identifier COLON . operator
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (220) declaration_identifier -> . IDENTIFIER
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    AND             shift and go to state 206
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    IDENTIFIER      shift and go to state 63
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_expression              shift and go to state 64
    literal_expression             shift and go to state 28
    in_out_expression              shift and go to state 30
    array_literal                  shift and go to state 83
    postfix_expression             shift and go to state 76
    operator                       shift and go to state 321
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    prefix_operator                shift and go to state 6
    primary_expression             shift and go to state 58
    declaration_identifier         shift and go to state 23
    expression                     shift and go to state 322
    parenthesized_expression       shift and go to state 53

state 355

    (183) COMMAfunction_call_argument_star -> COMMA function_call_argument COMMAfunction_call_argument_star .

    RPAREN          reduce using rule 183 (COMMAfunction_call_argument_star -> COMMA function_call_argument COMMAfunction_call_argument_star .)


state 356

    (173) postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .

    DOT             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    LPAREN          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    LBRACK          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    EQUAL           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    EQUALEQUAL      reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    NOTEQUAL        reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    LTE             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    GTE             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    LT              reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    GT              reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    DIV             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    SUB             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    ADD             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    EXCLAMATION     reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    MUL             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    MOD             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    AND             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    OR              reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    CARET           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    TILDE           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    CONDOP          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    ANDAND          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    OROR            reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    NOT             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    RPAREN          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    PRINT           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    IMPORT          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    LET             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    STRUCT          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    FOR             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    WHILE           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    REPEAT          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    IF              reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    SWITCH          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    BREAK           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    CONTINUE        reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    RETURN          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    VAR             reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    FUNC            reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    PREFIX          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    POSTFIX         reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    INFIX           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    IDENTIFIER      reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    STRING_LITERAL  reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    CHAR_CONST      reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    FLOAT_CONST     reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    INT_CONST       reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    NIL_LITERAL     reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    $end            reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    RCURLY          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    CASE            reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    DEFAULT         reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    COMMA           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    SEMICOLON       reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    RBRACK          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    LCURLY          reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    WHERE           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)
    COLON           reduce using rule 173 (postfix_expression -> postfix_expression DOT INIT LPAREN argument_names RPAREN .)


state 357

    (176) postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .

    DOT             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    LPAREN          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    LBRACK          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    EQUAL           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    EQUALEQUAL      reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    NOTEQUAL        reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    LTE             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    GTE             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    LT              reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    GT              reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    DIV             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    SUB             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    ADD             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    EXCLAMATION     reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    MUL             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    MOD             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    AND             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    OR              reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    CARET           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    TILDE           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    CONDOP          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    ANDAND          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    OROR            reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    NOT             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    RPAREN          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    PRINT           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    IMPORT          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    LET             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    STRUCT          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    FOR             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    WHILE           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    REPEAT          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    IF              reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    SWITCH          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    BREAK           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    CONTINUE        reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    RETURN          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    VAR             reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    FUNC            reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    PREFIX          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    POSTFIX         reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    INFIX           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    IDENTIFIER      reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    STRING_LITERAL  reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    CHAR_CONST      reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    FLOAT_CONST     reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    INT_CONST       reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    NIL_LITERAL     reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    $end            reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    RCURLY          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    CASE            reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    DEFAULT         reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    COMMA           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    SEMICOLON       reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    RBRACK          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    LCURLY          reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    WHERE           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)
    COLON           reduce using rule 176 (postfix_expression -> postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN .)


state 358

    (208) function_type -> function_type_argument_clause RETHROWS ARROW type .

    COMMA           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    RANGEOP         reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    RPAREN          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    LCURLY          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    EQUAL           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    PRINT           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    IMPORT          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    LET             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    STRUCT          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    FOR             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    WHILE           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    REPEAT          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    IF              reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    SWITCH          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    BREAK           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    CONTINUE        reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    RETURN          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    AND             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    VAR             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    FUNC            reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    PREFIX          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    POSTFIX         reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    INFIX           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    DIV             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    SUB             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    ADD             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    EXCLAMATION     reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    MUL             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    MOD             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    OR              reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    LT              reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    GT              reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    CARET           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    TILDE           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    CONDOP          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    ANDAND          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    OROR            reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    NOT             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    DOT             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    EQUALEQUAL      reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    NOTEQUAL        reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    LTE             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    GTE             reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    IDENTIFIER      reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    LPAREN          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    STRING_LITERAL  reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    CHAR_CONST      reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    FLOAT_CONST     reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    INT_CONST       reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    NIL_LITERAL     reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    LBRACK          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    $end            reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    RCURLY          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    CASE            reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    DEFAULT         reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    SEMICOLON       reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    WHERE           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    COLON           reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)
    RBRACK          reduce using rule 208 (function_type -> function_type_argument_clause RETHROWS ARROW type .)


state 359

    (206) function_type -> function_type_argument_clause THROWS ARROW type .

    COMMA           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    RANGEOP         reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    RPAREN          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    LCURLY          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    EQUAL           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    PRINT           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    IMPORT          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    LET             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    STRUCT          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    FOR             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    WHILE           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    REPEAT          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    IF              reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    SWITCH          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    BREAK           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    CONTINUE        reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    RETURN          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    AND             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    VAR             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    FUNC            reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    PREFIX          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    POSTFIX         reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    INFIX           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    DIV             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    SUB             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    ADD             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    EXCLAMATION     reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    MUL             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    MOD             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    OR              reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    LT              reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    GT              reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    CARET           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    TILDE           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    CONDOP          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    ANDAND          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    OROR            reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    NOT             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    DOT             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    EQUALEQUAL      reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    NOTEQUAL        reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    LTE             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    GTE             reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    IDENTIFIER      reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    LPAREN          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    STRING_LITERAL  reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    CHAR_CONST      reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    FLOAT_CONST     reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    INT_CONST       reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    NIL_LITERAL     reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    LBRACK          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    $end            reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    RCURLY          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    CASE            reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    DEFAULT         reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    SEMICOLON       reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    WHERE           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    COLON           reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)
    RBRACK          reduce using rule 206 (function_type -> function_type_argument_clause THROWS ARROW type .)


state 360

    (213) function_type_argument_list -> function_type_argument COMMA function_type_argument_list .

    RANGEOP         reduce using rule 213 (function_type_argument_list -> function_type_argument COMMA function_type_argument_list .)
    RPAREN          reduce using rule 213 (function_type_argument_list -> function_type_argument COMMA function_type_argument_list .)


state 361

    (210) function_type_argument_clause -> LPAREN function_type_argument_list RANGEOP RPAREN .

    THROWS          reduce using rule 210 (function_type_argument_clause -> LPAREN function_type_argument_list RANGEOP RPAREN .)
    ARROW           reduce using rule 210 (function_type_argument_clause -> LPAREN function_type_argument_list RANGEOP RPAREN .)
    RETHROWS        reduce using rule 210 (function_type_argument_clause -> LPAREN function_type_argument_list RANGEOP RPAREN .)


state 362

    (19) for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression . RPAREN code_block

    RPAREN          shift and go to state 371


state 363

    (48) case_item_list -> pattern where_clause COMMA . case_item_list
    (46) case_item_list -> . pattern where_clause
    (47) case_item_list -> . pattern
    (48) case_item_list -> . pattern where_clause COMMA case_item_list
    (49) case_item_list -> . pattern COMMA case_item_list
    (135) pattern -> . identifier_pattern type_annotation
    (136) pattern -> . identifier_pattern
    (137) pattern -> . value_binding_pattern
    (138) pattern -> . expression_pattern
    (139) identifier_pattern -> . declaration_identifier
    (140) value_binding_pattern -> . VAR pattern
    (141) value_binding_pattern -> . LET pattern
    (142) expression_pattern -> . expression
    (220) declaration_identifier -> . IDENTIFIER
    (143) expression -> . prefix_expression binary_expressions
    (144) expression -> . prefix_expression
    (148) prefix_expression -> . prefix_operator postfix_expression
    (149) prefix_expression -> . postfix_expression
    (150) prefix_expression -> . in_out_expression
    (222) prefix_operator -> . operator
    (170) postfix_expression -> . primary_expression
    (171) postfix_expression -> . postfix_expression function_call_argument_clause
    (172) postfix_expression -> . postfix_expression DOT INIT
    (173) postfix_expression -> . postfix_expression DOT INIT LPAREN argument_names RPAREN
    (174) postfix_expression -> . postfix_expression DOT INT_CONST
    (175) postfix_expression -> . postfix_expression DOT declaration_identifier
    (176) postfix_expression -> . postfix_expression DOT declaration_identifier LPAREN argument_names RPAREN
    (177) postfix_expression -> . postfix_expression LPAREN argument_names RPAREN
    (178) postfix_expression -> . postfix_expression DOT SELF
    (179) postfix_expression -> . postfix_expression LBRACK expression_list RBRACK
    (151) in_out_expression -> . AND declaration_identifier
    (225) operator -> . DIV
    (226) operator -> . EQUAL
    (227) operator -> . SUB
    (228) operator -> . ADD
    (229) operator -> . EXCLAMATION
    (230) operator -> . MUL
    (231) operator -> . MOD
    (232) operator -> . AND
    (233) operator -> . OR
    (234) operator -> . LT
    (235) operator -> . GT
    (236) operator -> . CARET
    (237) operator -> . TILDE
    (238) operator -> . CONDOP
    (239) operator -> . conditional_operator
    (240) operator -> . ANDAND
    (241) operator -> . OROR
    (242) operator -> . NOT
    (243) operator -> . DOT
    (158) primary_expression -> . declaration_identifier
    (159) primary_expression -> . literal_expression
    (160) primary_expression -> . parenthesized_expression
    (244) conditional_operator -> . EQUALEQUAL
    (245) conditional_operator -> . NOTEQUAL
    (246) conditional_operator -> . LTE
    (247) conditional_operator -> . GTE
    (248) conditional_operator -> . LT
    (249) conditional_operator -> . GT
    (161) literal_expression -> . literal
    (162) literal_expression -> . array_literal
    (169) parenthesized_expression -> . LPAREN expression RPAREN
    (250) literal -> . STRING_LITERAL
    (251) literal -> . CHAR_CONST
    (252) literal -> . FLOAT_CONST
    (253) literal -> . INT_CONST
    (254) literal -> . NIL_LITERAL
    (163) array_literal -> . LBRACK array_literal_items RBRACK
    (164) array_literal -> . LBRACK RBRACK

    VAR             shift and go to state 108
    LET             shift and go to state 110
    IDENTIFIER      shift and go to state 63
    AND             shift and go to state 27
    DIV             shift and go to state 73
    EQUAL           shift and go to state 70
    SUB             shift and go to state 40
    ADD             shift and go to state 57
    EXCLAMATION     shift and go to state 37
    MUL             shift and go to state 43
    MOD             shift and go to state 36
    OR              shift and go to state 14
    LT              shift and go to state 78
    GT              shift and go to state 10
    CARET           shift and go to state 15
    TILDE           shift and go to state 56
    CONDOP          shift and go to state 65
    ANDAND          shift and go to state 62
    OROR            shift and go to state 38
    NOT             shift and go to state 33
    DOT             shift and go to state 46
    EQUALEQUAL      shift and go to state 52
    NOTEQUAL        shift and go to state 1
    LTE             shift and go to state 2
    GTE             shift and go to state 74
    LPAREN          shift and go to state 84
    STRING_LITERAL  shift and go to state 61
    CHAR_CONST      shift and go to state 66
    FLOAT_CONST     shift and go to state 7
    INT_CONST       shift and go to state 47
    NIL_LITERAL     shift and go to state 72
    LBRACK          shift and go to state 31

    prefix_operator                shift and go to state 6
    operator                       shift and go to state 18
    pattern                        shift and go to state 305
    case_item_list                 shift and go to state 372
    postfix_expression             shift and go to state 76
    expression_pattern             shift and go to state 102
    literal                        shift and go to state 82
    conditional_operator           shift and go to state 79
    declaration_identifier         shift and go to state 142
    identifier_pattern             shift and go to state 107
    array_literal                  shift and go to state 83
    primary_expression             shift and go to state 58
    literal_expression             shift and go to state 28
    parenthesized_expression       shift and go to state 53
    prefix_expression              shift and go to state 64
    in_out_expression              shift and go to state 30
    value_binding_pattern          shift and go to state 109
    expression                     shift and go to state 111

state 364

    (49) case_item_list -> pattern COMMA case_item_list .

    COLON           reduce using rule 49 (case_item_list -> pattern COMMA case_item_list .)


state 365

    (51) where_clause -> WHERE where_expression .

    COMMA           reduce using rule 51 (where_clause -> WHERE where_expression .)
    COLON           reduce using rule 51 (where_clause -> WHERE where_expression .)


state 366

    (52) where_expression -> expression .

    COMMA           reduce using rule 52 (where_expression -> expression .)
    COLON           reduce using rule 52 (where_expression -> expression .)


state 367

    (119) default_argument_clause -> EQUAL expression .

    COMMA           reduce using rule 119 (default_argument_clause -> EQUAL expression .)
    RPAREN          reduce using rule 119 (default_argument_clause -> EQUAL expression .)


state 368

    (109) commapar -> COMMA parameter commapar .

    RPAREN          reduce using rule 109 (commapar -> COMMA parameter commapar .)


state 369

    (115) parameter -> external_parameter_name local_parameter_name type_annotation RANGEOP .

    COMMA           reduce using rule 115 (parameter -> external_parameter_name local_parameter_name type_annotation RANGEOP .)
    RPAREN          reduce using rule 115 (parameter -> external_parameter_name local_parameter_name type_annotation RANGEOP .)


state 370

    (111) parameter -> external_parameter_name local_parameter_name type_annotation default_argument_clause .

    COMMA           reduce using rule 111 (parameter -> external_parameter_name local_parameter_name type_annotation default_argument_clause .)
    RPAREN          reduce using rule 111 (parameter -> external_parameter_name local_parameter_name type_annotation default_argument_clause .)


state 371

    (19) for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN . code_block
    (68) code_block -> . LCURLY statements RCURLY
    (69) code_block -> . LCURLY RCURLY

    LCURLY          shift and go to state 113

    code_block                     shift and go to state 373

state 372

    (48) case_item_list -> pattern where_clause COMMA case_item_list .

    COLON           reduce using rule 48 (case_item_list -> pattern where_clause COMMA case_item_list .)


state 373

    (19) for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .

    PRINT           reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    IMPORT          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    LET             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    STRUCT          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    FOR             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    WHILE           reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    REPEAT          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    IF              reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    SWITCH          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    BREAK           reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    CONTINUE        reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    RETURN          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    AND             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    VAR             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    FUNC            reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    PREFIX          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    POSTFIX         reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    INFIX           reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    DIV             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    EQUAL           reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    SUB             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    ADD             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    EXCLAMATION     reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    MUL             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    MOD             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    OR              reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    LT              reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    GT              reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    CARET           reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    TILDE           reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    CONDOP          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    ANDAND          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    OROR            reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    NOT             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    DOT             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    EQUALEQUAL      reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    NOTEQUAL        reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    LTE             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    GTE             reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    IDENTIFIER      reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    LPAREN          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    STRING_LITERAL  reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    CHAR_CONST      reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    FLOAT_CONST     reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    INT_CONST       reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    NIL_LITERAL     reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    LBRACK          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    $end            reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    RCURLY          reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    CASE            reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)
    DEFAULT         reduce using rule 19 (for_statement -> FOR LPAREN for_init SEMICOLON expression SEMICOLON expression RPAREN code_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 16 resolved as shift
WARNING: shift/reduce conflict for DIV in state 16 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 16 resolved as shift
WARNING: shift/reduce conflict for SUB in state 16 resolved as shift
WARNING: shift/reduce conflict for ADD in state 16 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 16 resolved as shift
WARNING: shift/reduce conflict for MUL in state 16 resolved as shift
WARNING: shift/reduce conflict for MOD in state 16 resolved as shift
WARNING: shift/reduce conflict for OR in state 16 resolved as shift
WARNING: shift/reduce conflict for LT in state 16 resolved as shift
WARNING: shift/reduce conflict for GT in state 16 resolved as shift
WARNING: shift/reduce conflict for CARET in state 16 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 16 resolved as shift
WARNING: shift/reduce conflict for CONDOP in state 16 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 16 resolved as shift
WARNING: shift/reduce conflict for OROR in state 16 resolved as shift
WARNING: shift/reduce conflict for NOT in state 16 resolved as shift
WARNING: shift/reduce conflict for DOT in state 16 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 16 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 16 resolved as shift
WARNING: shift/reduce conflict for LTE in state 16 resolved as shift
WARNING: shift/reduce conflict for GTE in state 16 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 16 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 16 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 16 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 16 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 16 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 16 resolved as shift
WARNING: shift/reduce conflict for NIL_LITERAL in state 16 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 16 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for LTE in state 64 resolved as shift
WARNING: shift/reduce conflict for GTE in state 64 resolved as shift
WARNING: shift/reduce conflict for LT in state 64 resolved as shift
WARNING: shift/reduce conflict for GT in state 64 resolved as shift
WARNING: shift/reduce conflict for DIV in state 64 resolved as shift
WARNING: shift/reduce conflict for SUB in state 64 resolved as shift
WARNING: shift/reduce conflict for ADD in state 64 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 64 resolved as shift
WARNING: shift/reduce conflict for MUL in state 64 resolved as shift
WARNING: shift/reduce conflict for MOD in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for CARET in state 64 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 64 resolved as shift
WARNING: shift/reduce conflict for CONDOP in state 64 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 64 resolved as shift
WARNING: shift/reduce conflict for OROR in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT in state 64 resolved as shift
WARNING: shift/reduce conflict for DOT in state 64 resolved as shift
WARNING: shift/reduce conflict for DOT in state 76 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 76 resolved as shift
WARNING: shift/reduce conflict for DOT in state 89 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 89 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 89 resolved as shift
WARNING: shift/reduce conflict for DOT in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for COLON in state 107 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for DIV in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for SUB in state 136 resolved as shift
WARNING: shift/reduce conflict for ADD in state 136 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 136 resolved as shift
WARNING: shift/reduce conflict for MUL in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for LT in state 136 resolved as shift
WARNING: shift/reduce conflict for GT in state 136 resolved as shift
WARNING: shift/reduce conflict for CARET in state 136 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 136 resolved as shift
WARNING: shift/reduce conflict for CONDOP in state 136 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 136 resolved as shift
WARNING: shift/reduce conflict for OROR in state 136 resolved as shift
WARNING: shift/reduce conflict for NOT in state 136 resolved as shift
WARNING: shift/reduce conflict for DOT in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for LTE in state 136 resolved as shift
WARNING: shift/reduce conflict for GTE in state 136 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 136 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 136 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 136 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 136 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 136 resolved as shift
WARNING: shift/reduce conflict for INT_CONST in state 136 resolved as shift
WARNING: shift/reduce conflict for NIL_LITERAL in state 136 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 139 resolved as shift
WARNING: shift/reduce conflict for EQUALEQUAL in state 139 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 139 resolved as shift
WARNING: shift/reduce conflict for LTE in state 139 resolved as shift
WARNING: shift/reduce conflict for GTE in state 139 resolved as shift
WARNING: shift/reduce conflict for LT in state 139 resolved as shift
WARNING: shift/reduce conflict for GT in state 139 resolved as shift
WARNING: shift/reduce conflict for DIV in state 139 resolved as shift
WARNING: shift/reduce conflict for SUB in state 139 resolved as shift
WARNING: shift/reduce conflict for ADD in state 139 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 139 resolved as shift
WARNING: shift/reduce conflict for MUL in state 139 resolved as shift
WARNING: shift/reduce conflict for MOD in state 139 resolved as shift
WARNING: shift/reduce conflict for AND in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 139 resolved as shift
WARNING: shift/reduce conflict for CARET in state 139 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 139 resolved as shift
WARNING: shift/reduce conflict for CONDOP in state 139 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 139 resolved as shift
WARNING: shift/reduce conflict for OROR in state 139 resolved as shift
WARNING: shift/reduce conflict for NOT in state 139 resolved as shift
WARNING: shift/reduce conflict for DOT in state 139 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 212 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 213 resolved as shift
WARNING: shift/reduce conflict for DOT in state 218 resolved as shift
WARNING: shift/reduce conflict for DOT in state 225 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 271 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (operator -> GT)
WARNING: rejected rule (conditional_operator -> GT) in state 10
WARNING: reduce/reduce conflict in state 78 resolved using rule (operator -> LT)
WARNING: rejected rule (conditional_operator -> LT) in state 78
WARNING: reduce/reduce conflict in state 105 resolved using rule (variable_name -> declaration_identifier)
WARNING: rejected rule (identifier_pattern -> declaration_identifier) in state 105
WARNING: reduce/reduce conflict in state 105 resolved using rule (identifier_pattern -> declaration_identifier)
WARNING: rejected rule (primary_expression -> declaration_identifier) in state 105
WARNING: reduce/reduce conflict in state 135 resolved using rule (operator -> LT)
WARNING: rejected rule (conditional_operator -> LT) in state 135
WARNING: reduce/reduce conflict in state 138 resolved using rule (operator -> GT)
WARNING: rejected rule (conditional_operator -> GT) in state 138
WARNING: reduce/reduce conflict in state 142 resolved using rule (identifier_pattern -> declaration_identifier)
WARNING: rejected rule (primary_expression -> declaration_identifier) in state 142
WARNING: reduce/reduce conflict in state 169 resolved using rule (print_arg -> literal)
WARNING: rejected rule (literal_expression -> literal) in state 169
WARNING: reduce/reduce conflict in state 170 resolved using rule (identifier -> IDENTIFIER)
WARNING: rejected rule (declaration_identifier -> IDENTIFIER) in state 170
WARNING: Rule (conditional_operator -> GT) is never reduced
WARNING: Rule (conditional_operator -> LT) is never reduced
